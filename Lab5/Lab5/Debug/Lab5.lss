
Lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  000017fe  00001892  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  0080011a  0080011a  000018ac  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000018ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001908  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00001948  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010f4  00000000  00000000  000019a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009c5  00000000  00000000  00002a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000955  00000000  00000000  00003461  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e8  00000000  00000000  00003db8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000564  00000000  00000000  00003fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000037f  00000000  00000000  00004504  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ee ef       	ldi	r30, 0xFE	; 254
      7c:	f7 e1       	ldi	r31, 0x17	; 23
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	aa 31       	cpi	r26, 0x1A	; 26
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	aa e1       	ldi	r26, 0x1A	; 26
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a1 32       	cpi	r26, 0x21	; 33
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 ff 06 	call	0xdfe	; 0xdfe <main>
      9e:	0c 94 fd 0b 	jmp	0x17fa	; 0x17fa <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <hd44780_outnibble>:
/*
 * Send one nibble out to the LCD controller.
 */
static void
hd44780_outnibble(uint8_t n, uint8_t rs)
{
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	cd b7       	in	r28, 0x3d	; 61
      ac:	de b7       	in	r29, 0x3e	; 62
      ae:	a4 97       	sbiw	r28, 0x24	; 36
      b0:	0f b6       	in	r0, 0x3f	; 63
      b2:	f8 94       	cli
      b4:	de bf       	out	0x3e, r29	; 62
      b6:	0f be       	out	0x3f, r0	; 63
      b8:	cd bf       	out	0x3d, r28	; 61
      ba:	8b a3       	std	Y+35, r24	; 0x23
      bc:	6c a3       	std	Y+36, r22	; 0x24
  CLR(PORT, HD44780_RW);
      be:	85 e2       	ldi	r24, 0x25	; 37
      c0:	90 e0       	ldi	r25, 0x00	; 0
      c2:	25 e2       	ldi	r18, 0x25	; 37
      c4:	30 e0       	ldi	r19, 0x00	; 0
      c6:	f9 01       	movw	r30, r18
      c8:	20 81       	ld	r18, Z
      ca:	2f 7e       	andi	r18, 0xEF	; 239
      cc:	fc 01       	movw	r30, r24
      ce:	20 83       	st	Z, r18
  if (rs)
      d0:	8c a1       	ldd	r24, Y+36	; 0x24
      d2:	88 23       	and	r24, r24
      d4:	51 f0       	breq	.+20     	; 0xea <hd44780_outnibble+0x44>
    SET(PORT, HD44780_RS);
      d6:	85 e2       	ldi	r24, 0x25	; 37
      d8:	90 e0       	ldi	r25, 0x00	; 0
      da:	25 e2       	ldi	r18, 0x25	; 37
      dc:	30 e0       	ldi	r19, 0x00	; 0
      de:	f9 01       	movw	r30, r18
      e0:	20 81       	ld	r18, Z
      e2:	20 62       	ori	r18, 0x20	; 32
      e4:	fc 01       	movw	r30, r24
      e6:	20 83       	st	Z, r18
      e8:	09 c0       	rjmp	.+18     	; 0xfc <hd44780_outnibble+0x56>
  else
    CLR(PORT, HD44780_RS);
      ea:	85 e2       	ldi	r24, 0x25	; 37
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	25 e2       	ldi	r18, 0x25	; 37
      f0:	30 e0       	ldi	r19, 0x00	; 0
      f2:	f9 01       	movw	r30, r18
      f4:	20 81       	ld	r18, Z
      f6:	2f 7d       	andi	r18, 0xDF	; 223
      f8:	fc 01       	movw	r30, r24
      fa:	20 83       	st	Z, r18
  ASSIGN(PORT, HD44780_D4, n);
      fc:	88 e2       	ldi	r24, 0x28	; 40
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	28 e2       	ldi	r18, 0x28	; 40
     102:	30 e0       	ldi	r19, 0x00	; 0
     104:	f9 01       	movw	r30, r18
     106:	20 81       	ld	r18, Z
     108:	32 2f       	mov	r19, r18
     10a:	30 7f       	andi	r19, 0xF0	; 240
     10c:	2b a1       	ldd	r18, Y+35	; 0x23
     10e:	23 2b       	or	r18, r19
     110:	fc 01       	movw	r30, r24
     112:	20 83       	st	Z, r18
     114:	19 82       	std	Y+1, r1	; 0x01
static inline uint8_t
hd44780_pulse_e(bool readback)
{
  uint8_t x;

  SET(PORT, HD44780_E);
     116:	85 e2       	ldi	r24, 0x25	; 37
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	25 e2       	ldi	r18, 0x25	; 37
     11c:	30 e0       	ldi	r19, 0x00	; 0
     11e:	f9 01       	movw	r30, r18
     120:	20 81       	ld	r18, Z
     122:	28 60       	ori	r18, 0x08	; 8
     124:	fc 01       	movw	r30, r24
     126:	20 83       	st	Z, r18
     128:	80 e0       	ldi	r24, 0x00	; 0
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	a0 e0       	ldi	r26, 0x00	; 0
     12e:	bf e3       	ldi	r27, 0x3F	; 63
     130:	8a 83       	std	Y+2, r24	; 0x02
     132:	9b 83       	std	Y+3, r25	; 0x03
     134:	ac 83       	std	Y+4, r26	; 0x04
     136:	bd 83       	std	Y+5, r27	; 0x05
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     138:	2b ea       	ldi	r18, 0xAB	; 171
     13a:	3a ea       	ldi	r19, 0xAA	; 170
     13c:	4a e2       	ldi	r20, 0x2A	; 42
     13e:	50 e4       	ldi	r21, 0x40	; 64
     140:	6a 81       	ldd	r22, Y+2	; 0x02
     142:	7b 81       	ldd	r23, Y+3	; 0x03
     144:	8c 81       	ldd	r24, Y+4	; 0x04
     146:	9d 81       	ldd	r25, Y+5	; 0x05
     148:	0e 94 b2 08 	call	0x1164	; 0x1164 <__mulsf3>
     14c:	dc 01       	movw	r26, r24
     14e:	cb 01       	movw	r24, r22
     150:	8e 83       	std	Y+6, r24	; 0x06
     152:	9f 83       	std	Y+7, r25	; 0x07
     154:	a8 87       	std	Y+8, r26	; 0x08
     156:	b9 87       	std	Y+9, r27	; 0x09
	__tmp2 = ((F_CPU) / 4e6) * __us;
     158:	8a 81       	ldd	r24, Y+2	; 0x02
     15a:	9b 81       	ldd	r25, Y+3	; 0x03
     15c:	ac 81       	ldd	r26, Y+4	; 0x04
     15e:	bd 81       	ldd	r27, Y+5	; 0x05
     160:	9c 01       	movw	r18, r24
     162:	ad 01       	movw	r20, r26
     164:	bc 01       	movw	r22, r24
     166:	cd 01       	movw	r24, r26
     168:	0e 94 26 07 	call	0xe4c	; 0xe4c <__addsf3>
     16c:	dc 01       	movw	r26, r24
     16e:	cb 01       	movw	r24, r22
     170:	8a 87       	std	Y+10, r24	; 0x0a
     172:	9b 87       	std	Y+11, r25	; 0x0b
     174:	ac 87       	std	Y+12, r26	; 0x0c
     176:	bd 87       	std	Y+13, r27	; 0x0d
	if (__tmp < 1.0)
     178:	20 e0       	ldi	r18, 0x00	; 0
     17a:	30 e0       	ldi	r19, 0x00	; 0
     17c:	40 e8       	ldi	r20, 0x80	; 128
     17e:	5f e3       	ldi	r21, 0x3F	; 63
     180:	6e 81       	ldd	r22, Y+6	; 0x06
     182:	7f 81       	ldd	r23, Y+7	; 0x07
     184:	88 85       	ldd	r24, Y+8	; 0x08
     186:	99 85       	ldd	r25, Y+9	; 0x09
     188:	0e 94 92 07 	call	0xf24	; 0xf24 <__cmpsf2>
     18c:	88 23       	and	r24, r24
     18e:	1c f4       	brge	.+6      	; 0x196 <hd44780_outnibble+0xf0>
		__ticks = 1;
     190:	81 e0       	ldi	r24, 0x01	; 1
     192:	8e 87       	std	Y+14, r24	; 0x0e
     194:	b2 c0       	rjmp	.+356    	; 0x2fa <hd44780_outnibble+0x254>
	else if (__tmp2 > 65535)
     196:	20 e0       	ldi	r18, 0x00	; 0
     198:	3f ef       	ldi	r19, 0xFF	; 255
     19a:	4f e7       	ldi	r20, 0x7F	; 127
     19c:	57 e4       	ldi	r21, 0x47	; 71
     19e:	6a 85       	ldd	r22, Y+10	; 0x0a
     1a0:	7b 85       	ldd	r23, Y+11	; 0x0b
     1a2:	8c 85       	ldd	r24, Y+12	; 0x0c
     1a4:	9d 85       	ldd	r25, Y+13	; 0x0d
     1a6:	0e 94 ad 08 	call	0x115a	; 0x115a <__gesf2>
     1aa:	18 16       	cp	r1, r24
     1ac:	0c f0       	brlt	.+2      	; 0x1b0 <hd44780_outnibble+0x10a>
     1ae:	7b c0       	rjmp	.+246    	; 0x2a6 <hd44780_outnibble+0x200>
	{
		_delay_ms(__us / 1000.0);
     1b0:	20 e0       	ldi	r18, 0x00	; 0
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	4a e7       	ldi	r20, 0x7A	; 122
     1b6:	54 e4       	ldi	r21, 0x44	; 68
     1b8:	6a 81       	ldd	r22, Y+2	; 0x02
     1ba:	7b 81       	ldd	r23, Y+3	; 0x03
     1bc:	8c 81       	ldd	r24, Y+4	; 0x04
     1be:	9d 81       	ldd	r25, Y+5	; 0x05
     1c0:	0e 94 97 07 	call	0xf2e	; 0xf2e <__divsf3>
     1c4:	dc 01       	movw	r26, r24
     1c6:	cb 01       	movw	r24, r22
     1c8:	8f 87       	std	Y+15, r24	; 0x0f
     1ca:	98 8b       	std	Y+16, r25	; 0x10
     1cc:	a9 8b       	std	Y+17, r26	; 0x11
     1ce:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     1d0:	20 e0       	ldi	r18, 0x00	; 0
     1d2:	30 e0       	ldi	r19, 0x00	; 0
     1d4:	4a ef       	ldi	r20, 0xFA	; 250
     1d6:	54 e4       	ldi	r21, 0x44	; 68
     1d8:	6f 85       	ldd	r22, Y+15	; 0x0f
     1da:	78 89       	ldd	r23, Y+16	; 0x10
     1dc:	89 89       	ldd	r24, Y+17	; 0x11
     1de:	9a 89       	ldd	r25, Y+18	; 0x12
     1e0:	0e 94 b2 08 	call	0x1164	; 0x1164 <__mulsf3>
     1e4:	dc 01       	movw	r26, r24
     1e6:	cb 01       	movw	r24, r22
     1e8:	8b 8b       	std	Y+19, r24	; 0x13
     1ea:	9c 8b       	std	Y+20, r25	; 0x14
     1ec:	ad 8b       	std	Y+21, r26	; 0x15
     1ee:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     1f0:	20 e0       	ldi	r18, 0x00	; 0
     1f2:	30 e0       	ldi	r19, 0x00	; 0
     1f4:	40 e8       	ldi	r20, 0x80	; 128
     1f6:	5f e3       	ldi	r21, 0x3F	; 63
     1f8:	6b 89       	ldd	r22, Y+19	; 0x13
     1fa:	7c 89       	ldd	r23, Y+20	; 0x14
     1fc:	8d 89       	ldd	r24, Y+21	; 0x15
     1fe:	9e 89       	ldd	r25, Y+22	; 0x16
     200:	0e 94 92 07 	call	0xf24	; 0xf24 <__cmpsf2>
     204:	88 23       	and	r24, r24
     206:	2c f4       	brge	.+10     	; 0x212 <hd44780_outnibble+0x16c>
		__ticks = 1;
     208:	81 e0       	ldi	r24, 0x01	; 1
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	98 8f       	std	Y+24, r25	; 0x18
     20e:	8f 8b       	std	Y+23, r24	; 0x17
     210:	3f c0       	rjmp	.+126    	; 0x290 <hd44780_outnibble+0x1ea>
	else if (__tmp > 65535)
     212:	20 e0       	ldi	r18, 0x00	; 0
     214:	3f ef       	ldi	r19, 0xFF	; 255
     216:	4f e7       	ldi	r20, 0x7F	; 127
     218:	57 e4       	ldi	r21, 0x47	; 71
     21a:	6b 89       	ldd	r22, Y+19	; 0x13
     21c:	7c 89       	ldd	r23, Y+20	; 0x14
     21e:	8d 89       	ldd	r24, Y+21	; 0x15
     220:	9e 89       	ldd	r25, Y+22	; 0x16
     222:	0e 94 ad 08 	call	0x115a	; 0x115a <__gesf2>
     226:	18 16       	cp	r1, r24
     228:	4c f5       	brge	.+82     	; 0x27c <hd44780_outnibble+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     22a:	20 e0       	ldi	r18, 0x00	; 0
     22c:	30 e0       	ldi	r19, 0x00	; 0
     22e:	40 e2       	ldi	r20, 0x20	; 32
     230:	51 e4       	ldi	r21, 0x41	; 65
     232:	6f 85       	ldd	r22, Y+15	; 0x0f
     234:	78 89       	ldd	r23, Y+16	; 0x10
     236:	89 89       	ldd	r24, Y+17	; 0x11
     238:	9a 89       	ldd	r25, Y+18	; 0x12
     23a:	0e 94 b2 08 	call	0x1164	; 0x1164 <__mulsf3>
     23e:	dc 01       	movw	r26, r24
     240:	cb 01       	movw	r24, r22
     242:	bc 01       	movw	r22, r24
     244:	cd 01       	movw	r24, r26
     246:	0e 94 09 08 	call	0x1012	; 0x1012 <__fixunssfsi>
     24a:	dc 01       	movw	r26, r24
     24c:	cb 01       	movw	r24, r22
     24e:	98 8f       	std	Y+24, r25	; 0x18
     250:	8f 8b       	std	Y+23, r24	; 0x17
     252:	0f c0       	rjmp	.+30     	; 0x272 <hd44780_outnibble+0x1cc>
     254:	88 ec       	ldi	r24, 0xC8	; 200
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	9a 8f       	std	Y+26, r25	; 0x1a
     25a:	89 8f       	std	Y+25, r24	; 0x19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     25c:	89 8d       	ldd	r24, Y+25	; 0x19
     25e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     260:	01 97       	sbiw	r24, 0x01	; 1
     262:	f1 f7       	brne	.-4      	; 0x260 <hd44780_outnibble+0x1ba>
     264:	9a 8f       	std	Y+26, r25	; 0x1a
     266:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     268:	8f 89       	ldd	r24, Y+23	; 0x17
     26a:	98 8d       	ldd	r25, Y+24	; 0x18
     26c:	01 97       	sbiw	r24, 0x01	; 1
     26e:	98 8f       	std	Y+24, r25	; 0x18
     270:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     272:	8f 89       	ldd	r24, Y+23	; 0x17
     274:	98 8d       	ldd	r25, Y+24	; 0x18
     276:	89 2b       	or	r24, r25
     278:	69 f7       	brne	.-38     	; 0x254 <hd44780_outnibble+0x1ae>
     27a:	3f c0       	rjmp	.+126    	; 0x2fa <hd44780_outnibble+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     27c:	6b 89       	ldd	r22, Y+19	; 0x13
     27e:	7c 89       	ldd	r23, Y+20	; 0x14
     280:	8d 89       	ldd	r24, Y+21	; 0x15
     282:	9e 89       	ldd	r25, Y+22	; 0x16
     284:	0e 94 09 08 	call	0x1012	; 0x1012 <__fixunssfsi>
     288:	dc 01       	movw	r26, r24
     28a:	cb 01       	movw	r24, r22
     28c:	98 8f       	std	Y+24, r25	; 0x18
     28e:	8f 8b       	std	Y+23, r24	; 0x17
     290:	8f 89       	ldd	r24, Y+23	; 0x17
     292:	98 8d       	ldd	r25, Y+24	; 0x18
     294:	9c 8f       	std	Y+28, r25	; 0x1c
     296:	8b 8f       	std	Y+27, r24	; 0x1b
     298:	8b 8d       	ldd	r24, Y+27	; 0x1b
     29a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     29c:	01 97       	sbiw	r24, 0x01	; 1
     29e:	f1 f7       	brne	.-4      	; 0x29c <hd44780_outnibble+0x1f6>
     2a0:	9c 8f       	std	Y+28, r25	; 0x1c
     2a2:	8b 8f       	std	Y+27, r24	; 0x1b
     2a4:	2a c0       	rjmp	.+84     	; 0x2fa <hd44780_outnibble+0x254>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     2a6:	20 e0       	ldi	r18, 0x00	; 0
     2a8:	30 e0       	ldi	r19, 0x00	; 0
     2aa:	4f e7       	ldi	r20, 0x7F	; 127
     2ac:	53 e4       	ldi	r21, 0x43	; 67
     2ae:	6e 81       	ldd	r22, Y+6	; 0x06
     2b0:	7f 81       	ldd	r23, Y+7	; 0x07
     2b2:	88 85       	ldd	r24, Y+8	; 0x08
     2b4:	99 85       	ldd	r25, Y+9	; 0x09
     2b6:	0e 94 ad 08 	call	0x115a	; 0x115a <__gesf2>
     2ba:	18 16       	cp	r1, r24
     2bc:	ac f4       	brge	.+42     	; 0x2e8 <hd44780_outnibble+0x242>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     2be:	6a 85       	ldd	r22, Y+10	; 0x0a
     2c0:	7b 85       	ldd	r23, Y+11	; 0x0b
     2c2:	8c 85       	ldd	r24, Y+12	; 0x0c
     2c4:	9d 85       	ldd	r25, Y+13	; 0x0d
     2c6:	0e 94 09 08 	call	0x1012	; 0x1012 <__fixunssfsi>
     2ca:	dc 01       	movw	r26, r24
     2cc:	cb 01       	movw	r24, r22
     2ce:	9e 8f       	std	Y+30, r25	; 0x1e
     2d0:	8d 8f       	std	Y+29, r24	; 0x1d
     2d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     2d4:	9e 8d       	ldd	r25, Y+30	; 0x1e
     2d6:	98 a3       	std	Y+32, r25	; 0x20
     2d8:	8f 8f       	std	Y+31, r24	; 0x1f
     2da:	8f 8d       	ldd	r24, Y+31	; 0x1f
     2dc:	98 a1       	ldd	r25, Y+32	; 0x20
     2de:	01 97       	sbiw	r24, 0x01	; 1
     2e0:	f1 f7       	brne	.-4      	; 0x2de <hd44780_outnibble+0x238>
     2e2:	98 a3       	std	Y+32, r25	; 0x20
     2e4:	8f 8f       	std	Y+31, r24	; 0x1f
     2e6:	0f c0       	rjmp	.+30     	; 0x306 <hd44780_outnibble+0x260>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     2e8:	6e 81       	ldd	r22, Y+6	; 0x06
     2ea:	7f 81       	ldd	r23, Y+7	; 0x07
     2ec:	88 85       	ldd	r24, Y+8	; 0x08
     2ee:	99 85       	ldd	r25, Y+9	; 0x09
     2f0:	0e 94 09 08 	call	0x1012	; 0x1012 <__fixunssfsi>
     2f4:	dc 01       	movw	r26, r24
     2f6:	cb 01       	movw	r24, r22
     2f8:	8e 87       	std	Y+14, r24	; 0x0e
     2fa:	8e 85       	ldd	r24, Y+14	; 0x0e
     2fc:	89 a3       	std	Y+33, r24	; 0x21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2fe:	89 a1       	ldd	r24, Y+33	; 0x21
     300:	8a 95       	dec	r24
     302:	f1 f7       	brne	.-4      	; 0x300 <hd44780_outnibble+0x25a>
     304:	89 a3       	std	Y+33, r24	; 0x21
  __asm__ volatile("nop");
  __asm__ volatile("nop");
#    endif /* F_CPU > 2000000UL */
#  endif /* F_CPU > 1000000UL */
#endif
  if (readback)
     306:	89 81       	ldd	r24, Y+1	; 0x01
     308:	88 23       	and	r24, r24
     30a:	39 f0       	breq	.+14     	; 0x31a <hd44780_outnibble+0x274>
    x = READ(PIN, HD44780_D4);
     30c:	86 e2       	ldi	r24, 0x26	; 38
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	fc 01       	movw	r30, r24
     312:	80 81       	ld	r24, Z
     314:	8f 70       	andi	r24, 0x0F	; 15
     316:	8a a3       	std	Y+34, r24	; 0x22
     318:	01 c0       	rjmp	.+2      	; 0x31c <hd44780_outnibble+0x276>
  else
    x = 0;
     31a:	1a a2       	std	Y+34, r1	; 0x22
  CLR(PORT, HD44780_E);
     31c:	85 e2       	ldi	r24, 0x25	; 37
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	25 e2       	ldi	r18, 0x25	; 37
     322:	30 e0       	ldi	r19, 0x00	; 0
     324:	f9 01       	movw	r30, r18
     326:	20 81       	ld	r18, Z
     328:	27 7f       	andi	r18, 0xF7	; 247
     32a:	fc 01       	movw	r30, r24
     32c:	20 83       	st	Z, r18
    SET(PORT, HD44780_RS);
  else
    CLR(PORT, HD44780_RS);
  ASSIGN(PORT, HD44780_D4, n);
  (void)hd44780_pulse_e(false);
}
     32e:	00 00       	nop
     330:	a4 96       	adiw	r28, 0x24	; 36
     332:	0f b6       	in	r0, 0x3f	; 63
     334:	f8 94       	cli
     336:	de bf       	out	0x3e, r29	; 62
     338:	0f be       	out	0x3f, r0	; 63
     33a:	cd bf       	out	0x3d, r28	; 61
     33c:	df 91       	pop	r29
     33e:	cf 91       	pop	r28
     340:	08 95       	ret

00000342 <hd44780_outbyte>:
 * Send one byte to the LCD controller.  As we are in 4-bit mode, we
 * have to send two nibbles.
 */
void
hd44780_outbyte(uint8_t b, uint8_t rs)
{
     342:	cf 93       	push	r28
     344:	df 93       	push	r29
     346:	00 d0       	rcall	.+0      	; 0x348 <hd44780_outbyte+0x6>
     348:	cd b7       	in	r28, 0x3d	; 61
     34a:	de b7       	in	r29, 0x3e	; 62
     34c:	89 83       	std	Y+1, r24	; 0x01
     34e:	6a 83       	std	Y+2, r22	; 0x02
  hd44780_outnibble(b >> 4, rs);
     350:	89 81       	ldd	r24, Y+1	; 0x01
     352:	82 95       	swap	r24
     354:	8f 70       	andi	r24, 0x0F	; 15
     356:	6a 81       	ldd	r22, Y+2	; 0x02
     358:	0e 94 53 00 	call	0xa6	; 0xa6 <hd44780_outnibble>
  hd44780_outnibble(b & 0xf, rs);
     35c:	89 81       	ldd	r24, Y+1	; 0x01
     35e:	8f 70       	andi	r24, 0x0F	; 15
     360:	6a 81       	ldd	r22, Y+2	; 0x02
     362:	0e 94 53 00 	call	0xa6	; 0xa6 <hd44780_outnibble>
}
     366:	00 00       	nop
     368:	0f 90       	pop	r0
     36a:	0f 90       	pop	r0
     36c:	df 91       	pop	r29
     36e:	cf 91       	pop	r28
     370:	08 95       	ret

00000372 <hd44780_innibble>:
/*
 * Read one nibble from the LCD controller.
 */
static uint8_t
hd44780_innibble(uint8_t rs)
{
     372:	cf 93       	push	r28
     374:	df 93       	push	r29
     376:	cd b7       	in	r28, 0x3d	; 61
     378:	de b7       	in	r29, 0x3e	; 62
     37a:	a4 97       	sbiw	r28, 0x24	; 36
     37c:	0f b6       	in	r0, 0x3f	; 63
     37e:	f8 94       	cli
     380:	de bf       	out	0x3e, r29	; 62
     382:	0f be       	out	0x3f, r0	; 63
     384:	cd bf       	out	0x3d, r28	; 61
     386:	8c a3       	std	Y+36, r24	; 0x24
  uint8_t x;

  SET(PORT, HD44780_RW);
     388:	85 e2       	ldi	r24, 0x25	; 37
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	25 e2       	ldi	r18, 0x25	; 37
     38e:	30 e0       	ldi	r19, 0x00	; 0
     390:	f9 01       	movw	r30, r18
     392:	20 81       	ld	r18, Z
     394:	20 61       	ori	r18, 0x10	; 16
     396:	fc 01       	movw	r30, r24
     398:	20 83       	st	Z, r18
  ASSIGN(DDR, HD44780_D4, 0x00);
     39a:	87 e2       	ldi	r24, 0x27	; 39
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	27 e2       	ldi	r18, 0x27	; 39
     3a0:	30 e0       	ldi	r19, 0x00	; 0
     3a2:	f9 01       	movw	r30, r18
     3a4:	20 81       	ld	r18, Z
     3a6:	20 7f       	andi	r18, 0xF0	; 240
     3a8:	fc 01       	movw	r30, r24
     3aa:	20 83       	st	Z, r18
  if (rs)
     3ac:	8c a1       	ldd	r24, Y+36	; 0x24
     3ae:	88 23       	and	r24, r24
     3b0:	51 f0       	breq	.+20     	; 0x3c6 <hd44780_innibble+0x54>
    SET(PORT, HD44780_RS);
     3b2:	85 e2       	ldi	r24, 0x25	; 37
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	25 e2       	ldi	r18, 0x25	; 37
     3b8:	30 e0       	ldi	r19, 0x00	; 0
     3ba:	f9 01       	movw	r30, r18
     3bc:	20 81       	ld	r18, Z
     3be:	20 62       	ori	r18, 0x20	; 32
     3c0:	fc 01       	movw	r30, r24
     3c2:	20 83       	st	Z, r18
     3c4:	09 c0       	rjmp	.+18     	; 0x3d8 <hd44780_innibble+0x66>
  else
    CLR(PORT, HD44780_RS);
     3c6:	85 e2       	ldi	r24, 0x25	; 37
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	25 e2       	ldi	r18, 0x25	; 37
     3cc:	30 e0       	ldi	r19, 0x00	; 0
     3ce:	f9 01       	movw	r30, r18
     3d0:	20 81       	ld	r18, Z
     3d2:	2f 7d       	andi	r18, 0xDF	; 223
     3d4:	fc 01       	movw	r30, r24
     3d6:	20 83       	st	Z, r18
     3d8:	81 e0       	ldi	r24, 0x01	; 1
     3da:	8a 83       	std	Y+2, r24	; 0x02
static inline uint8_t
hd44780_pulse_e(bool readback)
{
  uint8_t x;

  SET(PORT, HD44780_E);
     3dc:	85 e2       	ldi	r24, 0x25	; 37
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	25 e2       	ldi	r18, 0x25	; 37
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	f9 01       	movw	r30, r18
     3e6:	20 81       	ld	r18, Z
     3e8:	28 60       	ori	r18, 0x08	; 8
     3ea:	fc 01       	movw	r30, r24
     3ec:	20 83       	st	Z, r18
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	a0 e0       	ldi	r26, 0x00	; 0
     3f4:	bf e3       	ldi	r27, 0x3F	; 63
     3f6:	8b 83       	std	Y+3, r24	; 0x03
     3f8:	9c 83       	std	Y+4, r25	; 0x04
     3fa:	ad 83       	std	Y+5, r26	; 0x05
     3fc:	be 83       	std	Y+6, r27	; 0x06
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     3fe:	2b ea       	ldi	r18, 0xAB	; 171
     400:	3a ea       	ldi	r19, 0xAA	; 170
     402:	4a e2       	ldi	r20, 0x2A	; 42
     404:	50 e4       	ldi	r21, 0x40	; 64
     406:	6b 81       	ldd	r22, Y+3	; 0x03
     408:	7c 81       	ldd	r23, Y+4	; 0x04
     40a:	8d 81       	ldd	r24, Y+5	; 0x05
     40c:	9e 81       	ldd	r25, Y+6	; 0x06
     40e:	0e 94 b2 08 	call	0x1164	; 0x1164 <__mulsf3>
     412:	dc 01       	movw	r26, r24
     414:	cb 01       	movw	r24, r22
     416:	8f 83       	std	Y+7, r24	; 0x07
     418:	98 87       	std	Y+8, r25	; 0x08
     41a:	a9 87       	std	Y+9, r26	; 0x09
     41c:	ba 87       	std	Y+10, r27	; 0x0a
	__tmp2 = ((F_CPU) / 4e6) * __us;
     41e:	8b 81       	ldd	r24, Y+3	; 0x03
     420:	9c 81       	ldd	r25, Y+4	; 0x04
     422:	ad 81       	ldd	r26, Y+5	; 0x05
     424:	be 81       	ldd	r27, Y+6	; 0x06
     426:	9c 01       	movw	r18, r24
     428:	ad 01       	movw	r20, r26
     42a:	bc 01       	movw	r22, r24
     42c:	cd 01       	movw	r24, r26
     42e:	0e 94 26 07 	call	0xe4c	; 0xe4c <__addsf3>
     432:	dc 01       	movw	r26, r24
     434:	cb 01       	movw	r24, r22
     436:	8b 87       	std	Y+11, r24	; 0x0b
     438:	9c 87       	std	Y+12, r25	; 0x0c
     43a:	ad 87       	std	Y+13, r26	; 0x0d
     43c:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
     43e:	20 e0       	ldi	r18, 0x00	; 0
     440:	30 e0       	ldi	r19, 0x00	; 0
     442:	40 e8       	ldi	r20, 0x80	; 128
     444:	5f e3       	ldi	r21, 0x3F	; 63
     446:	6f 81       	ldd	r22, Y+7	; 0x07
     448:	78 85       	ldd	r23, Y+8	; 0x08
     44a:	89 85       	ldd	r24, Y+9	; 0x09
     44c:	9a 85       	ldd	r25, Y+10	; 0x0a
     44e:	0e 94 92 07 	call	0xf24	; 0xf24 <__cmpsf2>
     452:	88 23       	and	r24, r24
     454:	1c f4       	brge	.+6      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
		__ticks = 1;
     456:	81 e0       	ldi	r24, 0x01	; 1
     458:	8f 87       	std	Y+15, r24	; 0x0f
     45a:	b2 c0       	rjmp	.+356    	; 0x5c0 <__EEPROM_REGION_LENGTH__+0x1c0>
	else if (__tmp2 > 65535)
     45c:	20 e0       	ldi	r18, 0x00	; 0
     45e:	3f ef       	ldi	r19, 0xFF	; 255
     460:	4f e7       	ldi	r20, 0x7F	; 127
     462:	57 e4       	ldi	r21, 0x47	; 71
     464:	6b 85       	ldd	r22, Y+11	; 0x0b
     466:	7c 85       	ldd	r23, Y+12	; 0x0c
     468:	8d 85       	ldd	r24, Y+13	; 0x0d
     46a:	9e 85       	ldd	r25, Y+14	; 0x0e
     46c:	0e 94 ad 08 	call	0x115a	; 0x115a <__gesf2>
     470:	18 16       	cp	r1, r24
     472:	0c f0       	brlt	.+2      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
     474:	7b c0       	rjmp	.+246    	; 0x56c <__EEPROM_REGION_LENGTH__+0x16c>
	{
		_delay_ms(__us / 1000.0);
     476:	20 e0       	ldi	r18, 0x00	; 0
     478:	30 e0       	ldi	r19, 0x00	; 0
     47a:	4a e7       	ldi	r20, 0x7A	; 122
     47c:	54 e4       	ldi	r21, 0x44	; 68
     47e:	6b 81       	ldd	r22, Y+3	; 0x03
     480:	7c 81       	ldd	r23, Y+4	; 0x04
     482:	8d 81       	ldd	r24, Y+5	; 0x05
     484:	9e 81       	ldd	r25, Y+6	; 0x06
     486:	0e 94 97 07 	call	0xf2e	; 0xf2e <__divsf3>
     48a:	dc 01       	movw	r26, r24
     48c:	cb 01       	movw	r24, r22
     48e:	88 8b       	std	Y+16, r24	; 0x10
     490:	99 8b       	std	Y+17, r25	; 0x11
     492:	aa 8b       	std	Y+18, r26	; 0x12
     494:	bb 8b       	std	Y+19, r27	; 0x13

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     496:	20 e0       	ldi	r18, 0x00	; 0
     498:	30 e0       	ldi	r19, 0x00	; 0
     49a:	4a ef       	ldi	r20, 0xFA	; 250
     49c:	54 e4       	ldi	r21, 0x44	; 68
     49e:	68 89       	ldd	r22, Y+16	; 0x10
     4a0:	79 89       	ldd	r23, Y+17	; 0x11
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	9b 89       	ldd	r25, Y+19	; 0x13
     4a6:	0e 94 b2 08 	call	0x1164	; 0x1164 <__mulsf3>
     4aa:	dc 01       	movw	r26, r24
     4ac:	cb 01       	movw	r24, r22
     4ae:	8c 8b       	std	Y+20, r24	; 0x14
     4b0:	9d 8b       	std	Y+21, r25	; 0x15
     4b2:	ae 8b       	std	Y+22, r26	; 0x16
     4b4:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
     4b6:	20 e0       	ldi	r18, 0x00	; 0
     4b8:	30 e0       	ldi	r19, 0x00	; 0
     4ba:	40 e8       	ldi	r20, 0x80	; 128
     4bc:	5f e3       	ldi	r21, 0x3F	; 63
     4be:	6c 89       	ldd	r22, Y+20	; 0x14
     4c0:	7d 89       	ldd	r23, Y+21	; 0x15
     4c2:	8e 89       	ldd	r24, Y+22	; 0x16
     4c4:	9f 89       	ldd	r25, Y+23	; 0x17
     4c6:	0e 94 92 07 	call	0xf24	; 0xf24 <__cmpsf2>
     4ca:	88 23       	and	r24, r24
     4cc:	2c f4       	brge	.+10     	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
		__ticks = 1;
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	99 8f       	std	Y+25, r25	; 0x19
     4d4:	88 8f       	std	Y+24, r24	; 0x18
     4d6:	3f c0       	rjmp	.+126    	; 0x556 <__EEPROM_REGION_LENGTH__+0x156>
	else if (__tmp > 65535)
     4d8:	20 e0       	ldi	r18, 0x00	; 0
     4da:	3f ef       	ldi	r19, 0xFF	; 255
     4dc:	4f e7       	ldi	r20, 0x7F	; 127
     4de:	57 e4       	ldi	r21, 0x47	; 71
     4e0:	6c 89       	ldd	r22, Y+20	; 0x14
     4e2:	7d 89       	ldd	r23, Y+21	; 0x15
     4e4:	8e 89       	ldd	r24, Y+22	; 0x16
     4e6:	9f 89       	ldd	r25, Y+23	; 0x17
     4e8:	0e 94 ad 08 	call	0x115a	; 0x115a <__gesf2>
     4ec:	18 16       	cp	r1, r24
     4ee:	4c f5       	brge	.+82     	; 0x542 <__EEPROM_REGION_LENGTH__+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4f0:	20 e0       	ldi	r18, 0x00	; 0
     4f2:	30 e0       	ldi	r19, 0x00	; 0
     4f4:	40 e2       	ldi	r20, 0x20	; 32
     4f6:	51 e4       	ldi	r21, 0x41	; 65
     4f8:	68 89       	ldd	r22, Y+16	; 0x10
     4fa:	79 89       	ldd	r23, Y+17	; 0x11
     4fc:	8a 89       	ldd	r24, Y+18	; 0x12
     4fe:	9b 89       	ldd	r25, Y+19	; 0x13
     500:	0e 94 b2 08 	call	0x1164	; 0x1164 <__mulsf3>
     504:	dc 01       	movw	r26, r24
     506:	cb 01       	movw	r24, r22
     508:	bc 01       	movw	r22, r24
     50a:	cd 01       	movw	r24, r26
     50c:	0e 94 09 08 	call	0x1012	; 0x1012 <__fixunssfsi>
     510:	dc 01       	movw	r26, r24
     512:	cb 01       	movw	r24, r22
     514:	99 8f       	std	Y+25, r25	; 0x19
     516:	88 8f       	std	Y+24, r24	; 0x18
     518:	0f c0       	rjmp	.+30     	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
     51a:	88 ec       	ldi	r24, 0xC8	; 200
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	9b 8f       	std	Y+27, r25	; 0x1b
     520:	8a 8f       	std	Y+26, r24	; 0x1a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     522:	8a 8d       	ldd	r24, Y+26	; 0x1a
     524:	9b 8d       	ldd	r25, Y+27	; 0x1b
     526:	01 97       	sbiw	r24, 0x01	; 1
     528:	f1 f7       	brne	.-4      	; 0x526 <__EEPROM_REGION_LENGTH__+0x126>
     52a:	9b 8f       	std	Y+27, r25	; 0x1b
     52c:	8a 8f       	std	Y+26, r24	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     52e:	88 8d       	ldd	r24, Y+24	; 0x18
     530:	99 8d       	ldd	r25, Y+25	; 0x19
     532:	01 97       	sbiw	r24, 0x01	; 1
     534:	99 8f       	std	Y+25, r25	; 0x19
     536:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     538:	88 8d       	ldd	r24, Y+24	; 0x18
     53a:	99 8d       	ldd	r25, Y+25	; 0x19
     53c:	89 2b       	or	r24, r25
     53e:	69 f7       	brne	.-38     	; 0x51a <__EEPROM_REGION_LENGTH__+0x11a>
     540:	3f c0       	rjmp	.+126    	; 0x5c0 <__EEPROM_REGION_LENGTH__+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     542:	6c 89       	ldd	r22, Y+20	; 0x14
     544:	7d 89       	ldd	r23, Y+21	; 0x15
     546:	8e 89       	ldd	r24, Y+22	; 0x16
     548:	9f 89       	ldd	r25, Y+23	; 0x17
     54a:	0e 94 09 08 	call	0x1012	; 0x1012 <__fixunssfsi>
     54e:	dc 01       	movw	r26, r24
     550:	cb 01       	movw	r24, r22
     552:	99 8f       	std	Y+25, r25	; 0x19
     554:	88 8f       	std	Y+24, r24	; 0x18
     556:	88 8d       	ldd	r24, Y+24	; 0x18
     558:	99 8d       	ldd	r25, Y+25	; 0x19
     55a:	9d 8f       	std	Y+29, r25	; 0x1d
     55c:	8c 8f       	std	Y+28, r24	; 0x1c
     55e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     560:	9d 8d       	ldd	r25, Y+29	; 0x1d
     562:	01 97       	sbiw	r24, 0x01	; 1
     564:	f1 f7       	brne	.-4      	; 0x562 <__EEPROM_REGION_LENGTH__+0x162>
     566:	9d 8f       	std	Y+29, r25	; 0x1d
     568:	8c 8f       	std	Y+28, r24	; 0x1c
     56a:	2a c0       	rjmp	.+84     	; 0x5c0 <__EEPROM_REGION_LENGTH__+0x1c0>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     56c:	20 e0       	ldi	r18, 0x00	; 0
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	4f e7       	ldi	r20, 0x7F	; 127
     572:	53 e4       	ldi	r21, 0x43	; 67
     574:	6f 81       	ldd	r22, Y+7	; 0x07
     576:	78 85       	ldd	r23, Y+8	; 0x08
     578:	89 85       	ldd	r24, Y+9	; 0x09
     57a:	9a 85       	ldd	r25, Y+10	; 0x0a
     57c:	0e 94 ad 08 	call	0x115a	; 0x115a <__gesf2>
     580:	18 16       	cp	r1, r24
     582:	ac f4       	brge	.+42     	; 0x5ae <__EEPROM_REGION_LENGTH__+0x1ae>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     584:	6b 85       	ldd	r22, Y+11	; 0x0b
     586:	7c 85       	ldd	r23, Y+12	; 0x0c
     588:	8d 85       	ldd	r24, Y+13	; 0x0d
     58a:	9e 85       	ldd	r25, Y+14	; 0x0e
     58c:	0e 94 09 08 	call	0x1012	; 0x1012 <__fixunssfsi>
     590:	dc 01       	movw	r26, r24
     592:	cb 01       	movw	r24, r22
     594:	9f 8f       	std	Y+31, r25	; 0x1f
     596:	8e 8f       	std	Y+30, r24	; 0x1e
     598:	8e 8d       	ldd	r24, Y+30	; 0x1e
     59a:	9f 8d       	ldd	r25, Y+31	; 0x1f
     59c:	99 a3       	std	Y+33, r25	; 0x21
     59e:	88 a3       	std	Y+32, r24	; 0x20
     5a0:	88 a1       	ldd	r24, Y+32	; 0x20
     5a2:	99 a1       	ldd	r25, Y+33	; 0x21
     5a4:	01 97       	sbiw	r24, 0x01	; 1
     5a6:	f1 f7       	brne	.-4      	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
     5a8:	99 a3       	std	Y+33, r25	; 0x21
     5aa:	88 a3       	std	Y+32, r24	; 0x20
     5ac:	0f c0       	rjmp	.+30     	; 0x5cc <__EEPROM_REGION_LENGTH__+0x1cc>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     5ae:	6f 81       	ldd	r22, Y+7	; 0x07
     5b0:	78 85       	ldd	r23, Y+8	; 0x08
     5b2:	89 85       	ldd	r24, Y+9	; 0x09
     5b4:	9a 85       	ldd	r25, Y+10	; 0x0a
     5b6:	0e 94 09 08 	call	0x1012	; 0x1012 <__fixunssfsi>
     5ba:	dc 01       	movw	r26, r24
     5bc:	cb 01       	movw	r24, r22
     5be:	8f 87       	std	Y+15, r24	; 0x0f
     5c0:	8f 85       	ldd	r24, Y+15	; 0x0f
     5c2:	8a a3       	std	Y+34, r24	; 0x22
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     5c4:	8a a1       	ldd	r24, Y+34	; 0x22
     5c6:	8a 95       	dec	r24
     5c8:	f1 f7       	brne	.-4      	; 0x5c6 <__EEPROM_REGION_LENGTH__+0x1c6>
     5ca:	8a a3       	std	Y+34, r24	; 0x22
  __asm__ volatile("nop");
  __asm__ volatile("nop");
#    endif /* F_CPU > 2000000UL */
#  endif /* F_CPU > 1000000UL */
#endif
  if (readback)
     5cc:	8a 81       	ldd	r24, Y+2	; 0x02
     5ce:	88 23       	and	r24, r24
     5d0:	39 f0       	breq	.+14     	; 0x5e0 <__EEPROM_REGION_LENGTH__+0x1e0>
    x = READ(PIN, HD44780_D4);
     5d2:	86 e2       	ldi	r24, 0x26	; 38
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	fc 01       	movw	r30, r24
     5d8:	80 81       	ld	r24, Z
     5da:	8f 70       	andi	r24, 0x0F	; 15
     5dc:	8b a3       	std	Y+35, r24	; 0x23
     5de:	01 c0       	rjmp	.+2      	; 0x5e2 <__EEPROM_REGION_LENGTH__+0x1e2>
  else
    x = 0;
     5e0:	1b a2       	std	Y+35, r1	; 0x23
  CLR(PORT, HD44780_E);
     5e2:	85 e2       	ldi	r24, 0x25	; 37
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	25 e2       	ldi	r18, 0x25	; 37
     5e8:	30 e0       	ldi	r19, 0x00	; 0
     5ea:	f9 01       	movw	r30, r18
     5ec:	20 81       	ld	r18, Z
     5ee:	27 7f       	andi	r18, 0xF7	; 247
     5f0:	fc 01       	movw	r30, r24
     5f2:	20 83       	st	Z, r18

  return x;
     5f4:	8b a1       	ldd	r24, Y+35	; 0x23
  ASSIGN(DDR, HD44780_D4, 0x00);
  if (rs)
    SET(PORT, HD44780_RS);
  else
    CLR(PORT, HD44780_RS);
  x = hd44780_pulse_e(true);
     5f6:	89 83       	std	Y+1, r24	; 0x01
  ASSIGN(DDR, HD44780_D4, 0x0F);
     5f8:	87 e2       	ldi	r24, 0x27	; 39
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	27 e2       	ldi	r18, 0x27	; 39
     5fe:	30 e0       	ldi	r19, 0x00	; 0
     600:	f9 01       	movw	r30, r18
     602:	20 81       	ld	r18, Z
     604:	2f 60       	ori	r18, 0x0F	; 15
     606:	fc 01       	movw	r30, r24
     608:	20 83       	st	Z, r18
  CLR(PORT, HD44780_RW);
     60a:	85 e2       	ldi	r24, 0x25	; 37
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	25 e2       	ldi	r18, 0x25	; 37
     610:	30 e0       	ldi	r19, 0x00	; 0
     612:	f9 01       	movw	r30, r18
     614:	20 81       	ld	r18, Z
     616:	2f 7e       	andi	r18, 0xEF	; 239
     618:	fc 01       	movw	r30, r24
     61a:	20 83       	st	Z, r18

  return x;
     61c:	89 81       	ldd	r24, Y+1	; 0x01
}
     61e:	a4 96       	adiw	r28, 0x24	; 36
     620:	0f b6       	in	r0, 0x3f	; 63
     622:	f8 94       	cli
     624:	de bf       	out	0x3e, r29	; 62
     626:	0f be       	out	0x3f, r0	; 63
     628:	cd bf       	out	0x3d, r28	; 61
     62a:	df 91       	pop	r29
     62c:	cf 91       	pop	r28
     62e:	08 95       	ret

00000630 <hd44780_inbyte>:
/*
 * Read one byte (i.e. two nibbles) from the LCD controller.
 */
uint8_t
hd44780_inbyte(uint8_t rs)
{
     630:	cf 93       	push	r28
     632:	df 93       	push	r29
     634:	00 d0       	rcall	.+0      	; 0x636 <hd44780_inbyte+0x6>
     636:	cd b7       	in	r28, 0x3d	; 61
     638:	de b7       	in	r29, 0x3e	; 62
     63a:	8a 83       	std	Y+2, r24	; 0x02
  uint8_t x;

  x = hd44780_innibble(rs) << 4;
     63c:	8a 81       	ldd	r24, Y+2	; 0x02
     63e:	0e 94 b9 01 	call	0x372	; 0x372 <hd44780_innibble>
     642:	82 95       	swap	r24
     644:	80 7f       	andi	r24, 0xF0	; 240
     646:	89 83       	std	Y+1, r24	; 0x01
  x |= hd44780_innibble(rs);
     648:	8a 81       	ldd	r24, Y+2	; 0x02
     64a:	0e 94 b9 01 	call	0x372	; 0x372 <hd44780_innibble>
     64e:	98 2f       	mov	r25, r24
     650:	89 81       	ldd	r24, Y+1	; 0x01
     652:	89 2b       	or	r24, r25
     654:	89 83       	std	Y+1, r24	; 0x01

  return x;
     656:	89 81       	ldd	r24, Y+1	; 0x01
}
     658:	0f 90       	pop	r0
     65a:	0f 90       	pop	r0
     65c:	df 91       	pop	r29
     65e:	cf 91       	pop	r28
     660:	08 95       	ret

00000662 <hd44780_wait_ready>:
/*
 * Wait until the busy flag is cleared.
 */
void
hd44780_wait_ready(bool longwait)
{
     662:	cf 93       	push	r28
     664:	df 93       	push	r29
     666:	1f 92       	push	r1
     668:	cd b7       	in	r28, 0x3d	; 61
     66a:	de b7       	in	r29, 0x3e	; 62
     66c:	89 83       	std	Y+1, r24	; 0x01
#if USE_BUSY_BIT
  while (hd44780_incmd() & HD44780_BUSYFLAG) ;
     66e:	00 00       	nop
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	0e 94 18 03 	call	0x630	; 0x630 <hd44780_inbyte>
     676:	88 23       	and	r24, r24
     678:	dc f3       	brlt	.-10     	; 0x670 <hd44780_wait_ready+0xe>
  if (longwait)
    _delay_ms(1.52);
  else
    _delay_us(37);
#endif
}
     67a:	00 00       	nop
     67c:	0f 90       	pop	r0
     67e:	df 91       	pop	r29
     680:	cf 91       	pop	r28
     682:	08 95       	ret

00000684 <hd44780_init>:
 * This is the only area where timed waits are really needed as
 * the busy flag cannot be probed initially.
 */
void
hd44780_init(void)
{
     684:	0f 93       	push	r16
     686:	1f 93       	push	r17
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
     68c:	cd b7       	in	r28, 0x3d	; 61
     68e:	de b7       	in	r29, 0x3e	; 62
     690:	ca 54       	subi	r28, 0x4A	; 74
     692:	d1 09       	sbc	r29, r1
     694:	0f b6       	in	r0, 0x3f	; 63
     696:	f8 94       	cli
     698:	de bf       	out	0x3e, r29	; 62
     69a:	0f be       	out	0x3f, r0	; 63
     69c:	cd bf       	out	0x3d, r28	; 61
  SET(DDR, HD44780_RS);
     69e:	84 e2       	ldi	r24, 0x24	; 36
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	24 e2       	ldi	r18, 0x24	; 36
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	f9 01       	movw	r30, r18
     6a8:	20 81       	ld	r18, Z
     6aa:	20 62       	ori	r18, 0x20	; 32
     6ac:	fc 01       	movw	r30, r24
     6ae:	20 83       	st	Z, r18
  SET(DDR, HD44780_RW);
     6b0:	84 e2       	ldi	r24, 0x24	; 36
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	24 e2       	ldi	r18, 0x24	; 36
     6b6:	30 e0       	ldi	r19, 0x00	; 0
     6b8:	f9 01       	movw	r30, r18
     6ba:	20 81       	ld	r18, Z
     6bc:	20 61       	ori	r18, 0x10	; 16
     6be:	fc 01       	movw	r30, r24
     6c0:	20 83       	st	Z, r18
  SET(DDR, HD44780_E);
     6c2:	84 e2       	ldi	r24, 0x24	; 36
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	24 e2       	ldi	r18, 0x24	; 36
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	f9 01       	movw	r30, r18
     6cc:	20 81       	ld	r18, Z
     6ce:	28 60       	ori	r18, 0x08	; 8
     6d0:	fc 01       	movw	r30, r24
     6d2:	20 83       	st	Z, r18
  ASSIGN(DDR, HD44780_D4, 0x0F);
     6d4:	87 e2       	ldi	r24, 0x27	; 39
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	27 e2       	ldi	r18, 0x27	; 39
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	f9 01       	movw	r30, r18
     6de:	20 81       	ld	r18, Z
     6e0:	2f 60       	ori	r18, 0x0F	; 15
     6e2:	fc 01       	movw	r30, r24
     6e4:	20 83       	st	Z, r18
     6e6:	80 e0       	ldi	r24, 0x00	; 0
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	a0 e7       	ldi	r26, 0x70	; 112
     6ec:	b1 e4       	ldi	r27, 0x41	; 65
     6ee:	89 83       	std	Y+1, r24	; 0x01
     6f0:	9a 83       	std	Y+2, r25	; 0x02
     6f2:	ab 83       	std	Y+3, r26	; 0x03
     6f4:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     6f6:	8e 01       	movw	r16, r28
     6f8:	0f 5b       	subi	r16, 0xBF	; 191
     6fa:	1f 4f       	sbci	r17, 0xFF	; 255
     6fc:	20 e0       	ldi	r18, 0x00	; 0
     6fe:	30 e0       	ldi	r19, 0x00	; 0
     700:	4a ef       	ldi	r20, 0xFA	; 250
     702:	54 e4       	ldi	r21, 0x44	; 68
     704:	69 81       	ldd	r22, Y+1	; 0x01
     706:	7a 81       	ldd	r23, Y+2	; 0x02
     708:	8b 81       	ldd	r24, Y+3	; 0x03
     70a:	9c 81       	ldd	r25, Y+4	; 0x04
     70c:	0e 94 b2 08 	call	0x1164	; 0x1164 <__mulsf3>
     710:	dc 01       	movw	r26, r24
     712:	cb 01       	movw	r24, r22
     714:	f8 01       	movw	r30, r16
     716:	80 83       	st	Z, r24
     718:	91 83       	std	Z+1, r25	; 0x01
     71a:	a2 83       	std	Z+2, r26	; 0x02
     71c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     71e:	ce 01       	movw	r24, r28
     720:	8f 5b       	subi	r24, 0xBF	; 191
     722:	9f 4f       	sbci	r25, 0xFF	; 255
     724:	20 e0       	ldi	r18, 0x00	; 0
     726:	30 e0       	ldi	r19, 0x00	; 0
     728:	40 e8       	ldi	r20, 0x80	; 128
     72a:	5f e3       	ldi	r21, 0x3F	; 63
     72c:	fc 01       	movw	r30, r24
     72e:	60 81       	ld	r22, Z
     730:	71 81       	ldd	r23, Z+1	; 0x01
     732:	82 81       	ldd	r24, Z+2	; 0x02
     734:	93 81       	ldd	r25, Z+3	; 0x03
     736:	0e 94 92 07 	call	0xf24	; 0xf24 <__cmpsf2>
     73a:	88 23       	and	r24, r24
     73c:	4c f4       	brge	.+18     	; 0x750 <hd44780_init+0xcc>
		__ticks = 1;
     73e:	ce 01       	movw	r24, r28
     740:	8b 5b       	subi	r24, 0xBB	; 187
     742:	9f 4f       	sbci	r25, 0xFF	; 255
     744:	21 e0       	ldi	r18, 0x01	; 1
     746:	30 e0       	ldi	r19, 0x00	; 0
     748:	fc 01       	movw	r30, r24
     74a:	31 83       	std	Z+1, r19	; 0x01
     74c:	20 83       	st	Z, r18
     74e:	69 c0       	rjmp	.+210    	; 0x822 <__DATA_REGION_LENGTH__+0x22>
	else if (__tmp > 65535)
     750:	ce 01       	movw	r24, r28
     752:	8f 5b       	subi	r24, 0xBF	; 191
     754:	9f 4f       	sbci	r25, 0xFF	; 255
     756:	20 e0       	ldi	r18, 0x00	; 0
     758:	3f ef       	ldi	r19, 0xFF	; 255
     75a:	4f e7       	ldi	r20, 0x7F	; 127
     75c:	57 e4       	ldi	r21, 0x47	; 71
     75e:	fc 01       	movw	r30, r24
     760:	60 81       	ld	r22, Z
     762:	71 81       	ldd	r23, Z+1	; 0x01
     764:	82 81       	ldd	r24, Z+2	; 0x02
     766:	93 81       	ldd	r25, Z+3	; 0x03
     768:	0e 94 ad 08 	call	0x115a	; 0x115a <__gesf2>
     76c:	18 16       	cp	r1, r24
     76e:	0c f0       	brlt	.+2      	; 0x772 <hd44780_init+0xee>
     770:	46 c0       	rjmp	.+140    	; 0x7fe <hd44780_init+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     772:	20 e0       	ldi	r18, 0x00	; 0
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	40 e2       	ldi	r20, 0x20	; 32
     778:	51 e4       	ldi	r21, 0x41	; 65
     77a:	69 81       	ldd	r22, Y+1	; 0x01
     77c:	7a 81       	ldd	r23, Y+2	; 0x02
     77e:	8b 81       	ldd	r24, Y+3	; 0x03
     780:	9c 81       	ldd	r25, Y+4	; 0x04
     782:	0e 94 b2 08 	call	0x1164	; 0x1164 <__mulsf3>
     786:	dc 01       	movw	r26, r24
     788:	cb 01       	movw	r24, r22
     78a:	8e 01       	movw	r16, r28
     78c:	0b 5b       	subi	r16, 0xBB	; 187
     78e:	1f 4f       	sbci	r17, 0xFF	; 255
     790:	bc 01       	movw	r22, r24
     792:	cd 01       	movw	r24, r26
     794:	0e 94 09 08 	call	0x1012	; 0x1012 <__fixunssfsi>
     798:	dc 01       	movw	r26, r24
     79a:	cb 01       	movw	r24, r22
     79c:	f8 01       	movw	r30, r16
     79e:	91 83       	std	Z+1, r25	; 0x01
     7a0:	80 83       	st	Z, r24
     7a2:	24 c0       	rjmp	.+72     	; 0x7ec <hd44780_init+0x168>
     7a4:	ce 01       	movw	r24, r28
     7a6:	89 5b       	subi	r24, 0xB9	; 185
     7a8:	9f 4f       	sbci	r25, 0xFF	; 255
     7aa:	28 ec       	ldi	r18, 0xC8	; 200
     7ac:	30 e0       	ldi	r19, 0x00	; 0
     7ae:	fc 01       	movw	r30, r24
     7b0:	31 83       	std	Z+1, r19	; 0x01
     7b2:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     7b4:	ce 01       	movw	r24, r28
     7b6:	89 5b       	subi	r24, 0xB9	; 185
     7b8:	9f 4f       	sbci	r25, 0xFF	; 255
     7ba:	fc 01       	movw	r30, r24
     7bc:	80 81       	ld	r24, Z
     7be:	91 81       	ldd	r25, Z+1	; 0x01
     7c0:	01 97       	sbiw	r24, 0x01	; 1
     7c2:	f1 f7       	brne	.-4      	; 0x7c0 <hd44780_init+0x13c>
     7c4:	9e 01       	movw	r18, r28
     7c6:	29 5b       	subi	r18, 0xB9	; 185
     7c8:	3f 4f       	sbci	r19, 0xFF	; 255
     7ca:	f9 01       	movw	r30, r18
     7cc:	91 83       	std	Z+1, r25	; 0x01
     7ce:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7d0:	ce 01       	movw	r24, r28
     7d2:	8b 5b       	subi	r24, 0xBB	; 187
     7d4:	9f 4f       	sbci	r25, 0xFF	; 255
     7d6:	9e 01       	movw	r18, r28
     7d8:	2b 5b       	subi	r18, 0xBB	; 187
     7da:	3f 4f       	sbci	r19, 0xFF	; 255
     7dc:	f9 01       	movw	r30, r18
     7de:	20 81       	ld	r18, Z
     7e0:	31 81       	ldd	r19, Z+1	; 0x01
     7e2:	21 50       	subi	r18, 0x01	; 1
     7e4:	31 09       	sbc	r19, r1
     7e6:	fc 01       	movw	r30, r24
     7e8:	31 83       	std	Z+1, r19	; 0x01
     7ea:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7ec:	ce 01       	movw	r24, r28
     7ee:	8b 5b       	subi	r24, 0xBB	; 187
     7f0:	9f 4f       	sbci	r25, 0xFF	; 255
     7f2:	fc 01       	movw	r30, r24
     7f4:	80 81       	ld	r24, Z
     7f6:	91 81       	ldd	r25, Z+1	; 0x01
     7f8:	89 2b       	or	r24, r25
     7fa:	a1 f6       	brne	.-88     	; 0x7a4 <hd44780_init+0x120>
     7fc:	2c c0       	rjmp	.+88     	; 0x856 <__DATA_REGION_LENGTH__+0x56>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7fe:	8e 01       	movw	r16, r28
     800:	0b 5b       	subi	r16, 0xBB	; 187
     802:	1f 4f       	sbci	r17, 0xFF	; 255
     804:	ce 01       	movw	r24, r28
     806:	8f 5b       	subi	r24, 0xBF	; 191
     808:	9f 4f       	sbci	r25, 0xFF	; 255
     80a:	fc 01       	movw	r30, r24
     80c:	60 81       	ld	r22, Z
     80e:	71 81       	ldd	r23, Z+1	; 0x01
     810:	82 81       	ldd	r24, Z+2	; 0x02
     812:	93 81       	ldd	r25, Z+3	; 0x03
     814:	0e 94 09 08 	call	0x1012	; 0x1012 <__fixunssfsi>
     818:	dc 01       	movw	r26, r24
     81a:	cb 01       	movw	r24, r22
     81c:	f8 01       	movw	r30, r16
     81e:	91 83       	std	Z+1, r25	; 0x01
     820:	80 83       	st	Z, r24
     822:	ce 01       	movw	r24, r28
     824:	87 5b       	subi	r24, 0xB7	; 183
     826:	9f 4f       	sbci	r25, 0xFF	; 255
     828:	9e 01       	movw	r18, r28
     82a:	2b 5b       	subi	r18, 0xBB	; 187
     82c:	3f 4f       	sbci	r19, 0xFF	; 255
     82e:	f9 01       	movw	r30, r18
     830:	20 81       	ld	r18, Z
     832:	31 81       	ldd	r19, Z+1	; 0x01
     834:	fc 01       	movw	r30, r24
     836:	31 83       	std	Z+1, r19	; 0x01
     838:	20 83       	st	Z, r18
     83a:	ce 01       	movw	r24, r28
     83c:	87 5b       	subi	r24, 0xB7	; 183
     83e:	9f 4f       	sbci	r25, 0xFF	; 255
     840:	fc 01       	movw	r30, r24
     842:	80 81       	ld	r24, Z
     844:	91 81       	ldd	r25, Z+1	; 0x01
     846:	01 97       	sbiw	r24, 0x01	; 1
     848:	f1 f7       	brne	.-4      	; 0x846 <__DATA_REGION_LENGTH__+0x46>
     84a:	9e 01       	movw	r18, r28
     84c:	27 5b       	subi	r18, 0xB7	; 183
     84e:	3f 4f       	sbci	r19, 0xFF	; 255
     850:	f9 01       	movw	r30, r18
     852:	91 83       	std	Z+1, r25	; 0x01
     854:	80 83       	st	Z, r24

  _delay_ms(15);		/* 40 ms needed for Vcc = 2.7 V */
  hd44780_outnibble(HD44780_FNSET(1, 0, 0) >> 4, 0);
     856:	60 e0       	ldi	r22, 0x00	; 0
     858:	83 e0       	ldi	r24, 0x03	; 3
     85a:	0e 94 53 00 	call	0xa6	; 0xa6 <hd44780_outnibble>
     85e:	83 e3       	ldi	r24, 0x33	; 51
     860:	93 e3       	ldi	r25, 0x33	; 51
     862:	a3 e8       	ldi	r26, 0x83	; 131
     864:	b0 e4       	ldi	r27, 0x40	; 64
     866:	8d 83       	std	Y+5, r24	; 0x05
     868:	9e 83       	std	Y+6, r25	; 0x06
     86a:	af 83       	std	Y+7, r26	; 0x07
     86c:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     86e:	20 e0       	ldi	r18, 0x00	; 0
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	4a ef       	ldi	r20, 0xFA	; 250
     874:	54 e4       	ldi	r21, 0x44	; 68
     876:	6d 81       	ldd	r22, Y+5	; 0x05
     878:	7e 81       	ldd	r23, Y+6	; 0x06
     87a:	8f 81       	ldd	r24, Y+7	; 0x07
     87c:	98 85       	ldd	r25, Y+8	; 0x08
     87e:	0e 94 b2 08 	call	0x1164	; 0x1164 <__mulsf3>
     882:	dc 01       	movw	r26, r24
     884:	cb 01       	movw	r24, r22
     886:	8f ab       	std	Y+55, r24	; 0x37
     888:	98 af       	std	Y+56, r25	; 0x38
     88a:	a9 af       	std	Y+57, r26	; 0x39
     88c:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e8       	ldi	r20, 0x80	; 128
     894:	5f e3       	ldi	r21, 0x3F	; 63
     896:	6f a9       	ldd	r22, Y+55	; 0x37
     898:	78 ad       	ldd	r23, Y+56	; 0x38
     89a:	89 ad       	ldd	r24, Y+57	; 0x39
     89c:	9a ad       	ldd	r25, Y+58	; 0x3a
     89e:	0e 94 92 07 	call	0xf24	; 0xf24 <__cmpsf2>
     8a2:	88 23       	and	r24, r24
     8a4:	2c f4       	brge	.+10     	; 0x8b0 <__DATA_REGION_LENGTH__+0xb0>
		__ticks = 1;
     8a6:	81 e0       	ldi	r24, 0x01	; 1
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	9c af       	std	Y+60, r25	; 0x3c
     8ac:	8b af       	std	Y+59, r24	; 0x3b
     8ae:	3f c0       	rjmp	.+126    	; 0x92e <__stack+0x2f>
	else if (__tmp > 65535)
     8b0:	20 e0       	ldi	r18, 0x00	; 0
     8b2:	3f ef       	ldi	r19, 0xFF	; 255
     8b4:	4f e7       	ldi	r20, 0x7F	; 127
     8b6:	57 e4       	ldi	r21, 0x47	; 71
     8b8:	6f a9       	ldd	r22, Y+55	; 0x37
     8ba:	78 ad       	ldd	r23, Y+56	; 0x38
     8bc:	89 ad       	ldd	r24, Y+57	; 0x39
     8be:	9a ad       	ldd	r25, Y+58	; 0x3a
     8c0:	0e 94 ad 08 	call	0x115a	; 0x115a <__gesf2>
     8c4:	18 16       	cp	r1, r24
     8c6:	4c f5       	brge	.+82     	; 0x91a <__stack+0x1b>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8c8:	20 e0       	ldi	r18, 0x00	; 0
     8ca:	30 e0       	ldi	r19, 0x00	; 0
     8cc:	40 e2       	ldi	r20, 0x20	; 32
     8ce:	51 e4       	ldi	r21, 0x41	; 65
     8d0:	6d 81       	ldd	r22, Y+5	; 0x05
     8d2:	7e 81       	ldd	r23, Y+6	; 0x06
     8d4:	8f 81       	ldd	r24, Y+7	; 0x07
     8d6:	98 85       	ldd	r25, Y+8	; 0x08
     8d8:	0e 94 b2 08 	call	0x1164	; 0x1164 <__mulsf3>
     8dc:	dc 01       	movw	r26, r24
     8de:	cb 01       	movw	r24, r22
     8e0:	bc 01       	movw	r22, r24
     8e2:	cd 01       	movw	r24, r26
     8e4:	0e 94 09 08 	call	0x1012	; 0x1012 <__fixunssfsi>
     8e8:	dc 01       	movw	r26, r24
     8ea:	cb 01       	movw	r24, r22
     8ec:	9c af       	std	Y+60, r25	; 0x3c
     8ee:	8b af       	std	Y+59, r24	; 0x3b
     8f0:	0f c0       	rjmp	.+30     	; 0x910 <__stack+0x11>
     8f2:	88 ec       	ldi	r24, 0xC8	; 200
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	9e af       	std	Y+62, r25	; 0x3e
     8f8:	8d af       	std	Y+61, r24	; 0x3d
     8fa:	8d ad       	ldd	r24, Y+61	; 0x3d
     8fc:	9e ad       	ldd	r25, Y+62	; 0x3e
     8fe:	01 97       	sbiw	r24, 0x01	; 1
     900:	f1 f7       	brne	.-4      	; 0x8fe <__DATA_REGION_LENGTH__+0xfe>
     902:	9e af       	std	Y+62, r25	; 0x3e
     904:	8d af       	std	Y+61, r24	; 0x3d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     906:	8b ad       	ldd	r24, Y+59	; 0x3b
     908:	9c ad       	ldd	r25, Y+60	; 0x3c
     90a:	01 97       	sbiw	r24, 0x01	; 1
     90c:	9c af       	std	Y+60, r25	; 0x3c
     90e:	8b af       	std	Y+59, r24	; 0x3b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     910:	8b ad       	ldd	r24, Y+59	; 0x3b
     912:	9c ad       	ldd	r25, Y+60	; 0x3c
     914:	89 2b       	or	r24, r25
     916:	69 f7       	brne	.-38     	; 0x8f2 <__DATA_REGION_LENGTH__+0xf2>
     918:	1e c0       	rjmp	.+60     	; 0x956 <__stack+0x57>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     91a:	6f a9       	ldd	r22, Y+55	; 0x37
     91c:	78 ad       	ldd	r23, Y+56	; 0x38
     91e:	89 ad       	ldd	r24, Y+57	; 0x39
     920:	9a ad       	ldd	r25, Y+58	; 0x3a
     922:	0e 94 09 08 	call	0x1012	; 0x1012 <__fixunssfsi>
     926:	dc 01       	movw	r26, r24
     928:	cb 01       	movw	r24, r22
     92a:	9c af       	std	Y+60, r25	; 0x3c
     92c:	8b af       	std	Y+59, r24	; 0x3b
     92e:	2b ad       	ldd	r18, Y+59	; 0x3b
     930:	3c ad       	ldd	r19, Y+60	; 0x3c
     932:	ce 01       	movw	r24, r28
     934:	cf 96       	adiw	r24, 0x3f	; 63
     936:	fc 01       	movw	r30, r24
     938:	31 83       	std	Z+1, r19	; 0x01
     93a:	20 83       	st	Z, r18
     93c:	ce 01       	movw	r24, r28
     93e:	cf 96       	adiw	r24, 0x3f	; 63
     940:	fc 01       	movw	r30, r24
     942:	80 81       	ld	r24, Z
     944:	91 81       	ldd	r25, Z+1	; 0x01
     946:	01 97       	sbiw	r24, 0x01	; 1
     948:	f1 f7       	brne	.-4      	; 0x946 <__stack+0x47>
     94a:	9e 01       	movw	r18, r28
     94c:	21 5c       	subi	r18, 0xC1	; 193
     94e:	3f 4f       	sbci	r19, 0xFF	; 255
     950:	f9 01       	movw	r30, r18
     952:	91 83       	std	Z+1, r25	; 0x01
     954:	80 83       	st	Z, r24
  _delay_ms(4.1);
  hd44780_outnibble(HD44780_FNSET(1, 0, 0) >> 4, 0);
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	83 e0       	ldi	r24, 0x03	; 3
     95a:	0e 94 53 00 	call	0xa6	; 0xa6 <hd44780_outnibble>
     95e:	8d ec       	ldi	r24, 0xCD	; 205
     960:	9c ec       	ldi	r25, 0xCC	; 204
     962:	ac ec       	ldi	r26, 0xCC	; 204
     964:	bd e3       	ldi	r27, 0x3D	; 61
     966:	89 87       	std	Y+9, r24	; 0x09
     968:	9a 87       	std	Y+10, r25	; 0x0a
     96a:	ab 87       	std	Y+11, r26	; 0x0b
     96c:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     96e:	20 e0       	ldi	r18, 0x00	; 0
     970:	30 e0       	ldi	r19, 0x00	; 0
     972:	4a ef       	ldi	r20, 0xFA	; 250
     974:	54 e4       	ldi	r21, 0x44	; 68
     976:	69 85       	ldd	r22, Y+9	; 0x09
     978:	7a 85       	ldd	r23, Y+10	; 0x0a
     97a:	8b 85       	ldd	r24, Y+11	; 0x0b
     97c:	9c 85       	ldd	r25, Y+12	; 0x0c
     97e:	0e 94 b2 08 	call	0x1164	; 0x1164 <__mulsf3>
     982:	dc 01       	movw	r26, r24
     984:	cb 01       	movw	r24, r22
     986:	8d a7       	std	Y+45, r24	; 0x2d
     988:	9e a7       	std	Y+46, r25	; 0x2e
     98a:	af a7       	std	Y+47, r26	; 0x2f
     98c:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
     98e:	20 e0       	ldi	r18, 0x00	; 0
     990:	30 e0       	ldi	r19, 0x00	; 0
     992:	40 e8       	ldi	r20, 0x80	; 128
     994:	5f e3       	ldi	r21, 0x3F	; 63
     996:	6d a5       	ldd	r22, Y+45	; 0x2d
     998:	7e a5       	ldd	r23, Y+46	; 0x2e
     99a:	8f a5       	ldd	r24, Y+47	; 0x2f
     99c:	98 a9       	ldd	r25, Y+48	; 0x30
     99e:	0e 94 92 07 	call	0xf24	; 0xf24 <__cmpsf2>
     9a2:	88 23       	and	r24, r24
     9a4:	2c f4       	brge	.+10     	; 0x9b0 <__stack+0xb1>
		__ticks = 1;
     9a6:	81 e0       	ldi	r24, 0x01	; 1
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	9a ab       	std	Y+50, r25	; 0x32
     9ac:	89 ab       	std	Y+49, r24	; 0x31
     9ae:	3f c0       	rjmp	.+126    	; 0xa2e <__stack+0x12f>
	else if (__tmp > 65535)
     9b0:	20 e0       	ldi	r18, 0x00	; 0
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	4f e7       	ldi	r20, 0x7F	; 127
     9b6:	57 e4       	ldi	r21, 0x47	; 71
     9b8:	6d a5       	ldd	r22, Y+45	; 0x2d
     9ba:	7e a5       	ldd	r23, Y+46	; 0x2e
     9bc:	8f a5       	ldd	r24, Y+47	; 0x2f
     9be:	98 a9       	ldd	r25, Y+48	; 0x30
     9c0:	0e 94 ad 08 	call	0x115a	; 0x115a <__gesf2>
     9c4:	18 16       	cp	r1, r24
     9c6:	4c f5       	brge	.+82     	; 0xa1a <__stack+0x11b>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9c8:	20 e0       	ldi	r18, 0x00	; 0
     9ca:	30 e0       	ldi	r19, 0x00	; 0
     9cc:	40 e2       	ldi	r20, 0x20	; 32
     9ce:	51 e4       	ldi	r21, 0x41	; 65
     9d0:	69 85       	ldd	r22, Y+9	; 0x09
     9d2:	7a 85       	ldd	r23, Y+10	; 0x0a
     9d4:	8b 85       	ldd	r24, Y+11	; 0x0b
     9d6:	9c 85       	ldd	r25, Y+12	; 0x0c
     9d8:	0e 94 b2 08 	call	0x1164	; 0x1164 <__mulsf3>
     9dc:	dc 01       	movw	r26, r24
     9de:	cb 01       	movw	r24, r22
     9e0:	bc 01       	movw	r22, r24
     9e2:	cd 01       	movw	r24, r26
     9e4:	0e 94 09 08 	call	0x1012	; 0x1012 <__fixunssfsi>
     9e8:	dc 01       	movw	r26, r24
     9ea:	cb 01       	movw	r24, r22
     9ec:	9a ab       	std	Y+50, r25	; 0x32
     9ee:	89 ab       	std	Y+49, r24	; 0x31
     9f0:	0f c0       	rjmp	.+30     	; 0xa10 <__stack+0x111>
     9f2:	88 ec       	ldi	r24, 0xC8	; 200
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	9c ab       	std	Y+52, r25	; 0x34
     9f8:	8b ab       	std	Y+51, r24	; 0x33
     9fa:	8b a9       	ldd	r24, Y+51	; 0x33
     9fc:	9c a9       	ldd	r25, Y+52	; 0x34
     9fe:	01 97       	sbiw	r24, 0x01	; 1
     a00:	f1 f7       	brne	.-4      	; 0x9fe <__stack+0xff>
     a02:	9c ab       	std	Y+52, r25	; 0x34
     a04:	8b ab       	std	Y+51, r24	; 0x33
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a06:	89 a9       	ldd	r24, Y+49	; 0x31
     a08:	9a a9       	ldd	r25, Y+50	; 0x32
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	9a ab       	std	Y+50, r25	; 0x32
     a0e:	89 ab       	std	Y+49, r24	; 0x31
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a10:	89 a9       	ldd	r24, Y+49	; 0x31
     a12:	9a a9       	ldd	r25, Y+50	; 0x32
     a14:	89 2b       	or	r24, r25
     a16:	69 f7       	brne	.-38     	; 0x9f2 <__stack+0xf3>
     a18:	14 c0       	rjmp	.+40     	; 0xa42 <__stack+0x143>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a1a:	6d a5       	ldd	r22, Y+45	; 0x2d
     a1c:	7e a5       	ldd	r23, Y+46	; 0x2e
     a1e:	8f a5       	ldd	r24, Y+47	; 0x2f
     a20:	98 a9       	ldd	r25, Y+48	; 0x30
     a22:	0e 94 09 08 	call	0x1012	; 0x1012 <__fixunssfsi>
     a26:	dc 01       	movw	r26, r24
     a28:	cb 01       	movw	r24, r22
     a2a:	9a ab       	std	Y+50, r25	; 0x32
     a2c:	89 ab       	std	Y+49, r24	; 0x31
     a2e:	89 a9       	ldd	r24, Y+49	; 0x31
     a30:	9a a9       	ldd	r25, Y+50	; 0x32
     a32:	9e ab       	std	Y+54, r25	; 0x36
     a34:	8d ab       	std	Y+53, r24	; 0x35
     a36:	8d a9       	ldd	r24, Y+53	; 0x35
     a38:	9e a9       	ldd	r25, Y+54	; 0x36
     a3a:	01 97       	sbiw	r24, 0x01	; 1
     a3c:	f1 f7       	brne	.-4      	; 0xa3a <__stack+0x13b>
     a3e:	9e ab       	std	Y+54, r25	; 0x36
     a40:	8d ab       	std	Y+53, r24	; 0x35
  _delay_ms(0.1);
  hd44780_outnibble(HD44780_FNSET(1, 0, 0) >> 4, 0);
     a42:	60 e0       	ldi	r22, 0x00	; 0
     a44:	83 e0       	ldi	r24, 0x03	; 3
     a46:	0e 94 53 00 	call	0xa6	; 0xa6 <hd44780_outnibble>
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	a4 e1       	ldi	r26, 0x14	; 20
     a50:	b2 e4       	ldi	r27, 0x42	; 66
     a52:	8d 87       	std	Y+13, r24	; 0x0d
     a54:	9e 87       	std	Y+14, r25	; 0x0e
     a56:	af 87       	std	Y+15, r26	; 0x0f
     a58:	b8 8b       	std	Y+16, r27	; 0x10
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     a5a:	2b ea       	ldi	r18, 0xAB	; 171
     a5c:	3a ea       	ldi	r19, 0xAA	; 170
     a5e:	4a e2       	ldi	r20, 0x2A	; 42
     a60:	50 e4       	ldi	r21, 0x40	; 64
     a62:	6d 85       	ldd	r22, Y+13	; 0x0d
     a64:	7e 85       	ldd	r23, Y+14	; 0x0e
     a66:	8f 85       	ldd	r24, Y+15	; 0x0f
     a68:	98 89       	ldd	r25, Y+16	; 0x10
     a6a:	0e 94 b2 08 	call	0x1164	; 0x1164 <__mulsf3>
     a6e:	dc 01       	movw	r26, r24
     a70:	cb 01       	movw	r24, r22
     a72:	89 8b       	std	Y+17, r24	; 0x11
     a74:	9a 8b       	std	Y+18, r25	; 0x12
     a76:	ab 8b       	std	Y+19, r26	; 0x13
     a78:	bc 8b       	std	Y+20, r27	; 0x14
	__tmp2 = ((F_CPU) / 4e6) * __us;
     a7a:	8d 85       	ldd	r24, Y+13	; 0x0d
     a7c:	9e 85       	ldd	r25, Y+14	; 0x0e
     a7e:	af 85       	ldd	r26, Y+15	; 0x0f
     a80:	b8 89       	ldd	r27, Y+16	; 0x10
     a82:	9c 01       	movw	r18, r24
     a84:	ad 01       	movw	r20, r26
     a86:	bc 01       	movw	r22, r24
     a88:	cd 01       	movw	r24, r26
     a8a:	0e 94 26 07 	call	0xe4c	; 0xe4c <__addsf3>
     a8e:	dc 01       	movw	r26, r24
     a90:	cb 01       	movw	r24, r22
     a92:	8d 8b       	std	Y+21, r24	; 0x15
     a94:	9e 8b       	std	Y+22, r25	; 0x16
     a96:	af 8b       	std	Y+23, r26	; 0x17
     a98:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     a9a:	20 e0       	ldi	r18, 0x00	; 0
     a9c:	30 e0       	ldi	r19, 0x00	; 0
     a9e:	40 e8       	ldi	r20, 0x80	; 128
     aa0:	5f e3       	ldi	r21, 0x3F	; 63
     aa2:	69 89       	ldd	r22, Y+17	; 0x11
     aa4:	7a 89       	ldd	r23, Y+18	; 0x12
     aa6:	8b 89       	ldd	r24, Y+19	; 0x13
     aa8:	9c 89       	ldd	r25, Y+20	; 0x14
     aaa:	0e 94 92 07 	call	0xf24	; 0xf24 <__cmpsf2>
     aae:	88 23       	and	r24, r24
     ab0:	1c f4       	brge	.+6      	; 0xab8 <__stack+0x1b9>
		__ticks = 1;
     ab2:	81 e0       	ldi	r24, 0x01	; 1
     ab4:	89 8f       	std	Y+25, r24	; 0x19
     ab6:	b2 c0       	rjmp	.+356    	; 0xc1c <__stack+0x31d>
	else if (__tmp2 > 65535)
     ab8:	20 e0       	ldi	r18, 0x00	; 0
     aba:	3f ef       	ldi	r19, 0xFF	; 255
     abc:	4f e7       	ldi	r20, 0x7F	; 127
     abe:	57 e4       	ldi	r21, 0x47	; 71
     ac0:	6d 89       	ldd	r22, Y+21	; 0x15
     ac2:	7e 89       	ldd	r23, Y+22	; 0x16
     ac4:	8f 89       	ldd	r24, Y+23	; 0x17
     ac6:	98 8d       	ldd	r25, Y+24	; 0x18
     ac8:	0e 94 ad 08 	call	0x115a	; 0x115a <__gesf2>
     acc:	18 16       	cp	r1, r24
     ace:	0c f0       	brlt	.+2      	; 0xad2 <__stack+0x1d3>
     ad0:	7b c0       	rjmp	.+246    	; 0xbc8 <__stack+0x2c9>
	{
		_delay_ms(__us / 1000.0);
     ad2:	20 e0       	ldi	r18, 0x00	; 0
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	4a e7       	ldi	r20, 0x7A	; 122
     ad8:	54 e4       	ldi	r21, 0x44	; 68
     ada:	6d 85       	ldd	r22, Y+13	; 0x0d
     adc:	7e 85       	ldd	r23, Y+14	; 0x0e
     ade:	8f 85       	ldd	r24, Y+15	; 0x0f
     ae0:	98 89       	ldd	r25, Y+16	; 0x10
     ae2:	0e 94 97 07 	call	0xf2e	; 0xf2e <__divsf3>
     ae6:	dc 01       	movw	r26, r24
     ae8:	cb 01       	movw	r24, r22
     aea:	8a 8f       	std	Y+26, r24	; 0x1a
     aec:	9b 8f       	std	Y+27, r25	; 0x1b
     aee:	ac 8f       	std	Y+28, r26	; 0x1c
     af0:	bd 8f       	std	Y+29, r27	; 0x1d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     af2:	20 e0       	ldi	r18, 0x00	; 0
     af4:	30 e0       	ldi	r19, 0x00	; 0
     af6:	4a ef       	ldi	r20, 0xFA	; 250
     af8:	54 e4       	ldi	r21, 0x44	; 68
     afa:	6a 8d       	ldd	r22, Y+26	; 0x1a
     afc:	7b 8d       	ldd	r23, Y+27	; 0x1b
     afe:	8c 8d       	ldd	r24, Y+28	; 0x1c
     b00:	9d 8d       	ldd	r25, Y+29	; 0x1d
     b02:	0e 94 b2 08 	call	0x1164	; 0x1164 <__mulsf3>
     b06:	dc 01       	movw	r26, r24
     b08:	cb 01       	movw	r24, r22
     b0a:	8e 8f       	std	Y+30, r24	; 0x1e
     b0c:	9f 8f       	std	Y+31, r25	; 0x1f
     b0e:	a8 a3       	std	Y+32, r26	; 0x20
     b10:	b9 a3       	std	Y+33, r27	; 0x21
	if (__tmp < 1.0)
     b12:	20 e0       	ldi	r18, 0x00	; 0
     b14:	30 e0       	ldi	r19, 0x00	; 0
     b16:	40 e8       	ldi	r20, 0x80	; 128
     b18:	5f e3       	ldi	r21, 0x3F	; 63
     b1a:	6e 8d       	ldd	r22, Y+30	; 0x1e
     b1c:	7f 8d       	ldd	r23, Y+31	; 0x1f
     b1e:	88 a1       	ldd	r24, Y+32	; 0x20
     b20:	99 a1       	ldd	r25, Y+33	; 0x21
     b22:	0e 94 92 07 	call	0xf24	; 0xf24 <__cmpsf2>
     b26:	88 23       	and	r24, r24
     b28:	2c f4       	brge	.+10     	; 0xb34 <__stack+0x235>
		__ticks = 1;
     b2a:	81 e0       	ldi	r24, 0x01	; 1
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	9b a3       	std	Y+35, r25	; 0x23
     b30:	8a a3       	std	Y+34, r24	; 0x22
     b32:	3f c0       	rjmp	.+126    	; 0xbb2 <__stack+0x2b3>
	else if (__tmp > 65535)
     b34:	20 e0       	ldi	r18, 0x00	; 0
     b36:	3f ef       	ldi	r19, 0xFF	; 255
     b38:	4f e7       	ldi	r20, 0x7F	; 127
     b3a:	57 e4       	ldi	r21, 0x47	; 71
     b3c:	6e 8d       	ldd	r22, Y+30	; 0x1e
     b3e:	7f 8d       	ldd	r23, Y+31	; 0x1f
     b40:	88 a1       	ldd	r24, Y+32	; 0x20
     b42:	99 a1       	ldd	r25, Y+33	; 0x21
     b44:	0e 94 ad 08 	call	0x115a	; 0x115a <__gesf2>
     b48:	18 16       	cp	r1, r24
     b4a:	4c f5       	brge	.+82     	; 0xb9e <__stack+0x29f>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b4c:	20 e0       	ldi	r18, 0x00	; 0
     b4e:	30 e0       	ldi	r19, 0x00	; 0
     b50:	40 e2       	ldi	r20, 0x20	; 32
     b52:	51 e4       	ldi	r21, 0x41	; 65
     b54:	6a 8d       	ldd	r22, Y+26	; 0x1a
     b56:	7b 8d       	ldd	r23, Y+27	; 0x1b
     b58:	8c 8d       	ldd	r24, Y+28	; 0x1c
     b5a:	9d 8d       	ldd	r25, Y+29	; 0x1d
     b5c:	0e 94 b2 08 	call	0x1164	; 0x1164 <__mulsf3>
     b60:	dc 01       	movw	r26, r24
     b62:	cb 01       	movw	r24, r22
     b64:	bc 01       	movw	r22, r24
     b66:	cd 01       	movw	r24, r26
     b68:	0e 94 09 08 	call	0x1012	; 0x1012 <__fixunssfsi>
     b6c:	dc 01       	movw	r26, r24
     b6e:	cb 01       	movw	r24, r22
     b70:	9b a3       	std	Y+35, r25	; 0x23
     b72:	8a a3       	std	Y+34, r24	; 0x22
     b74:	0f c0       	rjmp	.+30     	; 0xb94 <__stack+0x295>
     b76:	88 ec       	ldi	r24, 0xC8	; 200
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	9d a3       	std	Y+37, r25	; 0x25
     b7c:	8c a3       	std	Y+36, r24	; 0x24
     b7e:	8c a1       	ldd	r24, Y+36	; 0x24
     b80:	9d a1       	ldd	r25, Y+37	; 0x25
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	f1 f7       	brne	.-4      	; 0xb82 <__stack+0x283>
     b86:	9d a3       	std	Y+37, r25	; 0x25
     b88:	8c a3       	std	Y+36, r24	; 0x24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b8a:	8a a1       	ldd	r24, Y+34	; 0x22
     b8c:	9b a1       	ldd	r25, Y+35	; 0x23
     b8e:	01 97       	sbiw	r24, 0x01	; 1
     b90:	9b a3       	std	Y+35, r25	; 0x23
     b92:	8a a3       	std	Y+34, r24	; 0x22
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b94:	8a a1       	ldd	r24, Y+34	; 0x22
     b96:	9b a1       	ldd	r25, Y+35	; 0x23
     b98:	89 2b       	or	r24, r25
     b9a:	69 f7       	brne	.-38     	; 0xb76 <__stack+0x277>
     b9c:	3f c0       	rjmp	.+126    	; 0xc1c <__stack+0x31d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b9e:	6e 8d       	ldd	r22, Y+30	; 0x1e
     ba0:	7f 8d       	ldd	r23, Y+31	; 0x1f
     ba2:	88 a1       	ldd	r24, Y+32	; 0x20
     ba4:	99 a1       	ldd	r25, Y+33	; 0x21
     ba6:	0e 94 09 08 	call	0x1012	; 0x1012 <__fixunssfsi>
     baa:	dc 01       	movw	r26, r24
     bac:	cb 01       	movw	r24, r22
     bae:	9b a3       	std	Y+35, r25	; 0x23
     bb0:	8a a3       	std	Y+34, r24	; 0x22
     bb2:	8a a1       	ldd	r24, Y+34	; 0x22
     bb4:	9b a1       	ldd	r25, Y+35	; 0x23
     bb6:	9f a3       	std	Y+39, r25	; 0x27
     bb8:	8e a3       	std	Y+38, r24	; 0x26
     bba:	8e a1       	ldd	r24, Y+38	; 0x26
     bbc:	9f a1       	ldd	r25, Y+39	; 0x27
     bbe:	01 97       	sbiw	r24, 0x01	; 1
     bc0:	f1 f7       	brne	.-4      	; 0xbbe <__stack+0x2bf>
     bc2:	9f a3       	std	Y+39, r25	; 0x27
     bc4:	8e a3       	std	Y+38, r24	; 0x26
     bc6:	2a c0       	rjmp	.+84     	; 0xc1c <__stack+0x31d>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     bc8:	20 e0       	ldi	r18, 0x00	; 0
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	4f e7       	ldi	r20, 0x7F	; 127
     bce:	53 e4       	ldi	r21, 0x43	; 67
     bd0:	69 89       	ldd	r22, Y+17	; 0x11
     bd2:	7a 89       	ldd	r23, Y+18	; 0x12
     bd4:	8b 89       	ldd	r24, Y+19	; 0x13
     bd6:	9c 89       	ldd	r25, Y+20	; 0x14
     bd8:	0e 94 ad 08 	call	0x115a	; 0x115a <__gesf2>
     bdc:	18 16       	cp	r1, r24
     bde:	ac f4       	brge	.+42     	; 0xc0a <__stack+0x30b>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     be0:	6d 89       	ldd	r22, Y+21	; 0x15
     be2:	7e 89       	ldd	r23, Y+22	; 0x16
     be4:	8f 89       	ldd	r24, Y+23	; 0x17
     be6:	98 8d       	ldd	r25, Y+24	; 0x18
     be8:	0e 94 09 08 	call	0x1012	; 0x1012 <__fixunssfsi>
     bec:	dc 01       	movw	r26, r24
     bee:	cb 01       	movw	r24, r22
     bf0:	99 a7       	std	Y+41, r25	; 0x29
     bf2:	88 a7       	std	Y+40, r24	; 0x28
     bf4:	88 a5       	ldd	r24, Y+40	; 0x28
     bf6:	99 a5       	ldd	r25, Y+41	; 0x29
     bf8:	9b a7       	std	Y+43, r25	; 0x2b
     bfa:	8a a7       	std	Y+42, r24	; 0x2a
     bfc:	8a a5       	ldd	r24, Y+42	; 0x2a
     bfe:	9b a5       	ldd	r25, Y+43	; 0x2b
     c00:	01 97       	sbiw	r24, 0x01	; 1
     c02:	f1 f7       	brne	.-4      	; 0xc00 <__stack+0x301>
     c04:	9b a7       	std	Y+43, r25	; 0x2b
     c06:	8a a7       	std	Y+42, r24	; 0x2a
     c08:	0f c0       	rjmp	.+30     	; 0xc28 <__stack+0x329>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     c0a:	69 89       	ldd	r22, Y+17	; 0x11
     c0c:	7a 89       	ldd	r23, Y+18	; 0x12
     c0e:	8b 89       	ldd	r24, Y+19	; 0x13
     c10:	9c 89       	ldd	r25, Y+20	; 0x14
     c12:	0e 94 09 08 	call	0x1012	; 0x1012 <__fixunssfsi>
     c16:	dc 01       	movw	r26, r24
     c18:	cb 01       	movw	r24, r22
     c1a:	89 8f       	std	Y+25, r24	; 0x19
     c1c:	89 8d       	ldd	r24, Y+25	; 0x19
     c1e:	8c a7       	std	Y+44, r24	; 0x2c
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     c20:	8c a5       	ldd	r24, Y+44	; 0x2c
     c22:	8a 95       	dec	r24
     c24:	f1 f7       	brne	.-4      	; 0xc22 <__stack+0x323>
     c26:	8c a7       	std	Y+44, r24	; 0x2c
  _delay_us(37);

  hd44780_outnibble(HD44780_FNSET(0, 1, 0) >> 4, 0);
     c28:	60 e0       	ldi	r22, 0x00	; 0
     c2a:	82 e0       	ldi	r24, 0x02	; 2
     c2c:	0e 94 53 00 	call	0xa6	; 0xa6 <hd44780_outnibble>
  hd44780_wait_ready(false);
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	0e 94 31 03 	call	0x662	; 0x662 <hd44780_wait_ready>
  hd44780_outcmd(HD44780_FNSET(0, 1, 0));
     c36:	60 e0       	ldi	r22, 0x00	; 0
     c38:	88 e2       	ldi	r24, 0x28	; 40
     c3a:	0e 94 a1 01 	call	0x342	; 0x342 <hd44780_outbyte>
  hd44780_wait_ready(false);
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	0e 94 31 03 	call	0x662	; 0x662 <hd44780_wait_ready>
  hd44780_outcmd(HD44780_DISPCTL(0, 0, 0));
     c44:	60 e0       	ldi	r22, 0x00	; 0
     c46:	88 e0       	ldi	r24, 0x08	; 8
     c48:	0e 94 a1 01 	call	0x342	; 0x342 <hd44780_outbyte>
  hd44780_wait_ready(false);
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	0e 94 31 03 	call	0x662	; 0x662 <hd44780_wait_ready>
}
     c52:	00 00       	nop
     c54:	c6 5b       	subi	r28, 0xB6	; 182
     c56:	df 4f       	sbci	r29, 0xFF	; 255
     c58:	0f b6       	in	r0, 0x3f	; 63
     c5a:	f8 94       	cli
     c5c:	de bf       	out	0x3e, r29	; 62
     c5e:	0f be       	out	0x3f, r0	; 63
     c60:	cd bf       	out	0x3d, r28	; 61
     c62:	df 91       	pop	r29
     c64:	cf 91       	pop	r28
     c66:	1f 91       	pop	r17
     c68:	0f 91       	pop	r16
     c6a:	08 95       	ret

00000c6c <hd44780_powerdown>:
/*
 * Prepare the LCD controller pins for powerdown.
 */
void
hd44780_powerdown(void)
{
     c6c:	cf 93       	push	r28
     c6e:	df 93       	push	r29
     c70:	cd b7       	in	r28, 0x3d	; 61
     c72:	de b7       	in	r29, 0x3e	; 62
  ASSIGN(PORT, HD44780_D4, 0);
     c74:	88 e2       	ldi	r24, 0x28	; 40
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	28 e2       	ldi	r18, 0x28	; 40
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	f9 01       	movw	r30, r18
     c7e:	20 81       	ld	r18, Z
     c80:	20 7f       	andi	r18, 0xF0	; 240
     c82:	fc 01       	movw	r30, r24
     c84:	20 83       	st	Z, r18
  CLR(PORT, HD44780_RS);
     c86:	85 e2       	ldi	r24, 0x25	; 37
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	25 e2       	ldi	r18, 0x25	; 37
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	f9 01       	movw	r30, r18
     c90:	20 81       	ld	r18, Z
     c92:	2f 7d       	andi	r18, 0xDF	; 223
     c94:	fc 01       	movw	r30, r24
     c96:	20 83       	st	Z, r18
  CLR(PORT, HD44780_RW);
     c98:	85 e2       	ldi	r24, 0x25	; 37
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	25 e2       	ldi	r18, 0x25	; 37
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	f9 01       	movw	r30, r18
     ca2:	20 81       	ld	r18, Z
     ca4:	2f 7e       	andi	r18, 0xEF	; 239
     ca6:	fc 01       	movw	r30, r24
     ca8:	20 83       	st	Z, r18
  CLR(PORT, HD44780_E);
     caa:	85 e2       	ldi	r24, 0x25	; 37
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	25 e2       	ldi	r18, 0x25	; 37
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	f9 01       	movw	r30, r18
     cb4:	20 81       	ld	r18, Z
     cb6:	27 7f       	andi	r18, 0xF7	; 247
     cb8:	fc 01       	movw	r30, r24
     cba:	20 83       	st	Z, r18
}
     cbc:	00 00       	nop
     cbe:	df 91       	pop	r29
     cc0:	cf 91       	pop	r28
     cc2:	08 95       	ret

00000cc4 <lcd_init>:
 * Setup the LCD controller.  First, call the hardware initialization
 * function, then adjust the display attributes we want.
 */
void
lcd_init(void)
{
     cc4:	cf 93       	push	r28
     cc6:	df 93       	push	r29
     cc8:	cd b7       	in	r28, 0x3d	; 61
     cca:	de b7       	in	r29, 0x3e	; 62

  hd44780_init();
     ccc:	0e 94 42 03 	call	0x684	; 0x684 <hd44780_init>

  /*
   * Clear the display.
   */
  hd44780_outcmd(HD44780_CLR);
     cd0:	60 e0       	ldi	r22, 0x00	; 0
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	0e 94 a1 01 	call	0x342	; 0x342 <hd44780_outbyte>
  hd44780_wait_ready(true);
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	0e 94 31 03 	call	0x662	; 0x662 <hd44780_wait_ready>

  /*
   * Entry mode: auto-increment address counter, no display shift in
   * effect.
   */
  hd44780_outcmd(HD44780_ENTMODE(1, 0));
     cde:	60 e0       	ldi	r22, 0x00	; 0
     ce0:	86 e0       	ldi	r24, 0x06	; 6
     ce2:	0e 94 a1 01 	call	0x342	; 0x342 <hd44780_outbyte>
  hd44780_wait_ready(false);
     ce6:	80 e0       	ldi	r24, 0x00	; 0
     ce8:	0e 94 31 03 	call	0x662	; 0x662 <hd44780_wait_ready>

  /*
   * Enable display, activate non-blinking cursor.
   */
  hd44780_outcmd(HD44780_DISPCTL(1, 1, 0));
     cec:	60 e0       	ldi	r22, 0x00	; 0
     cee:	8e e0       	ldi	r24, 0x0E	; 14
     cf0:	0e 94 a1 01 	call	0x342	; 0x342 <hd44780_outbyte>
  hd44780_wait_ready(false);
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	0e 94 31 03 	call	0x662	; 0x662 <hd44780_wait_ready>
}
     cfa:	00 00       	nop
     cfc:	df 91       	pop	r29
     cfe:	cf 91       	pop	r28
     d00:	08 95       	ret

00000d02 <lcd_putchar>:
 * Send character c to the LCD display.  After a '\n' has been seen,
 * the next character will first clear the display.
 */
int
lcd_putchar(char c, FILE *unused)
{
     d02:	cf 93       	push	r28
     d04:	df 93       	push	r29
     d06:	00 d0       	rcall	.+0      	; 0xd08 <lcd_putchar+0x6>
     d08:	1f 92       	push	r1
     d0a:	cd b7       	in	r28, 0x3d	; 61
     d0c:	de b7       	in	r29, 0x3e	; 62
     d0e:	89 83       	std	Y+1, r24	; 0x01
     d10:	7b 83       	std	Y+3, r23	; 0x03
     d12:	6a 83       	std	Y+2, r22	; 0x02
  static bool nl_seen = 0;

  if (nl_seen >= 2 && c != '\n')
     d14:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
     d18:	88 2f       	mov	r24, r24
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	02 97       	sbiw	r24, 0x02	; 2
     d1e:	d4 f0       	brlt	.+52     	; 0xd54 <lcd_putchar+0x52>
     d20:	89 81       	ldd	r24, Y+1	; 0x01
     d22:	8a 30       	cpi	r24, 0x0A	; 10
     d24:	b9 f0       	breq	.+46     	; 0xd54 <lcd_putchar+0x52>
    {
      /*
       * First character after newline, clear display and home cursor.
       */
      hd44780_wait_ready(false);
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	0e 94 31 03 	call	0x662	; 0x662 <hd44780_wait_ready>
      hd44780_outcmd(HD44780_CLR);
     d2c:	60 e0       	ldi	r22, 0x00	; 0
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	0e 94 a1 01 	call	0x342	; 0x342 <hd44780_outbyte>
      hd44780_wait_ready(false);
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	0e 94 31 03 	call	0x662	; 0x662 <hd44780_wait_ready>
      hd44780_outcmd(HD44780_HOME);
     d3a:	60 e0       	ldi	r22, 0x00	; 0
     d3c:	82 e0       	ldi	r24, 0x02	; 2
     d3e:	0e 94 a1 01 	call	0x342	; 0x342 <hd44780_outbyte>
      hd44780_wait_ready(true);
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	0e 94 31 03 	call	0x662	; 0x662 <hd44780_wait_ready>
      hd44780_outcmd(HD44780_DDADDR(0));
     d48:	60 e0       	ldi	r22, 0x00	; 0
     d4a:	80 e8       	ldi	r24, 0x80	; 128
     d4c:	0e 94 a1 01 	call	0x342	; 0x342 <hd44780_outbyte>

      nl_seen = 0;
     d50:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <__data_end>
    }
  if (c == '\n')
     d54:	89 81       	ldd	r24, Y+1	; 0x01
     d56:	8a 30       	cpi	r24, 0x0A	; 10
     d58:	79 f4       	brne	.+30     	; 0xd78 <lcd_putchar+0x76>
    {
      ++nl_seen;
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end>
      if (nl_seen == 1){
     d60:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <__data_end>
     d64:	88 23       	and	r24, r24
     d66:	79 f0       	breq	.+30     	; 0xd86 <lcd_putchar+0x84>
		    hd44780_wait_ready(true);
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	0e 94 31 03 	call	0x662	; 0x662 <hd44780_wait_ready>
		    hd44780_outcmd(HD44780_DDADDR(0x40));
     d6e:	60 e0       	ldi	r22, 0x00	; 0
     d70:	80 ec       	ldi	r24, 0xC0	; 192
     d72:	0e 94 a1 01 	call	0x342	; 0x342 <hd44780_outbyte>
     d76:	07 c0       	rjmp	.+14     	; 0xd86 <lcd_putchar+0x84>
		  }
    }
  else
    {
      hd44780_wait_ready(false);
     d78:	80 e0       	ldi	r24, 0x00	; 0
     d7a:	0e 94 31 03 	call	0x662	; 0x662 <hd44780_wait_ready>
      hd44780_outdata(c);
     d7e:	61 e0       	ldi	r22, 0x01	; 1
     d80:	89 81       	ldd	r24, Y+1	; 0x01
     d82:	0e 94 a1 01 	call	0x342	; 0x342 <hd44780_outbyte>
    }

  return 0;
     d86:	80 e0       	ldi	r24, 0x00	; 0
     d88:	90 e0       	ldi	r25, 0x00	; 0
}
     d8a:	0f 90       	pop	r0
     d8c:	0f 90       	pop	r0
     d8e:	0f 90       	pop	r0
     d90:	df 91       	pop	r29
     d92:	cf 91       	pop	r28
     d94:	08 95       	ret

00000d96 <home>:

/*
Returns the cursor to the first row first cell of the LCD
*/
void home(void){
     d96:	cf 93       	push	r28
     d98:	df 93       	push	r29
     d9a:	cd b7       	in	r28, 0x3d	; 61
     d9c:	de b7       	in	r29, 0x3e	; 62
  hd44780_wait_ready(true);
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	0e 94 31 03 	call	0x662	; 0x662 <hd44780_wait_ready>
	hd44780_outcmd(HD44780_DDADDR(0x00));
     da4:	60 e0       	ldi	r22, 0x00	; 0
     da6:	80 e8       	ldi	r24, 0x80	; 128
     da8:	0e 94 a1 01 	call	0x342	; 0x342 <hd44780_outbyte>
}
     dac:	00 00       	nop
     dae:	df 91       	pop	r29
     db0:	cf 91       	pop	r28
     db2:	08 95       	ret

00000db4 <clear>:

/*
Clears the screen of the LCD and returns home
*/
void clear(void){
     db4:	cf 93       	push	r28
     db6:	df 93       	push	r29
     db8:	cd b7       	in	r28, 0x3d	; 61
     dba:	de b7       	in	r29, 0x3e	; 62
	hd44780_wait_ready(false);
     dbc:	80 e0       	ldi	r24, 0x00	; 0
     dbe:	0e 94 31 03 	call	0x662	; 0x662 <hd44780_wait_ready>
	hd44780_outcmd(HD44780_CLR);
     dc2:	60 e0       	ldi	r22, 0x00	; 0
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	0e 94 a1 01 	call	0x342	; 0x342 <hd44780_outbyte>
	hd44780_wait_ready(true);
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	0e 94 31 03 	call	0x662	; 0x662 <hd44780_wait_ready>
	hd44780_outcmd(HD44780_DDADDR(0));
     dd0:	60 e0       	ldi	r22, 0x00	; 0
     dd2:	80 e8       	ldi	r24, 0x80	; 128
     dd4:	0e 94 a1 01 	call	0x342	; 0x342 <hd44780_outbyte>
}
     dd8:	00 00       	nop
     dda:	df 91       	pop	r29
     ddc:	cf 91       	pop	r28
     dde:	08 95       	ret

00000de0 <row2>:

/*
Puts the cursor at the start of the second row
*/
void row2(void){
     de0:	cf 93       	push	r28
     de2:	df 93       	push	r29
     de4:	cd b7       	in	r28, 0x3d	; 61
     de6:	de b7       	in	r29, 0x3e	; 62
	hd44780_wait_ready(true);
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	0e 94 31 03 	call	0x662	; 0x662 <hd44780_wait_ready>
	hd44780_outcmd(HD44780_DDADDR(0x40));
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	80 ec       	ldi	r24, 0xC0	; 192
     df2:	0e 94 a1 01 	call	0x342	; 0x342 <hd44780_outbyte>
}
     df6:	00 00       	nop
     df8:	df 91       	pop	r29
     dfa:	cf 91       	pop	r28
     dfc:	08 95       	ret

00000dfe <main>:
#include "LCD_lib/lcd.h"

FILE lcd_str = FDEV_SETUP_STREAM(lcd_putchar, NULL, _FDEV_SETUP_WRITE);

int main(void)
{
     dfe:	cf 93       	push	r28
     e00:	df 93       	push	r29
     e02:	00 d0       	rcall	.+0      	; 0xe04 <main+0x6>
     e04:	cd b7       	in	r28, 0x3d	; 61
     e06:	de b7       	in	r29, 0x3e	; 62
	stdout = &lcd_str; // redefines std output to output to LCD file output, that file is what writes to LCD
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	91 e0       	ldi	r25, 0x01	; 1
     e0c:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <__iob+0x3>
     e10:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <__iob+0x2>
     e14:	82 e0       	ldi	r24, 0x02	; 2
     e16:	89 83       	std	Y+1, r24	; 0x01
\note For device with XTAL Divide Control Register (XDIV), \c x can actually range
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
     e18:	80 e8       	ldi	r24, 0x80	; 128
     e1a:	8a 83       	std	Y+2, r24	; 0x02
    __asm__ __volatile__ (
     e1c:	8a 81       	ldd	r24, Y+2	; 0x02
     e1e:	99 81       	ldd	r25, Y+1	; 0x01
     e20:	0f b6       	in	r0, 0x3f	; 63
     e22:	f8 94       	cli
     e24:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f8061>
     e28:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f8061>
     e2c:	0f be       	out	0x3f, r0	; 63
	clock_prescale_set(2);

	lcd_init();
     e2e:	0e 94 62 06 	call	0xcc4	; 0xcc4 <lcd_init>

	printf("HELLO WORLD");
     e32:	8e e0       	ldi	r24, 0x0E	; 14
     e34:	91 e0       	ldi	r25, 0x01	; 1
     e36:	89 2f       	mov	r24, r25
     e38:	8f 93       	push	r24
     e3a:	8e e0       	ldi	r24, 0x0E	; 14
     e3c:	91 e0       	ldi	r25, 0x01	; 1
     e3e:	8f 93       	push	r24
     e40:	0e 94 1f 09 	call	0x123e	; 0x123e <printf>
     e44:	0f 90       	pop	r0
     e46:	0f 90       	pop	r0
	

    while (1) {

    }
     e48:	ff cf       	rjmp	.-2      	; 0xe48 <main+0x4a>

00000e4a <__subsf3>:
     e4a:	50 58       	subi	r21, 0x80	; 128

00000e4c <__addsf3>:
     e4c:	bb 27       	eor	r27, r27
     e4e:	aa 27       	eor	r26, r26
     e50:	0e 94 3d 07 	call	0xe7a	; 0xe7a <__addsf3x>
     e54:	0c 94 73 08 	jmp	0x10e6	; 0x10e6 <__fp_round>
     e58:	0e 94 65 08 	call	0x10ca	; 0x10ca <__fp_pscA>
     e5c:	38 f0       	brcs	.+14     	; 0xe6c <__addsf3+0x20>
     e5e:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <__fp_pscB>
     e62:	20 f0       	brcs	.+8      	; 0xe6c <__addsf3+0x20>
     e64:	39 f4       	brne	.+14     	; 0xe74 <__addsf3+0x28>
     e66:	9f 3f       	cpi	r25, 0xFF	; 255
     e68:	19 f4       	brne	.+6      	; 0xe70 <__addsf3+0x24>
     e6a:	26 f4       	brtc	.+8      	; 0xe74 <__addsf3+0x28>
     e6c:	0c 94 62 08 	jmp	0x10c4	; 0x10c4 <__fp_nan>
     e70:	0e f4       	brtc	.+2      	; 0xe74 <__addsf3+0x28>
     e72:	e0 95       	com	r30
     e74:	e7 fb       	bst	r30, 7
     e76:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__fp_inf>

00000e7a <__addsf3x>:
     e7a:	e9 2f       	mov	r30, r25
     e7c:	0e 94 84 08 	call	0x1108	; 0x1108 <__fp_split3>
     e80:	58 f3       	brcs	.-42     	; 0xe58 <__addsf3+0xc>
     e82:	ba 17       	cp	r27, r26
     e84:	62 07       	cpc	r22, r18
     e86:	73 07       	cpc	r23, r19
     e88:	84 07       	cpc	r24, r20
     e8a:	95 07       	cpc	r25, r21
     e8c:	20 f0       	brcs	.+8      	; 0xe96 <__addsf3x+0x1c>
     e8e:	79 f4       	brne	.+30     	; 0xeae <__addsf3x+0x34>
     e90:	a6 f5       	brtc	.+104    	; 0xefa <__addsf3x+0x80>
     e92:	0c 94 a6 08 	jmp	0x114c	; 0x114c <__fp_zero>
     e96:	0e f4       	brtc	.+2      	; 0xe9a <__addsf3x+0x20>
     e98:	e0 95       	com	r30
     e9a:	0b 2e       	mov	r0, r27
     e9c:	ba 2f       	mov	r27, r26
     e9e:	a0 2d       	mov	r26, r0
     ea0:	0b 01       	movw	r0, r22
     ea2:	b9 01       	movw	r22, r18
     ea4:	90 01       	movw	r18, r0
     ea6:	0c 01       	movw	r0, r24
     ea8:	ca 01       	movw	r24, r20
     eaa:	a0 01       	movw	r20, r0
     eac:	11 24       	eor	r1, r1
     eae:	ff 27       	eor	r31, r31
     eb0:	59 1b       	sub	r21, r25
     eb2:	99 f0       	breq	.+38     	; 0xeda <__addsf3x+0x60>
     eb4:	59 3f       	cpi	r21, 0xF9	; 249
     eb6:	50 f4       	brcc	.+20     	; 0xecc <__addsf3x+0x52>
     eb8:	50 3e       	cpi	r21, 0xE0	; 224
     eba:	68 f1       	brcs	.+90     	; 0xf16 <__addsf3x+0x9c>
     ebc:	1a 16       	cp	r1, r26
     ebe:	f0 40       	sbci	r31, 0x00	; 0
     ec0:	a2 2f       	mov	r26, r18
     ec2:	23 2f       	mov	r18, r19
     ec4:	34 2f       	mov	r19, r20
     ec6:	44 27       	eor	r20, r20
     ec8:	58 5f       	subi	r21, 0xF8	; 248
     eca:	f3 cf       	rjmp	.-26     	; 0xeb2 <__addsf3x+0x38>
     ecc:	46 95       	lsr	r20
     ece:	37 95       	ror	r19
     ed0:	27 95       	ror	r18
     ed2:	a7 95       	ror	r26
     ed4:	f0 40       	sbci	r31, 0x00	; 0
     ed6:	53 95       	inc	r21
     ed8:	c9 f7       	brne	.-14     	; 0xecc <__addsf3x+0x52>
     eda:	7e f4       	brtc	.+30     	; 0xefa <__addsf3x+0x80>
     edc:	1f 16       	cp	r1, r31
     ede:	ba 0b       	sbc	r27, r26
     ee0:	62 0b       	sbc	r22, r18
     ee2:	73 0b       	sbc	r23, r19
     ee4:	84 0b       	sbc	r24, r20
     ee6:	ba f0       	brmi	.+46     	; 0xf16 <__addsf3x+0x9c>
     ee8:	91 50       	subi	r25, 0x01	; 1
     eea:	a1 f0       	breq	.+40     	; 0xf14 <__addsf3x+0x9a>
     eec:	ff 0f       	add	r31, r31
     eee:	bb 1f       	adc	r27, r27
     ef0:	66 1f       	adc	r22, r22
     ef2:	77 1f       	adc	r23, r23
     ef4:	88 1f       	adc	r24, r24
     ef6:	c2 f7       	brpl	.-16     	; 0xee8 <__addsf3x+0x6e>
     ef8:	0e c0       	rjmp	.+28     	; 0xf16 <__addsf3x+0x9c>
     efa:	ba 0f       	add	r27, r26
     efc:	62 1f       	adc	r22, r18
     efe:	73 1f       	adc	r23, r19
     f00:	84 1f       	adc	r24, r20
     f02:	48 f4       	brcc	.+18     	; 0xf16 <__addsf3x+0x9c>
     f04:	87 95       	ror	r24
     f06:	77 95       	ror	r23
     f08:	67 95       	ror	r22
     f0a:	b7 95       	ror	r27
     f0c:	f7 95       	ror	r31
     f0e:	9e 3f       	cpi	r25, 0xFE	; 254
     f10:	08 f0       	brcs	.+2      	; 0xf14 <__addsf3x+0x9a>
     f12:	b0 cf       	rjmp	.-160    	; 0xe74 <__addsf3+0x28>
     f14:	93 95       	inc	r25
     f16:	88 0f       	add	r24, r24
     f18:	08 f0       	brcs	.+2      	; 0xf1c <__addsf3x+0xa2>
     f1a:	99 27       	eor	r25, r25
     f1c:	ee 0f       	add	r30, r30
     f1e:	97 95       	ror	r25
     f20:	87 95       	ror	r24
     f22:	08 95       	ret

00000f24 <__cmpsf2>:
     f24:	0e 94 38 08 	call	0x1070	; 0x1070 <__fp_cmp>
     f28:	08 f4       	brcc	.+2      	; 0xf2c <__cmpsf2+0x8>
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	08 95       	ret

00000f2e <__divsf3>:
     f2e:	0e 94 ab 07 	call	0xf56	; 0xf56 <__divsf3x>
     f32:	0c 94 73 08 	jmp	0x10e6	; 0x10e6 <__fp_round>
     f36:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <__fp_pscB>
     f3a:	58 f0       	brcs	.+22     	; 0xf52 <__divsf3+0x24>
     f3c:	0e 94 65 08 	call	0x10ca	; 0x10ca <__fp_pscA>
     f40:	40 f0       	brcs	.+16     	; 0xf52 <__divsf3+0x24>
     f42:	29 f4       	brne	.+10     	; 0xf4e <__divsf3+0x20>
     f44:	5f 3f       	cpi	r21, 0xFF	; 255
     f46:	29 f0       	breq	.+10     	; 0xf52 <__divsf3+0x24>
     f48:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__fp_inf>
     f4c:	51 11       	cpse	r21, r1
     f4e:	0c 94 a7 08 	jmp	0x114e	; 0x114e <__fp_szero>
     f52:	0c 94 62 08 	jmp	0x10c4	; 0x10c4 <__fp_nan>

00000f56 <__divsf3x>:
     f56:	0e 94 84 08 	call	0x1108	; 0x1108 <__fp_split3>
     f5a:	68 f3       	brcs	.-38     	; 0xf36 <__divsf3+0x8>

00000f5c <__divsf3_pse>:
     f5c:	99 23       	and	r25, r25
     f5e:	b1 f3       	breq	.-20     	; 0xf4c <__divsf3+0x1e>
     f60:	55 23       	and	r21, r21
     f62:	91 f3       	breq	.-28     	; 0xf48 <__divsf3+0x1a>
     f64:	95 1b       	sub	r25, r21
     f66:	55 0b       	sbc	r21, r21
     f68:	bb 27       	eor	r27, r27
     f6a:	aa 27       	eor	r26, r26
     f6c:	62 17       	cp	r22, r18
     f6e:	73 07       	cpc	r23, r19
     f70:	84 07       	cpc	r24, r20
     f72:	38 f0       	brcs	.+14     	; 0xf82 <__divsf3_pse+0x26>
     f74:	9f 5f       	subi	r25, 0xFF	; 255
     f76:	5f 4f       	sbci	r21, 0xFF	; 255
     f78:	22 0f       	add	r18, r18
     f7a:	33 1f       	adc	r19, r19
     f7c:	44 1f       	adc	r20, r20
     f7e:	aa 1f       	adc	r26, r26
     f80:	a9 f3       	breq	.-22     	; 0xf6c <__divsf3_pse+0x10>
     f82:	35 d0       	rcall	.+106    	; 0xfee <__divsf3_pse+0x92>
     f84:	0e 2e       	mov	r0, r30
     f86:	3a f0       	brmi	.+14     	; 0xf96 <__divsf3_pse+0x3a>
     f88:	e0 e8       	ldi	r30, 0x80	; 128
     f8a:	32 d0       	rcall	.+100    	; 0xff0 <__divsf3_pse+0x94>
     f8c:	91 50       	subi	r25, 0x01	; 1
     f8e:	50 40       	sbci	r21, 0x00	; 0
     f90:	e6 95       	lsr	r30
     f92:	00 1c       	adc	r0, r0
     f94:	ca f7       	brpl	.-14     	; 0xf88 <__divsf3_pse+0x2c>
     f96:	2b d0       	rcall	.+86     	; 0xfee <__divsf3_pse+0x92>
     f98:	fe 2f       	mov	r31, r30
     f9a:	29 d0       	rcall	.+82     	; 0xfee <__divsf3_pse+0x92>
     f9c:	66 0f       	add	r22, r22
     f9e:	77 1f       	adc	r23, r23
     fa0:	88 1f       	adc	r24, r24
     fa2:	bb 1f       	adc	r27, r27
     fa4:	26 17       	cp	r18, r22
     fa6:	37 07       	cpc	r19, r23
     fa8:	48 07       	cpc	r20, r24
     faa:	ab 07       	cpc	r26, r27
     fac:	b0 e8       	ldi	r27, 0x80	; 128
     fae:	09 f0       	breq	.+2      	; 0xfb2 <__divsf3_pse+0x56>
     fb0:	bb 0b       	sbc	r27, r27
     fb2:	80 2d       	mov	r24, r0
     fb4:	bf 01       	movw	r22, r30
     fb6:	ff 27       	eor	r31, r31
     fb8:	93 58       	subi	r25, 0x83	; 131
     fba:	5f 4f       	sbci	r21, 0xFF	; 255
     fbc:	3a f0       	brmi	.+14     	; 0xfcc <__divsf3_pse+0x70>
     fbe:	9e 3f       	cpi	r25, 0xFE	; 254
     fc0:	51 05       	cpc	r21, r1
     fc2:	78 f0       	brcs	.+30     	; 0xfe2 <__divsf3_pse+0x86>
     fc4:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__fp_inf>
     fc8:	0c 94 a7 08 	jmp	0x114e	; 0x114e <__fp_szero>
     fcc:	5f 3f       	cpi	r21, 0xFF	; 255
     fce:	e4 f3       	brlt	.-8      	; 0xfc8 <__divsf3_pse+0x6c>
     fd0:	98 3e       	cpi	r25, 0xE8	; 232
     fd2:	d4 f3       	brlt	.-12     	; 0xfc8 <__divsf3_pse+0x6c>
     fd4:	86 95       	lsr	r24
     fd6:	77 95       	ror	r23
     fd8:	67 95       	ror	r22
     fda:	b7 95       	ror	r27
     fdc:	f7 95       	ror	r31
     fde:	9f 5f       	subi	r25, 0xFF	; 255
     fe0:	c9 f7       	brne	.-14     	; 0xfd4 <__divsf3_pse+0x78>
     fe2:	88 0f       	add	r24, r24
     fe4:	91 1d       	adc	r25, r1
     fe6:	96 95       	lsr	r25
     fe8:	87 95       	ror	r24
     fea:	97 f9       	bld	r25, 7
     fec:	08 95       	ret
     fee:	e1 e0       	ldi	r30, 0x01	; 1
     ff0:	66 0f       	add	r22, r22
     ff2:	77 1f       	adc	r23, r23
     ff4:	88 1f       	adc	r24, r24
     ff6:	bb 1f       	adc	r27, r27
     ff8:	62 17       	cp	r22, r18
     ffa:	73 07       	cpc	r23, r19
     ffc:	84 07       	cpc	r24, r20
     ffe:	ba 07       	cpc	r27, r26
    1000:	20 f0       	brcs	.+8      	; 0x100a <__divsf3_pse+0xae>
    1002:	62 1b       	sub	r22, r18
    1004:	73 0b       	sbc	r23, r19
    1006:	84 0b       	sbc	r24, r20
    1008:	ba 0b       	sbc	r27, r26
    100a:	ee 1f       	adc	r30, r30
    100c:	88 f7       	brcc	.-30     	; 0xff0 <__divsf3_pse+0x94>
    100e:	e0 95       	com	r30
    1010:	08 95       	ret

00001012 <__fixunssfsi>:
    1012:	0e 94 8c 08 	call	0x1118	; 0x1118 <__fp_splitA>
    1016:	88 f0       	brcs	.+34     	; 0x103a <__fixunssfsi+0x28>
    1018:	9f 57       	subi	r25, 0x7F	; 127
    101a:	98 f0       	brcs	.+38     	; 0x1042 <__fixunssfsi+0x30>
    101c:	b9 2f       	mov	r27, r25
    101e:	99 27       	eor	r25, r25
    1020:	b7 51       	subi	r27, 0x17	; 23
    1022:	b0 f0       	brcs	.+44     	; 0x1050 <__fixunssfsi+0x3e>
    1024:	e1 f0       	breq	.+56     	; 0x105e <__fixunssfsi+0x4c>
    1026:	66 0f       	add	r22, r22
    1028:	77 1f       	adc	r23, r23
    102a:	88 1f       	adc	r24, r24
    102c:	99 1f       	adc	r25, r25
    102e:	1a f0       	brmi	.+6      	; 0x1036 <__fixunssfsi+0x24>
    1030:	ba 95       	dec	r27
    1032:	c9 f7       	brne	.-14     	; 0x1026 <__fixunssfsi+0x14>
    1034:	14 c0       	rjmp	.+40     	; 0x105e <__fixunssfsi+0x4c>
    1036:	b1 30       	cpi	r27, 0x01	; 1
    1038:	91 f0       	breq	.+36     	; 0x105e <__fixunssfsi+0x4c>
    103a:	0e 94 a6 08 	call	0x114c	; 0x114c <__fp_zero>
    103e:	b1 e0       	ldi	r27, 0x01	; 1
    1040:	08 95       	ret
    1042:	0c 94 a6 08 	jmp	0x114c	; 0x114c <__fp_zero>
    1046:	67 2f       	mov	r22, r23
    1048:	78 2f       	mov	r23, r24
    104a:	88 27       	eor	r24, r24
    104c:	b8 5f       	subi	r27, 0xF8	; 248
    104e:	39 f0       	breq	.+14     	; 0x105e <__fixunssfsi+0x4c>
    1050:	b9 3f       	cpi	r27, 0xF9	; 249
    1052:	cc f3       	brlt	.-14     	; 0x1046 <__fixunssfsi+0x34>
    1054:	86 95       	lsr	r24
    1056:	77 95       	ror	r23
    1058:	67 95       	ror	r22
    105a:	b3 95       	inc	r27
    105c:	d9 f7       	brne	.-10     	; 0x1054 <__fixunssfsi+0x42>
    105e:	3e f4       	brtc	.+14     	; 0x106e <__fixunssfsi+0x5c>
    1060:	90 95       	com	r25
    1062:	80 95       	com	r24
    1064:	70 95       	com	r23
    1066:	61 95       	neg	r22
    1068:	7f 4f       	sbci	r23, 0xFF	; 255
    106a:	8f 4f       	sbci	r24, 0xFF	; 255
    106c:	9f 4f       	sbci	r25, 0xFF	; 255
    106e:	08 95       	ret

00001070 <__fp_cmp>:
    1070:	99 0f       	add	r25, r25
    1072:	00 08       	sbc	r0, r0
    1074:	55 0f       	add	r21, r21
    1076:	aa 0b       	sbc	r26, r26
    1078:	e0 e8       	ldi	r30, 0x80	; 128
    107a:	fe ef       	ldi	r31, 0xFE	; 254
    107c:	16 16       	cp	r1, r22
    107e:	17 06       	cpc	r1, r23
    1080:	e8 07       	cpc	r30, r24
    1082:	f9 07       	cpc	r31, r25
    1084:	c0 f0       	brcs	.+48     	; 0x10b6 <__fp_cmp+0x46>
    1086:	12 16       	cp	r1, r18
    1088:	13 06       	cpc	r1, r19
    108a:	e4 07       	cpc	r30, r20
    108c:	f5 07       	cpc	r31, r21
    108e:	98 f0       	brcs	.+38     	; 0x10b6 <__fp_cmp+0x46>
    1090:	62 1b       	sub	r22, r18
    1092:	73 0b       	sbc	r23, r19
    1094:	84 0b       	sbc	r24, r20
    1096:	95 0b       	sbc	r25, r21
    1098:	39 f4       	brne	.+14     	; 0x10a8 <__fp_cmp+0x38>
    109a:	0a 26       	eor	r0, r26
    109c:	61 f0       	breq	.+24     	; 0x10b6 <__fp_cmp+0x46>
    109e:	23 2b       	or	r18, r19
    10a0:	24 2b       	or	r18, r20
    10a2:	25 2b       	or	r18, r21
    10a4:	21 f4       	brne	.+8      	; 0x10ae <__fp_cmp+0x3e>
    10a6:	08 95       	ret
    10a8:	0a 26       	eor	r0, r26
    10aa:	09 f4       	brne	.+2      	; 0x10ae <__fp_cmp+0x3e>
    10ac:	a1 40       	sbci	r26, 0x01	; 1
    10ae:	a6 95       	lsr	r26
    10b0:	8f ef       	ldi	r24, 0xFF	; 255
    10b2:	81 1d       	adc	r24, r1
    10b4:	81 1d       	adc	r24, r1
    10b6:	08 95       	ret

000010b8 <__fp_inf>:
    10b8:	97 f9       	bld	r25, 7
    10ba:	9f 67       	ori	r25, 0x7F	; 127
    10bc:	80 e8       	ldi	r24, 0x80	; 128
    10be:	70 e0       	ldi	r23, 0x00	; 0
    10c0:	60 e0       	ldi	r22, 0x00	; 0
    10c2:	08 95       	ret

000010c4 <__fp_nan>:
    10c4:	9f ef       	ldi	r25, 0xFF	; 255
    10c6:	80 ec       	ldi	r24, 0xC0	; 192
    10c8:	08 95       	ret

000010ca <__fp_pscA>:
    10ca:	00 24       	eor	r0, r0
    10cc:	0a 94       	dec	r0
    10ce:	16 16       	cp	r1, r22
    10d0:	17 06       	cpc	r1, r23
    10d2:	18 06       	cpc	r1, r24
    10d4:	09 06       	cpc	r0, r25
    10d6:	08 95       	ret

000010d8 <__fp_pscB>:
    10d8:	00 24       	eor	r0, r0
    10da:	0a 94       	dec	r0
    10dc:	12 16       	cp	r1, r18
    10de:	13 06       	cpc	r1, r19
    10e0:	14 06       	cpc	r1, r20
    10e2:	05 06       	cpc	r0, r21
    10e4:	08 95       	ret

000010e6 <__fp_round>:
    10e6:	09 2e       	mov	r0, r25
    10e8:	03 94       	inc	r0
    10ea:	00 0c       	add	r0, r0
    10ec:	11 f4       	brne	.+4      	; 0x10f2 <__fp_round+0xc>
    10ee:	88 23       	and	r24, r24
    10f0:	52 f0       	brmi	.+20     	; 0x1106 <__fp_round+0x20>
    10f2:	bb 0f       	add	r27, r27
    10f4:	40 f4       	brcc	.+16     	; 0x1106 <__fp_round+0x20>
    10f6:	bf 2b       	or	r27, r31
    10f8:	11 f4       	brne	.+4      	; 0x10fe <__fp_round+0x18>
    10fa:	60 ff       	sbrs	r22, 0
    10fc:	04 c0       	rjmp	.+8      	; 0x1106 <__fp_round+0x20>
    10fe:	6f 5f       	subi	r22, 0xFF	; 255
    1100:	7f 4f       	sbci	r23, 0xFF	; 255
    1102:	8f 4f       	sbci	r24, 0xFF	; 255
    1104:	9f 4f       	sbci	r25, 0xFF	; 255
    1106:	08 95       	ret

00001108 <__fp_split3>:
    1108:	57 fd       	sbrc	r21, 7
    110a:	90 58       	subi	r25, 0x80	; 128
    110c:	44 0f       	add	r20, r20
    110e:	55 1f       	adc	r21, r21
    1110:	59 f0       	breq	.+22     	; 0x1128 <__fp_splitA+0x10>
    1112:	5f 3f       	cpi	r21, 0xFF	; 255
    1114:	71 f0       	breq	.+28     	; 0x1132 <__fp_splitA+0x1a>
    1116:	47 95       	ror	r20

00001118 <__fp_splitA>:
    1118:	88 0f       	add	r24, r24
    111a:	97 fb       	bst	r25, 7
    111c:	99 1f       	adc	r25, r25
    111e:	61 f0       	breq	.+24     	; 0x1138 <__fp_splitA+0x20>
    1120:	9f 3f       	cpi	r25, 0xFF	; 255
    1122:	79 f0       	breq	.+30     	; 0x1142 <__fp_splitA+0x2a>
    1124:	87 95       	ror	r24
    1126:	08 95       	ret
    1128:	12 16       	cp	r1, r18
    112a:	13 06       	cpc	r1, r19
    112c:	14 06       	cpc	r1, r20
    112e:	55 1f       	adc	r21, r21
    1130:	f2 cf       	rjmp	.-28     	; 0x1116 <__fp_split3+0xe>
    1132:	46 95       	lsr	r20
    1134:	f1 df       	rcall	.-30     	; 0x1118 <__fp_splitA>
    1136:	08 c0       	rjmp	.+16     	; 0x1148 <__fp_splitA+0x30>
    1138:	16 16       	cp	r1, r22
    113a:	17 06       	cpc	r1, r23
    113c:	18 06       	cpc	r1, r24
    113e:	99 1f       	adc	r25, r25
    1140:	f1 cf       	rjmp	.-30     	; 0x1124 <__fp_splitA+0xc>
    1142:	86 95       	lsr	r24
    1144:	71 05       	cpc	r23, r1
    1146:	61 05       	cpc	r22, r1
    1148:	08 94       	sec
    114a:	08 95       	ret

0000114c <__fp_zero>:
    114c:	e8 94       	clt

0000114e <__fp_szero>:
    114e:	bb 27       	eor	r27, r27
    1150:	66 27       	eor	r22, r22
    1152:	77 27       	eor	r23, r23
    1154:	cb 01       	movw	r24, r22
    1156:	97 f9       	bld	r25, 7
    1158:	08 95       	ret

0000115a <__gesf2>:
    115a:	0e 94 38 08 	call	0x1070	; 0x1070 <__fp_cmp>
    115e:	08 f4       	brcc	.+2      	; 0x1162 <__gesf2+0x8>
    1160:	8f ef       	ldi	r24, 0xFF	; 255
    1162:	08 95       	ret

00001164 <__mulsf3>:
    1164:	0e 94 c5 08 	call	0x118a	; 0x118a <__mulsf3x>
    1168:	0c 94 73 08 	jmp	0x10e6	; 0x10e6 <__fp_round>
    116c:	0e 94 65 08 	call	0x10ca	; 0x10ca <__fp_pscA>
    1170:	38 f0       	brcs	.+14     	; 0x1180 <__mulsf3+0x1c>
    1172:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <__fp_pscB>
    1176:	20 f0       	brcs	.+8      	; 0x1180 <__mulsf3+0x1c>
    1178:	95 23       	and	r25, r21
    117a:	11 f0       	breq	.+4      	; 0x1180 <__mulsf3+0x1c>
    117c:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__fp_inf>
    1180:	0c 94 62 08 	jmp	0x10c4	; 0x10c4 <__fp_nan>
    1184:	11 24       	eor	r1, r1
    1186:	0c 94 a7 08 	jmp	0x114e	; 0x114e <__fp_szero>

0000118a <__mulsf3x>:
    118a:	0e 94 84 08 	call	0x1108	; 0x1108 <__fp_split3>
    118e:	70 f3       	brcs	.-36     	; 0x116c <__mulsf3+0x8>

00001190 <__mulsf3_pse>:
    1190:	95 9f       	mul	r25, r21
    1192:	c1 f3       	breq	.-16     	; 0x1184 <__mulsf3+0x20>
    1194:	95 0f       	add	r25, r21
    1196:	50 e0       	ldi	r21, 0x00	; 0
    1198:	55 1f       	adc	r21, r21
    119a:	62 9f       	mul	r22, r18
    119c:	f0 01       	movw	r30, r0
    119e:	72 9f       	mul	r23, r18
    11a0:	bb 27       	eor	r27, r27
    11a2:	f0 0d       	add	r31, r0
    11a4:	b1 1d       	adc	r27, r1
    11a6:	63 9f       	mul	r22, r19
    11a8:	aa 27       	eor	r26, r26
    11aa:	f0 0d       	add	r31, r0
    11ac:	b1 1d       	adc	r27, r1
    11ae:	aa 1f       	adc	r26, r26
    11b0:	64 9f       	mul	r22, r20
    11b2:	66 27       	eor	r22, r22
    11b4:	b0 0d       	add	r27, r0
    11b6:	a1 1d       	adc	r26, r1
    11b8:	66 1f       	adc	r22, r22
    11ba:	82 9f       	mul	r24, r18
    11bc:	22 27       	eor	r18, r18
    11be:	b0 0d       	add	r27, r0
    11c0:	a1 1d       	adc	r26, r1
    11c2:	62 1f       	adc	r22, r18
    11c4:	73 9f       	mul	r23, r19
    11c6:	b0 0d       	add	r27, r0
    11c8:	a1 1d       	adc	r26, r1
    11ca:	62 1f       	adc	r22, r18
    11cc:	83 9f       	mul	r24, r19
    11ce:	a0 0d       	add	r26, r0
    11d0:	61 1d       	adc	r22, r1
    11d2:	22 1f       	adc	r18, r18
    11d4:	74 9f       	mul	r23, r20
    11d6:	33 27       	eor	r19, r19
    11d8:	a0 0d       	add	r26, r0
    11da:	61 1d       	adc	r22, r1
    11dc:	23 1f       	adc	r18, r19
    11de:	84 9f       	mul	r24, r20
    11e0:	60 0d       	add	r22, r0
    11e2:	21 1d       	adc	r18, r1
    11e4:	82 2f       	mov	r24, r18
    11e6:	76 2f       	mov	r23, r22
    11e8:	6a 2f       	mov	r22, r26
    11ea:	11 24       	eor	r1, r1
    11ec:	9f 57       	subi	r25, 0x7F	; 127
    11ee:	50 40       	sbci	r21, 0x00	; 0
    11f0:	9a f0       	brmi	.+38     	; 0x1218 <__mulsf3_pse+0x88>
    11f2:	f1 f0       	breq	.+60     	; 0x1230 <__mulsf3_pse+0xa0>
    11f4:	88 23       	and	r24, r24
    11f6:	4a f0       	brmi	.+18     	; 0x120a <__mulsf3_pse+0x7a>
    11f8:	ee 0f       	add	r30, r30
    11fa:	ff 1f       	adc	r31, r31
    11fc:	bb 1f       	adc	r27, r27
    11fe:	66 1f       	adc	r22, r22
    1200:	77 1f       	adc	r23, r23
    1202:	88 1f       	adc	r24, r24
    1204:	91 50       	subi	r25, 0x01	; 1
    1206:	50 40       	sbci	r21, 0x00	; 0
    1208:	a9 f7       	brne	.-22     	; 0x11f4 <__mulsf3_pse+0x64>
    120a:	9e 3f       	cpi	r25, 0xFE	; 254
    120c:	51 05       	cpc	r21, r1
    120e:	80 f0       	brcs	.+32     	; 0x1230 <__mulsf3_pse+0xa0>
    1210:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__fp_inf>
    1214:	0c 94 a7 08 	jmp	0x114e	; 0x114e <__fp_szero>
    1218:	5f 3f       	cpi	r21, 0xFF	; 255
    121a:	e4 f3       	brlt	.-8      	; 0x1214 <__mulsf3_pse+0x84>
    121c:	98 3e       	cpi	r25, 0xE8	; 232
    121e:	d4 f3       	brlt	.-12     	; 0x1214 <__mulsf3_pse+0x84>
    1220:	86 95       	lsr	r24
    1222:	77 95       	ror	r23
    1224:	67 95       	ror	r22
    1226:	b7 95       	ror	r27
    1228:	f7 95       	ror	r31
    122a:	e7 95       	ror	r30
    122c:	9f 5f       	subi	r25, 0xFF	; 255
    122e:	c1 f7       	brne	.-16     	; 0x1220 <__mulsf3_pse+0x90>
    1230:	fe 2b       	or	r31, r30
    1232:	88 0f       	add	r24, r24
    1234:	91 1d       	adc	r25, r1
    1236:	96 95       	lsr	r25
    1238:	87 95       	ror	r24
    123a:	97 f9       	bld	r25, 7
    123c:	08 95       	ret

0000123e <printf>:
    123e:	a0 e0       	ldi	r26, 0x00	; 0
    1240:	b0 e0       	ldi	r27, 0x00	; 0
    1242:	e5 e2       	ldi	r30, 0x25	; 37
    1244:	f9 e0       	ldi	r31, 0x09	; 9
    1246:	0c 94 d6 0b 	jmp	0x17ac	; 0x17ac <__prologue_saves__+0x20>
    124a:	ae 01       	movw	r20, r28
    124c:	4b 5f       	subi	r20, 0xFB	; 251
    124e:	5f 4f       	sbci	r21, 0xFF	; 255
    1250:	fa 01       	movw	r30, r20
    1252:	61 91       	ld	r22, Z+
    1254:	71 91       	ld	r23, Z+
    1256:	af 01       	movw	r20, r30
    1258:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <__iob+0x2>
    125c:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <__iob+0x3>
    1260:	0e 94 35 09 	call	0x126a	; 0x126a <vfprintf>
    1264:	e2 e0       	ldi	r30, 0x02	; 2
    1266:	0c 94 f2 0b 	jmp	0x17e4	; 0x17e4 <__epilogue_restores__+0x20>

0000126a <vfprintf>:
    126a:	ab e0       	ldi	r26, 0x0B	; 11
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	eb e3       	ldi	r30, 0x3B	; 59
    1270:	f9 e0       	ldi	r31, 0x09	; 9
    1272:	0c 94 c6 0b 	jmp	0x178c	; 0x178c <__prologue_saves__>
    1276:	6c 01       	movw	r12, r24
    1278:	7b 01       	movw	r14, r22
    127a:	8a 01       	movw	r16, r20
    127c:	fc 01       	movw	r30, r24
    127e:	17 82       	std	Z+7, r1	; 0x07
    1280:	16 82       	std	Z+6, r1	; 0x06
    1282:	83 81       	ldd	r24, Z+3	; 0x03
    1284:	81 ff       	sbrs	r24, 1
    1286:	cc c1       	rjmp	.+920    	; 0x1620 <vfprintf+0x3b6>
    1288:	ce 01       	movw	r24, r28
    128a:	01 96       	adiw	r24, 0x01	; 1
    128c:	3c 01       	movw	r6, r24
    128e:	f6 01       	movw	r30, r12
    1290:	93 81       	ldd	r25, Z+3	; 0x03
    1292:	f7 01       	movw	r30, r14
    1294:	93 fd       	sbrc	r25, 3
    1296:	85 91       	lpm	r24, Z+
    1298:	93 ff       	sbrs	r25, 3
    129a:	81 91       	ld	r24, Z+
    129c:	7f 01       	movw	r14, r30
    129e:	88 23       	and	r24, r24
    12a0:	09 f4       	brne	.+2      	; 0x12a4 <vfprintf+0x3a>
    12a2:	ba c1       	rjmp	.+884    	; 0x1618 <vfprintf+0x3ae>
    12a4:	85 32       	cpi	r24, 0x25	; 37
    12a6:	39 f4       	brne	.+14     	; 0x12b6 <vfprintf+0x4c>
    12a8:	93 fd       	sbrc	r25, 3
    12aa:	85 91       	lpm	r24, Z+
    12ac:	93 ff       	sbrs	r25, 3
    12ae:	81 91       	ld	r24, Z+
    12b0:	7f 01       	movw	r14, r30
    12b2:	85 32       	cpi	r24, 0x25	; 37
    12b4:	29 f4       	brne	.+10     	; 0x12c0 <vfprintf+0x56>
    12b6:	b6 01       	movw	r22, r12
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	0e 94 2c 0b 	call	0x1658	; 0x1658 <fputc>
    12be:	e7 cf       	rjmp	.-50     	; 0x128e <vfprintf+0x24>
    12c0:	91 2c       	mov	r9, r1
    12c2:	21 2c       	mov	r2, r1
    12c4:	31 2c       	mov	r3, r1
    12c6:	ff e1       	ldi	r31, 0x1F	; 31
    12c8:	f3 15       	cp	r31, r3
    12ca:	d8 f0       	brcs	.+54     	; 0x1302 <vfprintf+0x98>
    12cc:	8b 32       	cpi	r24, 0x2B	; 43
    12ce:	79 f0       	breq	.+30     	; 0x12ee <vfprintf+0x84>
    12d0:	38 f4       	brcc	.+14     	; 0x12e0 <vfprintf+0x76>
    12d2:	80 32       	cpi	r24, 0x20	; 32
    12d4:	79 f0       	breq	.+30     	; 0x12f4 <vfprintf+0x8a>
    12d6:	83 32       	cpi	r24, 0x23	; 35
    12d8:	a1 f4       	brne	.+40     	; 0x1302 <vfprintf+0x98>
    12da:	23 2d       	mov	r18, r3
    12dc:	20 61       	ori	r18, 0x10	; 16
    12de:	1d c0       	rjmp	.+58     	; 0x131a <vfprintf+0xb0>
    12e0:	8d 32       	cpi	r24, 0x2D	; 45
    12e2:	61 f0       	breq	.+24     	; 0x12fc <vfprintf+0x92>
    12e4:	80 33       	cpi	r24, 0x30	; 48
    12e6:	69 f4       	brne	.+26     	; 0x1302 <vfprintf+0x98>
    12e8:	23 2d       	mov	r18, r3
    12ea:	21 60       	ori	r18, 0x01	; 1
    12ec:	16 c0       	rjmp	.+44     	; 0x131a <vfprintf+0xb0>
    12ee:	83 2d       	mov	r24, r3
    12f0:	82 60       	ori	r24, 0x02	; 2
    12f2:	38 2e       	mov	r3, r24
    12f4:	e3 2d       	mov	r30, r3
    12f6:	e4 60       	ori	r30, 0x04	; 4
    12f8:	3e 2e       	mov	r3, r30
    12fa:	2a c0       	rjmp	.+84     	; 0x1350 <vfprintf+0xe6>
    12fc:	f3 2d       	mov	r31, r3
    12fe:	f8 60       	ori	r31, 0x08	; 8
    1300:	1d c0       	rjmp	.+58     	; 0x133c <vfprintf+0xd2>
    1302:	37 fc       	sbrc	r3, 7
    1304:	2d c0       	rjmp	.+90     	; 0x1360 <vfprintf+0xf6>
    1306:	20 ed       	ldi	r18, 0xD0	; 208
    1308:	28 0f       	add	r18, r24
    130a:	2a 30       	cpi	r18, 0x0A	; 10
    130c:	40 f0       	brcs	.+16     	; 0x131e <vfprintf+0xb4>
    130e:	8e 32       	cpi	r24, 0x2E	; 46
    1310:	b9 f4       	brne	.+46     	; 0x1340 <vfprintf+0xd6>
    1312:	36 fc       	sbrc	r3, 6
    1314:	81 c1       	rjmp	.+770    	; 0x1618 <vfprintf+0x3ae>
    1316:	23 2d       	mov	r18, r3
    1318:	20 64       	ori	r18, 0x40	; 64
    131a:	32 2e       	mov	r3, r18
    131c:	19 c0       	rjmp	.+50     	; 0x1350 <vfprintf+0xe6>
    131e:	36 fe       	sbrs	r3, 6
    1320:	06 c0       	rjmp	.+12     	; 0x132e <vfprintf+0xc4>
    1322:	8a e0       	ldi	r24, 0x0A	; 10
    1324:	98 9e       	mul	r9, r24
    1326:	20 0d       	add	r18, r0
    1328:	11 24       	eor	r1, r1
    132a:	92 2e       	mov	r9, r18
    132c:	11 c0       	rjmp	.+34     	; 0x1350 <vfprintf+0xe6>
    132e:	ea e0       	ldi	r30, 0x0A	; 10
    1330:	2e 9e       	mul	r2, r30
    1332:	20 0d       	add	r18, r0
    1334:	11 24       	eor	r1, r1
    1336:	22 2e       	mov	r2, r18
    1338:	f3 2d       	mov	r31, r3
    133a:	f0 62       	ori	r31, 0x20	; 32
    133c:	3f 2e       	mov	r3, r31
    133e:	08 c0       	rjmp	.+16     	; 0x1350 <vfprintf+0xe6>
    1340:	8c 36       	cpi	r24, 0x6C	; 108
    1342:	21 f4       	brne	.+8      	; 0x134c <vfprintf+0xe2>
    1344:	83 2d       	mov	r24, r3
    1346:	80 68       	ori	r24, 0x80	; 128
    1348:	38 2e       	mov	r3, r24
    134a:	02 c0       	rjmp	.+4      	; 0x1350 <vfprintf+0xe6>
    134c:	88 36       	cpi	r24, 0x68	; 104
    134e:	41 f4       	brne	.+16     	; 0x1360 <vfprintf+0xf6>
    1350:	f7 01       	movw	r30, r14
    1352:	93 fd       	sbrc	r25, 3
    1354:	85 91       	lpm	r24, Z+
    1356:	93 ff       	sbrs	r25, 3
    1358:	81 91       	ld	r24, Z+
    135a:	7f 01       	movw	r14, r30
    135c:	81 11       	cpse	r24, r1
    135e:	b3 cf       	rjmp	.-154    	; 0x12c6 <vfprintf+0x5c>
    1360:	98 2f       	mov	r25, r24
    1362:	9f 7d       	andi	r25, 0xDF	; 223
    1364:	95 54       	subi	r25, 0x45	; 69
    1366:	93 30       	cpi	r25, 0x03	; 3
    1368:	28 f4       	brcc	.+10     	; 0x1374 <vfprintf+0x10a>
    136a:	0c 5f       	subi	r16, 0xFC	; 252
    136c:	1f 4f       	sbci	r17, 0xFF	; 255
    136e:	9f e3       	ldi	r25, 0x3F	; 63
    1370:	99 83       	std	Y+1, r25	; 0x01
    1372:	0d c0       	rjmp	.+26     	; 0x138e <vfprintf+0x124>
    1374:	83 36       	cpi	r24, 0x63	; 99
    1376:	31 f0       	breq	.+12     	; 0x1384 <vfprintf+0x11a>
    1378:	83 37       	cpi	r24, 0x73	; 115
    137a:	71 f0       	breq	.+28     	; 0x1398 <vfprintf+0x12e>
    137c:	83 35       	cpi	r24, 0x53	; 83
    137e:	09 f0       	breq	.+2      	; 0x1382 <vfprintf+0x118>
    1380:	59 c0       	rjmp	.+178    	; 0x1434 <vfprintf+0x1ca>
    1382:	21 c0       	rjmp	.+66     	; 0x13c6 <vfprintf+0x15c>
    1384:	f8 01       	movw	r30, r16
    1386:	80 81       	ld	r24, Z
    1388:	89 83       	std	Y+1, r24	; 0x01
    138a:	0e 5f       	subi	r16, 0xFE	; 254
    138c:	1f 4f       	sbci	r17, 0xFF	; 255
    138e:	88 24       	eor	r8, r8
    1390:	83 94       	inc	r8
    1392:	91 2c       	mov	r9, r1
    1394:	53 01       	movw	r10, r6
    1396:	13 c0       	rjmp	.+38     	; 0x13be <vfprintf+0x154>
    1398:	28 01       	movw	r4, r16
    139a:	f2 e0       	ldi	r31, 0x02	; 2
    139c:	4f 0e       	add	r4, r31
    139e:	51 1c       	adc	r5, r1
    13a0:	f8 01       	movw	r30, r16
    13a2:	a0 80       	ld	r10, Z
    13a4:	b1 80       	ldd	r11, Z+1	; 0x01
    13a6:	36 fe       	sbrs	r3, 6
    13a8:	03 c0       	rjmp	.+6      	; 0x13b0 <vfprintf+0x146>
    13aa:	69 2d       	mov	r22, r9
    13ac:	70 e0       	ldi	r23, 0x00	; 0
    13ae:	02 c0       	rjmp	.+4      	; 0x13b4 <vfprintf+0x14a>
    13b0:	6f ef       	ldi	r22, 0xFF	; 255
    13b2:	7f ef       	ldi	r23, 0xFF	; 255
    13b4:	c5 01       	movw	r24, r10
    13b6:	0e 94 21 0b 	call	0x1642	; 0x1642 <strnlen>
    13ba:	4c 01       	movw	r8, r24
    13bc:	82 01       	movw	r16, r4
    13be:	f3 2d       	mov	r31, r3
    13c0:	ff 77       	andi	r31, 0x7F	; 127
    13c2:	3f 2e       	mov	r3, r31
    13c4:	16 c0       	rjmp	.+44     	; 0x13f2 <vfprintf+0x188>
    13c6:	28 01       	movw	r4, r16
    13c8:	22 e0       	ldi	r18, 0x02	; 2
    13ca:	42 0e       	add	r4, r18
    13cc:	51 1c       	adc	r5, r1
    13ce:	f8 01       	movw	r30, r16
    13d0:	a0 80       	ld	r10, Z
    13d2:	b1 80       	ldd	r11, Z+1	; 0x01
    13d4:	36 fe       	sbrs	r3, 6
    13d6:	03 c0       	rjmp	.+6      	; 0x13de <vfprintf+0x174>
    13d8:	69 2d       	mov	r22, r9
    13da:	70 e0       	ldi	r23, 0x00	; 0
    13dc:	02 c0       	rjmp	.+4      	; 0x13e2 <vfprintf+0x178>
    13de:	6f ef       	ldi	r22, 0xFF	; 255
    13e0:	7f ef       	ldi	r23, 0xFF	; 255
    13e2:	c5 01       	movw	r24, r10
    13e4:	0e 94 16 0b 	call	0x162c	; 0x162c <strnlen_P>
    13e8:	4c 01       	movw	r8, r24
    13ea:	f3 2d       	mov	r31, r3
    13ec:	f0 68       	ori	r31, 0x80	; 128
    13ee:	3f 2e       	mov	r3, r31
    13f0:	82 01       	movw	r16, r4
    13f2:	33 fc       	sbrc	r3, 3
    13f4:	1b c0       	rjmp	.+54     	; 0x142c <vfprintf+0x1c2>
    13f6:	82 2d       	mov	r24, r2
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	88 16       	cp	r8, r24
    13fc:	99 06       	cpc	r9, r25
    13fe:	b0 f4       	brcc	.+44     	; 0x142c <vfprintf+0x1c2>
    1400:	b6 01       	movw	r22, r12
    1402:	80 e2       	ldi	r24, 0x20	; 32
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	0e 94 2c 0b 	call	0x1658	; 0x1658 <fputc>
    140a:	2a 94       	dec	r2
    140c:	f4 cf       	rjmp	.-24     	; 0x13f6 <vfprintf+0x18c>
    140e:	f5 01       	movw	r30, r10
    1410:	37 fc       	sbrc	r3, 7
    1412:	85 91       	lpm	r24, Z+
    1414:	37 fe       	sbrs	r3, 7
    1416:	81 91       	ld	r24, Z+
    1418:	5f 01       	movw	r10, r30
    141a:	b6 01       	movw	r22, r12
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	0e 94 2c 0b 	call	0x1658	; 0x1658 <fputc>
    1422:	21 10       	cpse	r2, r1
    1424:	2a 94       	dec	r2
    1426:	21 e0       	ldi	r18, 0x01	; 1
    1428:	82 1a       	sub	r8, r18
    142a:	91 08       	sbc	r9, r1
    142c:	81 14       	cp	r8, r1
    142e:	91 04       	cpc	r9, r1
    1430:	71 f7       	brne	.-36     	; 0x140e <vfprintf+0x1a4>
    1432:	e8 c0       	rjmp	.+464    	; 0x1604 <vfprintf+0x39a>
    1434:	84 36       	cpi	r24, 0x64	; 100
    1436:	11 f0       	breq	.+4      	; 0x143c <vfprintf+0x1d2>
    1438:	89 36       	cpi	r24, 0x69	; 105
    143a:	41 f5       	brne	.+80     	; 0x148c <vfprintf+0x222>
    143c:	f8 01       	movw	r30, r16
    143e:	37 fe       	sbrs	r3, 7
    1440:	07 c0       	rjmp	.+14     	; 0x1450 <vfprintf+0x1e6>
    1442:	60 81       	ld	r22, Z
    1444:	71 81       	ldd	r23, Z+1	; 0x01
    1446:	82 81       	ldd	r24, Z+2	; 0x02
    1448:	93 81       	ldd	r25, Z+3	; 0x03
    144a:	0c 5f       	subi	r16, 0xFC	; 252
    144c:	1f 4f       	sbci	r17, 0xFF	; 255
    144e:	08 c0       	rjmp	.+16     	; 0x1460 <vfprintf+0x1f6>
    1450:	60 81       	ld	r22, Z
    1452:	71 81       	ldd	r23, Z+1	; 0x01
    1454:	07 2e       	mov	r0, r23
    1456:	00 0c       	add	r0, r0
    1458:	88 0b       	sbc	r24, r24
    145a:	99 0b       	sbc	r25, r25
    145c:	0e 5f       	subi	r16, 0xFE	; 254
    145e:	1f 4f       	sbci	r17, 0xFF	; 255
    1460:	f3 2d       	mov	r31, r3
    1462:	ff 76       	andi	r31, 0x6F	; 111
    1464:	3f 2e       	mov	r3, r31
    1466:	97 ff       	sbrs	r25, 7
    1468:	09 c0       	rjmp	.+18     	; 0x147c <vfprintf+0x212>
    146a:	90 95       	com	r25
    146c:	80 95       	com	r24
    146e:	70 95       	com	r23
    1470:	61 95       	neg	r22
    1472:	7f 4f       	sbci	r23, 0xFF	; 255
    1474:	8f 4f       	sbci	r24, 0xFF	; 255
    1476:	9f 4f       	sbci	r25, 0xFF	; 255
    1478:	f0 68       	ori	r31, 0x80	; 128
    147a:	3f 2e       	mov	r3, r31
    147c:	2a e0       	ldi	r18, 0x0A	; 10
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	a3 01       	movw	r20, r6
    1482:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__ultoa_invert>
    1486:	88 2e       	mov	r8, r24
    1488:	86 18       	sub	r8, r6
    148a:	45 c0       	rjmp	.+138    	; 0x1516 <vfprintf+0x2ac>
    148c:	85 37       	cpi	r24, 0x75	; 117
    148e:	31 f4       	brne	.+12     	; 0x149c <vfprintf+0x232>
    1490:	23 2d       	mov	r18, r3
    1492:	2f 7e       	andi	r18, 0xEF	; 239
    1494:	b2 2e       	mov	r11, r18
    1496:	2a e0       	ldi	r18, 0x0A	; 10
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	25 c0       	rjmp	.+74     	; 0x14e6 <vfprintf+0x27c>
    149c:	93 2d       	mov	r25, r3
    149e:	99 7f       	andi	r25, 0xF9	; 249
    14a0:	b9 2e       	mov	r11, r25
    14a2:	8f 36       	cpi	r24, 0x6F	; 111
    14a4:	c1 f0       	breq	.+48     	; 0x14d6 <vfprintf+0x26c>
    14a6:	18 f4       	brcc	.+6      	; 0x14ae <vfprintf+0x244>
    14a8:	88 35       	cpi	r24, 0x58	; 88
    14aa:	79 f0       	breq	.+30     	; 0x14ca <vfprintf+0x260>
    14ac:	b5 c0       	rjmp	.+362    	; 0x1618 <vfprintf+0x3ae>
    14ae:	80 37       	cpi	r24, 0x70	; 112
    14b0:	19 f0       	breq	.+6      	; 0x14b8 <vfprintf+0x24e>
    14b2:	88 37       	cpi	r24, 0x78	; 120
    14b4:	21 f0       	breq	.+8      	; 0x14be <vfprintf+0x254>
    14b6:	b0 c0       	rjmp	.+352    	; 0x1618 <vfprintf+0x3ae>
    14b8:	e9 2f       	mov	r30, r25
    14ba:	e0 61       	ori	r30, 0x10	; 16
    14bc:	be 2e       	mov	r11, r30
    14be:	b4 fe       	sbrs	r11, 4
    14c0:	0d c0       	rjmp	.+26     	; 0x14dc <vfprintf+0x272>
    14c2:	fb 2d       	mov	r31, r11
    14c4:	f4 60       	ori	r31, 0x04	; 4
    14c6:	bf 2e       	mov	r11, r31
    14c8:	09 c0       	rjmp	.+18     	; 0x14dc <vfprintf+0x272>
    14ca:	34 fe       	sbrs	r3, 4
    14cc:	0a c0       	rjmp	.+20     	; 0x14e2 <vfprintf+0x278>
    14ce:	29 2f       	mov	r18, r25
    14d0:	26 60       	ori	r18, 0x06	; 6
    14d2:	b2 2e       	mov	r11, r18
    14d4:	06 c0       	rjmp	.+12     	; 0x14e2 <vfprintf+0x278>
    14d6:	28 e0       	ldi	r18, 0x08	; 8
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	05 c0       	rjmp	.+10     	; 0x14e6 <vfprintf+0x27c>
    14dc:	20 e1       	ldi	r18, 0x10	; 16
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	02 c0       	rjmp	.+4      	; 0x14e6 <vfprintf+0x27c>
    14e2:	20 e1       	ldi	r18, 0x10	; 16
    14e4:	32 e0       	ldi	r19, 0x02	; 2
    14e6:	f8 01       	movw	r30, r16
    14e8:	b7 fe       	sbrs	r11, 7
    14ea:	07 c0       	rjmp	.+14     	; 0x14fa <vfprintf+0x290>
    14ec:	60 81       	ld	r22, Z
    14ee:	71 81       	ldd	r23, Z+1	; 0x01
    14f0:	82 81       	ldd	r24, Z+2	; 0x02
    14f2:	93 81       	ldd	r25, Z+3	; 0x03
    14f4:	0c 5f       	subi	r16, 0xFC	; 252
    14f6:	1f 4f       	sbci	r17, 0xFF	; 255
    14f8:	06 c0       	rjmp	.+12     	; 0x1506 <vfprintf+0x29c>
    14fa:	60 81       	ld	r22, Z
    14fc:	71 81       	ldd	r23, Z+1	; 0x01
    14fe:	80 e0       	ldi	r24, 0x00	; 0
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	0e 5f       	subi	r16, 0xFE	; 254
    1504:	1f 4f       	sbci	r17, 0xFF	; 255
    1506:	a3 01       	movw	r20, r6
    1508:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__ultoa_invert>
    150c:	88 2e       	mov	r8, r24
    150e:	86 18       	sub	r8, r6
    1510:	fb 2d       	mov	r31, r11
    1512:	ff 77       	andi	r31, 0x7F	; 127
    1514:	3f 2e       	mov	r3, r31
    1516:	36 fe       	sbrs	r3, 6
    1518:	0d c0       	rjmp	.+26     	; 0x1534 <vfprintf+0x2ca>
    151a:	23 2d       	mov	r18, r3
    151c:	2e 7f       	andi	r18, 0xFE	; 254
    151e:	a2 2e       	mov	r10, r18
    1520:	89 14       	cp	r8, r9
    1522:	58 f4       	brcc	.+22     	; 0x153a <vfprintf+0x2d0>
    1524:	34 fe       	sbrs	r3, 4
    1526:	0b c0       	rjmp	.+22     	; 0x153e <vfprintf+0x2d4>
    1528:	32 fc       	sbrc	r3, 2
    152a:	09 c0       	rjmp	.+18     	; 0x153e <vfprintf+0x2d4>
    152c:	83 2d       	mov	r24, r3
    152e:	8e 7e       	andi	r24, 0xEE	; 238
    1530:	a8 2e       	mov	r10, r24
    1532:	05 c0       	rjmp	.+10     	; 0x153e <vfprintf+0x2d4>
    1534:	b8 2c       	mov	r11, r8
    1536:	a3 2c       	mov	r10, r3
    1538:	03 c0       	rjmp	.+6      	; 0x1540 <vfprintf+0x2d6>
    153a:	b8 2c       	mov	r11, r8
    153c:	01 c0       	rjmp	.+2      	; 0x1540 <vfprintf+0x2d6>
    153e:	b9 2c       	mov	r11, r9
    1540:	a4 fe       	sbrs	r10, 4
    1542:	0f c0       	rjmp	.+30     	; 0x1562 <vfprintf+0x2f8>
    1544:	fe 01       	movw	r30, r28
    1546:	e8 0d       	add	r30, r8
    1548:	f1 1d       	adc	r31, r1
    154a:	80 81       	ld	r24, Z
    154c:	80 33       	cpi	r24, 0x30	; 48
    154e:	21 f4       	brne	.+8      	; 0x1558 <vfprintf+0x2ee>
    1550:	9a 2d       	mov	r25, r10
    1552:	99 7e       	andi	r25, 0xE9	; 233
    1554:	a9 2e       	mov	r10, r25
    1556:	09 c0       	rjmp	.+18     	; 0x156a <vfprintf+0x300>
    1558:	a2 fe       	sbrs	r10, 2
    155a:	06 c0       	rjmp	.+12     	; 0x1568 <vfprintf+0x2fe>
    155c:	b3 94       	inc	r11
    155e:	b3 94       	inc	r11
    1560:	04 c0       	rjmp	.+8      	; 0x156a <vfprintf+0x300>
    1562:	8a 2d       	mov	r24, r10
    1564:	86 78       	andi	r24, 0x86	; 134
    1566:	09 f0       	breq	.+2      	; 0x156a <vfprintf+0x300>
    1568:	b3 94       	inc	r11
    156a:	a3 fc       	sbrc	r10, 3
    156c:	11 c0       	rjmp	.+34     	; 0x1590 <vfprintf+0x326>
    156e:	a0 fe       	sbrs	r10, 0
    1570:	06 c0       	rjmp	.+12     	; 0x157e <vfprintf+0x314>
    1572:	b2 14       	cp	r11, r2
    1574:	88 f4       	brcc	.+34     	; 0x1598 <vfprintf+0x32e>
    1576:	28 0c       	add	r2, r8
    1578:	92 2c       	mov	r9, r2
    157a:	9b 18       	sub	r9, r11
    157c:	0e c0       	rjmp	.+28     	; 0x159a <vfprintf+0x330>
    157e:	b2 14       	cp	r11, r2
    1580:	60 f4       	brcc	.+24     	; 0x159a <vfprintf+0x330>
    1582:	b6 01       	movw	r22, r12
    1584:	80 e2       	ldi	r24, 0x20	; 32
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	0e 94 2c 0b 	call	0x1658	; 0x1658 <fputc>
    158c:	b3 94       	inc	r11
    158e:	f7 cf       	rjmp	.-18     	; 0x157e <vfprintf+0x314>
    1590:	b2 14       	cp	r11, r2
    1592:	18 f4       	brcc	.+6      	; 0x159a <vfprintf+0x330>
    1594:	2b 18       	sub	r2, r11
    1596:	02 c0       	rjmp	.+4      	; 0x159c <vfprintf+0x332>
    1598:	98 2c       	mov	r9, r8
    159a:	21 2c       	mov	r2, r1
    159c:	a4 fe       	sbrs	r10, 4
    159e:	10 c0       	rjmp	.+32     	; 0x15c0 <vfprintf+0x356>
    15a0:	b6 01       	movw	r22, r12
    15a2:	80 e3       	ldi	r24, 0x30	; 48
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	0e 94 2c 0b 	call	0x1658	; 0x1658 <fputc>
    15aa:	a2 fe       	sbrs	r10, 2
    15ac:	17 c0       	rjmp	.+46     	; 0x15dc <vfprintf+0x372>
    15ae:	a1 fc       	sbrc	r10, 1
    15b0:	03 c0       	rjmp	.+6      	; 0x15b8 <vfprintf+0x34e>
    15b2:	88 e7       	ldi	r24, 0x78	; 120
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	02 c0       	rjmp	.+4      	; 0x15bc <vfprintf+0x352>
    15b8:	88 e5       	ldi	r24, 0x58	; 88
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	b6 01       	movw	r22, r12
    15be:	0c c0       	rjmp	.+24     	; 0x15d8 <vfprintf+0x36e>
    15c0:	8a 2d       	mov	r24, r10
    15c2:	86 78       	andi	r24, 0x86	; 134
    15c4:	59 f0       	breq	.+22     	; 0x15dc <vfprintf+0x372>
    15c6:	a1 fe       	sbrs	r10, 1
    15c8:	02 c0       	rjmp	.+4      	; 0x15ce <vfprintf+0x364>
    15ca:	8b e2       	ldi	r24, 0x2B	; 43
    15cc:	01 c0       	rjmp	.+2      	; 0x15d0 <vfprintf+0x366>
    15ce:	80 e2       	ldi	r24, 0x20	; 32
    15d0:	a7 fc       	sbrc	r10, 7
    15d2:	8d e2       	ldi	r24, 0x2D	; 45
    15d4:	b6 01       	movw	r22, r12
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	0e 94 2c 0b 	call	0x1658	; 0x1658 <fputc>
    15dc:	89 14       	cp	r8, r9
    15de:	38 f4       	brcc	.+14     	; 0x15ee <vfprintf+0x384>
    15e0:	b6 01       	movw	r22, r12
    15e2:	80 e3       	ldi	r24, 0x30	; 48
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	0e 94 2c 0b 	call	0x1658	; 0x1658 <fputc>
    15ea:	9a 94       	dec	r9
    15ec:	f7 cf       	rjmp	.-18     	; 0x15dc <vfprintf+0x372>
    15ee:	8a 94       	dec	r8
    15f0:	f3 01       	movw	r30, r6
    15f2:	e8 0d       	add	r30, r8
    15f4:	f1 1d       	adc	r31, r1
    15f6:	80 81       	ld	r24, Z
    15f8:	b6 01       	movw	r22, r12
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	0e 94 2c 0b 	call	0x1658	; 0x1658 <fputc>
    1600:	81 10       	cpse	r8, r1
    1602:	f5 cf       	rjmp	.-22     	; 0x15ee <vfprintf+0x384>
    1604:	22 20       	and	r2, r2
    1606:	09 f4       	brne	.+2      	; 0x160a <vfprintf+0x3a0>
    1608:	42 ce       	rjmp	.-892    	; 0x128e <vfprintf+0x24>
    160a:	b6 01       	movw	r22, r12
    160c:	80 e2       	ldi	r24, 0x20	; 32
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	0e 94 2c 0b 	call	0x1658	; 0x1658 <fputc>
    1614:	2a 94       	dec	r2
    1616:	f6 cf       	rjmp	.-20     	; 0x1604 <vfprintf+0x39a>
    1618:	f6 01       	movw	r30, r12
    161a:	86 81       	ldd	r24, Z+6	; 0x06
    161c:	97 81       	ldd	r25, Z+7	; 0x07
    161e:	02 c0       	rjmp	.+4      	; 0x1624 <vfprintf+0x3ba>
    1620:	8f ef       	ldi	r24, 0xFF	; 255
    1622:	9f ef       	ldi	r25, 0xFF	; 255
    1624:	2b 96       	adiw	r28, 0x0b	; 11
    1626:	e2 e1       	ldi	r30, 0x12	; 18
    1628:	0c 94 e2 0b 	jmp	0x17c4	; 0x17c4 <__epilogue_restores__>

0000162c <strnlen_P>:
    162c:	fc 01       	movw	r30, r24
    162e:	05 90       	lpm	r0, Z+
    1630:	61 50       	subi	r22, 0x01	; 1
    1632:	70 40       	sbci	r23, 0x00	; 0
    1634:	01 10       	cpse	r0, r1
    1636:	d8 f7       	brcc	.-10     	; 0x162e <strnlen_P+0x2>
    1638:	80 95       	com	r24
    163a:	90 95       	com	r25
    163c:	8e 0f       	add	r24, r30
    163e:	9f 1f       	adc	r25, r31
    1640:	08 95       	ret

00001642 <strnlen>:
    1642:	fc 01       	movw	r30, r24
    1644:	61 50       	subi	r22, 0x01	; 1
    1646:	70 40       	sbci	r23, 0x00	; 0
    1648:	01 90       	ld	r0, Z+
    164a:	01 10       	cpse	r0, r1
    164c:	d8 f7       	brcc	.-10     	; 0x1644 <strnlen+0x2>
    164e:	80 95       	com	r24
    1650:	90 95       	com	r25
    1652:	8e 0f       	add	r24, r30
    1654:	9f 1f       	adc	r25, r31
    1656:	08 95       	ret

00001658 <fputc>:
    1658:	0f 93       	push	r16
    165a:	1f 93       	push	r17
    165c:	cf 93       	push	r28
    165e:	df 93       	push	r29
    1660:	fb 01       	movw	r30, r22
    1662:	23 81       	ldd	r18, Z+3	; 0x03
    1664:	21 fd       	sbrc	r18, 1
    1666:	03 c0       	rjmp	.+6      	; 0x166e <fputc+0x16>
    1668:	8f ef       	ldi	r24, 0xFF	; 255
    166a:	9f ef       	ldi	r25, 0xFF	; 255
    166c:	2c c0       	rjmp	.+88     	; 0x16c6 <fputc+0x6e>
    166e:	22 ff       	sbrs	r18, 2
    1670:	16 c0       	rjmp	.+44     	; 0x169e <fputc+0x46>
    1672:	46 81       	ldd	r20, Z+6	; 0x06
    1674:	57 81       	ldd	r21, Z+7	; 0x07
    1676:	24 81       	ldd	r18, Z+4	; 0x04
    1678:	35 81       	ldd	r19, Z+5	; 0x05
    167a:	42 17       	cp	r20, r18
    167c:	53 07       	cpc	r21, r19
    167e:	44 f4       	brge	.+16     	; 0x1690 <fputc+0x38>
    1680:	a0 81       	ld	r26, Z
    1682:	b1 81       	ldd	r27, Z+1	; 0x01
    1684:	9d 01       	movw	r18, r26
    1686:	2f 5f       	subi	r18, 0xFF	; 255
    1688:	3f 4f       	sbci	r19, 0xFF	; 255
    168a:	31 83       	std	Z+1, r19	; 0x01
    168c:	20 83       	st	Z, r18
    168e:	8c 93       	st	X, r24
    1690:	26 81       	ldd	r18, Z+6	; 0x06
    1692:	37 81       	ldd	r19, Z+7	; 0x07
    1694:	2f 5f       	subi	r18, 0xFF	; 255
    1696:	3f 4f       	sbci	r19, 0xFF	; 255
    1698:	37 83       	std	Z+7, r19	; 0x07
    169a:	26 83       	std	Z+6, r18	; 0x06
    169c:	14 c0       	rjmp	.+40     	; 0x16c6 <fputc+0x6e>
    169e:	8b 01       	movw	r16, r22
    16a0:	ec 01       	movw	r28, r24
    16a2:	fb 01       	movw	r30, r22
    16a4:	00 84       	ldd	r0, Z+8	; 0x08
    16a6:	f1 85       	ldd	r31, Z+9	; 0x09
    16a8:	e0 2d       	mov	r30, r0
    16aa:	09 95       	icall
    16ac:	89 2b       	or	r24, r25
    16ae:	e1 f6       	brne	.-72     	; 0x1668 <fputc+0x10>
    16b0:	d8 01       	movw	r26, r16
    16b2:	16 96       	adiw	r26, 0x06	; 6
    16b4:	8d 91       	ld	r24, X+
    16b6:	9c 91       	ld	r25, X
    16b8:	17 97       	sbiw	r26, 0x07	; 7
    16ba:	01 96       	adiw	r24, 0x01	; 1
    16bc:	17 96       	adiw	r26, 0x07	; 7
    16be:	9c 93       	st	X, r25
    16c0:	8e 93       	st	-X, r24
    16c2:	16 97       	sbiw	r26, 0x06	; 6
    16c4:	ce 01       	movw	r24, r28
    16c6:	df 91       	pop	r29
    16c8:	cf 91       	pop	r28
    16ca:	1f 91       	pop	r17
    16cc:	0f 91       	pop	r16
    16ce:	08 95       	ret

000016d0 <__ultoa_invert>:
    16d0:	fa 01       	movw	r30, r20
    16d2:	aa 27       	eor	r26, r26
    16d4:	28 30       	cpi	r18, 0x08	; 8
    16d6:	51 f1       	breq	.+84     	; 0x172c <__ultoa_invert+0x5c>
    16d8:	20 31       	cpi	r18, 0x10	; 16
    16da:	81 f1       	breq	.+96     	; 0x173c <__ultoa_invert+0x6c>
    16dc:	e8 94       	clt
    16de:	6f 93       	push	r22
    16e0:	6e 7f       	andi	r22, 0xFE	; 254
    16e2:	6e 5f       	subi	r22, 0xFE	; 254
    16e4:	7f 4f       	sbci	r23, 0xFF	; 255
    16e6:	8f 4f       	sbci	r24, 0xFF	; 255
    16e8:	9f 4f       	sbci	r25, 0xFF	; 255
    16ea:	af 4f       	sbci	r26, 0xFF	; 255
    16ec:	b1 e0       	ldi	r27, 0x01	; 1
    16ee:	3e d0       	rcall	.+124    	; 0x176c <__ultoa_invert+0x9c>
    16f0:	b4 e0       	ldi	r27, 0x04	; 4
    16f2:	3c d0       	rcall	.+120    	; 0x176c <__ultoa_invert+0x9c>
    16f4:	67 0f       	add	r22, r23
    16f6:	78 1f       	adc	r23, r24
    16f8:	89 1f       	adc	r24, r25
    16fa:	9a 1f       	adc	r25, r26
    16fc:	a1 1d       	adc	r26, r1
    16fe:	68 0f       	add	r22, r24
    1700:	79 1f       	adc	r23, r25
    1702:	8a 1f       	adc	r24, r26
    1704:	91 1d       	adc	r25, r1
    1706:	a1 1d       	adc	r26, r1
    1708:	6a 0f       	add	r22, r26
    170a:	71 1d       	adc	r23, r1
    170c:	81 1d       	adc	r24, r1
    170e:	91 1d       	adc	r25, r1
    1710:	a1 1d       	adc	r26, r1
    1712:	20 d0       	rcall	.+64     	; 0x1754 <__ultoa_invert+0x84>
    1714:	09 f4       	brne	.+2      	; 0x1718 <__ultoa_invert+0x48>
    1716:	68 94       	set
    1718:	3f 91       	pop	r19
    171a:	2a e0       	ldi	r18, 0x0A	; 10
    171c:	26 9f       	mul	r18, r22
    171e:	11 24       	eor	r1, r1
    1720:	30 19       	sub	r19, r0
    1722:	30 5d       	subi	r19, 0xD0	; 208
    1724:	31 93       	st	Z+, r19
    1726:	de f6       	brtc	.-74     	; 0x16de <__ultoa_invert+0xe>
    1728:	cf 01       	movw	r24, r30
    172a:	08 95       	ret
    172c:	46 2f       	mov	r20, r22
    172e:	47 70       	andi	r20, 0x07	; 7
    1730:	40 5d       	subi	r20, 0xD0	; 208
    1732:	41 93       	st	Z+, r20
    1734:	b3 e0       	ldi	r27, 0x03	; 3
    1736:	0f d0       	rcall	.+30     	; 0x1756 <__ultoa_invert+0x86>
    1738:	c9 f7       	brne	.-14     	; 0x172c <__ultoa_invert+0x5c>
    173a:	f6 cf       	rjmp	.-20     	; 0x1728 <__ultoa_invert+0x58>
    173c:	46 2f       	mov	r20, r22
    173e:	4f 70       	andi	r20, 0x0F	; 15
    1740:	40 5d       	subi	r20, 0xD0	; 208
    1742:	4a 33       	cpi	r20, 0x3A	; 58
    1744:	18 f0       	brcs	.+6      	; 0x174c <__ultoa_invert+0x7c>
    1746:	49 5d       	subi	r20, 0xD9	; 217
    1748:	31 fd       	sbrc	r19, 1
    174a:	40 52       	subi	r20, 0x20	; 32
    174c:	41 93       	st	Z+, r20
    174e:	02 d0       	rcall	.+4      	; 0x1754 <__ultoa_invert+0x84>
    1750:	a9 f7       	brne	.-22     	; 0x173c <__ultoa_invert+0x6c>
    1752:	ea cf       	rjmp	.-44     	; 0x1728 <__ultoa_invert+0x58>
    1754:	b4 e0       	ldi	r27, 0x04	; 4
    1756:	a6 95       	lsr	r26
    1758:	97 95       	ror	r25
    175a:	87 95       	ror	r24
    175c:	77 95       	ror	r23
    175e:	67 95       	ror	r22
    1760:	ba 95       	dec	r27
    1762:	c9 f7       	brne	.-14     	; 0x1756 <__ultoa_invert+0x86>
    1764:	00 97       	sbiw	r24, 0x00	; 0
    1766:	61 05       	cpc	r22, r1
    1768:	71 05       	cpc	r23, r1
    176a:	08 95       	ret
    176c:	9b 01       	movw	r18, r22
    176e:	ac 01       	movw	r20, r24
    1770:	0a 2e       	mov	r0, r26
    1772:	06 94       	lsr	r0
    1774:	57 95       	ror	r21
    1776:	47 95       	ror	r20
    1778:	37 95       	ror	r19
    177a:	27 95       	ror	r18
    177c:	ba 95       	dec	r27
    177e:	c9 f7       	brne	.-14     	; 0x1772 <__ultoa_invert+0xa2>
    1780:	62 0f       	add	r22, r18
    1782:	73 1f       	adc	r23, r19
    1784:	84 1f       	adc	r24, r20
    1786:	95 1f       	adc	r25, r21
    1788:	a0 1d       	adc	r26, r0
    178a:	08 95       	ret

0000178c <__prologue_saves__>:
    178c:	2f 92       	push	r2
    178e:	3f 92       	push	r3
    1790:	4f 92       	push	r4
    1792:	5f 92       	push	r5
    1794:	6f 92       	push	r6
    1796:	7f 92       	push	r7
    1798:	8f 92       	push	r8
    179a:	9f 92       	push	r9
    179c:	af 92       	push	r10
    179e:	bf 92       	push	r11
    17a0:	cf 92       	push	r12
    17a2:	df 92       	push	r13
    17a4:	ef 92       	push	r14
    17a6:	ff 92       	push	r15
    17a8:	0f 93       	push	r16
    17aa:	1f 93       	push	r17
    17ac:	cf 93       	push	r28
    17ae:	df 93       	push	r29
    17b0:	cd b7       	in	r28, 0x3d	; 61
    17b2:	de b7       	in	r29, 0x3e	; 62
    17b4:	ca 1b       	sub	r28, r26
    17b6:	db 0b       	sbc	r29, r27
    17b8:	0f b6       	in	r0, 0x3f	; 63
    17ba:	f8 94       	cli
    17bc:	de bf       	out	0x3e, r29	; 62
    17be:	0f be       	out	0x3f, r0	; 63
    17c0:	cd bf       	out	0x3d, r28	; 61
    17c2:	09 94       	ijmp

000017c4 <__epilogue_restores__>:
    17c4:	2a 88       	ldd	r2, Y+18	; 0x12
    17c6:	39 88       	ldd	r3, Y+17	; 0x11
    17c8:	48 88       	ldd	r4, Y+16	; 0x10
    17ca:	5f 84       	ldd	r5, Y+15	; 0x0f
    17cc:	6e 84       	ldd	r6, Y+14	; 0x0e
    17ce:	7d 84       	ldd	r7, Y+13	; 0x0d
    17d0:	8c 84       	ldd	r8, Y+12	; 0x0c
    17d2:	9b 84       	ldd	r9, Y+11	; 0x0b
    17d4:	aa 84       	ldd	r10, Y+10	; 0x0a
    17d6:	b9 84       	ldd	r11, Y+9	; 0x09
    17d8:	c8 84       	ldd	r12, Y+8	; 0x08
    17da:	df 80       	ldd	r13, Y+7	; 0x07
    17dc:	ee 80       	ldd	r14, Y+6	; 0x06
    17de:	fd 80       	ldd	r15, Y+5	; 0x05
    17e0:	0c 81       	ldd	r16, Y+4	; 0x04
    17e2:	1b 81       	ldd	r17, Y+3	; 0x03
    17e4:	aa 81       	ldd	r26, Y+2	; 0x02
    17e6:	b9 81       	ldd	r27, Y+1	; 0x01
    17e8:	ce 0f       	add	r28, r30
    17ea:	d1 1d       	adc	r29, r1
    17ec:	0f b6       	in	r0, 0x3f	; 63
    17ee:	f8 94       	cli
    17f0:	de bf       	out	0x3e, r29	; 62
    17f2:	0f be       	out	0x3f, r0	; 63
    17f4:	cd bf       	out	0x3d, r28	; 61
    17f6:	ed 01       	movw	r28, r26
    17f8:	08 95       	ret

000017fa <_exit>:
    17fa:	f8 94       	cli

000017fc <__stop_program>:
    17fc:	ff cf       	rjmp	.-2      	; 0x17fc <__stop_program>
