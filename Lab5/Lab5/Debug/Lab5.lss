
Lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00001f92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f3e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00001f92  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001fc4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000013fd  00000000  00000000  00002044  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000801  00000000  00000000  00003441  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ade  00000000  00000000  00003c42  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000260  00000000  00000000  00004720  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000492  00000000  00000000  00004980  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004b2  00000000  00000000  00004e12  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
       2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
       4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
       6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
       8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
       a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
       c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
       e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
      10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
      12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
      14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
      16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
      18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
      1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
      1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>
      1e:	12 c0       	rjmp	.+36     	; 0x44 <__bad_interrupt>
      20:	11 c0       	rjmp	.+34     	; 0x44 <__bad_interrupt>
      22:	10 c0       	rjmp	.+32     	; 0x44 <__bad_interrupt>
      24:	0f c0       	rjmp	.+30     	; 0x44 <__bad_interrupt>
      26:	0e c0       	rjmp	.+28     	; 0x44 <__bad_interrupt>
      28:	0d c0       	rjmp	.+26     	; 0x44 <__bad_interrupt>
      2a:	0c c0       	rjmp	.+24     	; 0x44 <__bad_interrupt>
      2c:	0b c0       	rjmp	.+22     	; 0x44 <__bad_interrupt>
      2e:	0a c0       	rjmp	.+20     	; 0x44 <__bad_interrupt>
      30:	09 c0       	rjmp	.+18     	; 0x44 <__bad_interrupt>
      32:	08 c0       	rjmp	.+16     	; 0x44 <__bad_interrupt>

00000034 <__ctors_end>:
      34:	11 24       	eor	r1, r1
      36:	1f be       	out	0x3f, r1	; 63
      38:	cf ef       	ldi	r28, 0xFF	; 255
      3a:	d4 e0       	ldi	r29, 0x04	; 4
      3c:	de bf       	out	0x3e, r29	; 62
      3e:	cd bf       	out	0x3d, r28	; 61
      40:	fe dd       	rcall	.-1028   	; 0xfffffc3e <__eeprom_end+0xff7efc3e>
      42:	7b cf       	rjmp	.-266    	; 0xffffff3a <__eeprom_end+0xff7eff3a>

00000044 <__bad_interrupt>:
      44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <toggle_e>:


#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
      46:	cf 93       	push	r28
      48:	df 93       	push	r29
      4a:	cd b7       	in	r28, 0x3d	; 61
      4c:	de b7       	in	r29, 0x3e	; 62
      4e:	a0 97       	sbiw	r28, 0x20	; 32
      50:	0f b6       	in	r0, 0x3f	; 63
      52:	f8 94       	cli
      54:	de bf       	out	0x3e, r29	; 62
      56:	0f be       	out	0x3f, r0	; 63
      58:	cd bf       	out	0x3d, r28	; 61
    lcd_e_high();
      5a:	88 e2       	ldi	r24, 0x28	; 40
      5c:	90 e0       	ldi	r25, 0x00	; 0
      5e:	28 e2       	ldi	r18, 0x28	; 40
      60:	30 e0       	ldi	r19, 0x00	; 0
      62:	f9 01       	movw	r30, r18
      64:	20 81       	ld	r18, Z
      66:	20 64       	ori	r18, 0x40	; 64
      68:	fc 01       	movw	r30, r24
      6a:	20 83       	st	Z, r18
      6c:	80 e0       	ldi	r24, 0x00	; 0
      6e:	90 e0       	ldi	r25, 0x00	; 0
      70:	a0 e8       	ldi	r26, 0x80	; 128
      72:	bf e3       	ldi	r27, 0x3F	; 63
      74:	89 83       	std	Y+1, r24	; 0x01
      76:	9a 83       	std	Y+2, r25	; 0x02
      78:	ab 83       	std	Y+3, r26	; 0x03
      7a:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
      7c:	2b ea       	ldi	r18, 0xAB	; 171
      7e:	3a ea       	ldi	r19, 0xAA	; 170
      80:	4a ea       	ldi	r20, 0xAA	; 170
      82:	5e e3       	ldi	r21, 0x3E	; 62
      84:	69 81       	ldd	r22, Y+1	; 0x01
      86:	7a 81       	ldd	r23, Y+2	; 0x02
      88:	8b 81       	ldd	r24, Y+3	; 0x03
      8a:	9c 81       	ldd	r25, Y+4	; 0x04
      8c:	f3 de       	rcall	.-538    	; 0xfffffe74 <__eeprom_end+0xff7efe74>
      8e:	dc 01       	movw	r26, r24
      90:	cb 01       	movw	r24, r22
      92:	8d 83       	std	Y+5, r24	; 0x05
      94:	9e 83       	std	Y+6, r25	; 0x06
      96:	af 83       	std	Y+7, r26	; 0x07
      98:	b8 87       	std	Y+8, r27	; 0x08
	__tmp2 = ((F_CPU) / 4e6) * __us;
      9a:	20 e0       	ldi	r18, 0x00	; 0
      9c:	30 e0       	ldi	r19, 0x00	; 0
      9e:	40 e8       	ldi	r20, 0x80	; 128
      a0:	5e e3       	ldi	r21, 0x3E	; 62
      a2:	69 81       	ldd	r22, Y+1	; 0x01
      a4:	7a 81       	ldd	r23, Y+2	; 0x02
      a6:	8b 81       	ldd	r24, Y+3	; 0x03
      a8:	9c 81       	ldd	r25, Y+4	; 0x04
      aa:	e4 de       	rcall	.-568    	; 0xfffffe74 <__eeprom_end+0xff7efe74>
      ac:	dc 01       	movw	r26, r24
      ae:	cb 01       	movw	r24, r22
      b0:	89 87       	std	Y+9, r24	; 0x09
      b2:	9a 87       	std	Y+10, r25	; 0x0a
      b4:	ab 87       	std	Y+11, r26	; 0x0b
      b6:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
      b8:	20 e0       	ldi	r18, 0x00	; 0
      ba:	30 e0       	ldi	r19, 0x00	; 0
      bc:	40 e8       	ldi	r20, 0x80	; 128
      be:	5f e3       	ldi	r21, 0x3F	; 63
      c0:	6d 81       	ldd	r22, Y+5	; 0x05
      c2:	7e 81       	ldd	r23, Y+6	; 0x06
      c4:	8f 81       	ldd	r24, Y+7	; 0x07
      c6:	98 85       	ldd	r25, Y+8	; 0x08
      c8:	c4 dd       	rcall	.-1144   	; 0xfffffc52 <__eeprom_end+0xff7efc52>
      ca:	88 23       	and	r24, r24
      cc:	1c f4       	brge	.+6      	; 0xd4 <toggle_e+0x8e>
		__ticks = 1;
      ce:	81 e0       	ldi	r24, 0x01	; 1
      d0:	8d 87       	std	Y+13, r24	; 0x0d
      d2:	a7 c0       	rjmp	.+334    	; 0x222 <__EEPROM_REGION_LENGTH__+0x22>
	else if (__tmp2 > 65535)
      d4:	20 e0       	ldi	r18, 0x00	; 0
      d6:	3f ef       	ldi	r19, 0xFF	; 255
      d8:	4f e7       	ldi	r20, 0x7F	; 127
      da:	57 e4       	ldi	r21, 0x47	; 71
      dc:	69 85       	ldd	r22, Y+9	; 0x09
      de:	7a 85       	ldd	r23, Y+10	; 0x0a
      e0:	8b 85       	ldd	r24, Y+11	; 0x0b
      e2:	9c 85       	ldd	r25, Y+12	; 0x0c
      e4:	c3 de       	rcall	.-634    	; 0xfffffe6c <__eeprom_end+0xff7efe6c>
      e6:	18 16       	cp	r1, r24
      e8:	0c f0       	brlt	.+2      	; 0xec <toggle_e+0xa6>
      ea:	74 c0       	rjmp	.+232    	; 0x1d4 <toggle_e+0x18e>
	{
		_delay_ms(__us / 1000.0);
      ec:	20 e0       	ldi	r18, 0x00	; 0
      ee:	30 e0       	ldi	r19, 0x00	; 0
      f0:	4a e7       	ldi	r20, 0x7A	; 122
      f2:	54 e4       	ldi	r21, 0x44	; 68
      f4:	69 81       	ldd	r22, Y+1	; 0x01
      f6:	7a 81       	ldd	r23, Y+2	; 0x02
      f8:	8b 81       	ldd	r24, Y+3	; 0x03
      fa:	9c 81       	ldd	r25, Y+4	; 0x04
      fc:	ae dd       	rcall	.-1188   	; 0xfffffc5a <__eeprom_end+0xff7efc5a>
      fe:	dc 01       	movw	r26, r24
     100:	cb 01       	movw	r24, r22
     102:	8e 87       	std	Y+14, r24	; 0x0e
     104:	9f 87       	std	Y+15, r25	; 0x0f
     106:	a8 8b       	std	Y+16, r26	; 0x10
     108:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     10a:	20 e0       	ldi	r18, 0x00	; 0
     10c:	30 e0       	ldi	r19, 0x00	; 0
     10e:	4a e7       	ldi	r20, 0x7A	; 122
     110:	53 e4       	ldi	r21, 0x43	; 67
     112:	6e 85       	ldd	r22, Y+14	; 0x0e
     114:	7f 85       	ldd	r23, Y+15	; 0x0f
     116:	88 89       	ldd	r24, Y+16	; 0x10
     118:	99 89       	ldd	r25, Y+17	; 0x11
     11a:	ac de       	rcall	.-680    	; 0xfffffe74 <__eeprom_end+0xff7efe74>
     11c:	dc 01       	movw	r26, r24
     11e:	cb 01       	movw	r24, r22
     120:	8a 8b       	std	Y+18, r24	; 0x12
     122:	9b 8b       	std	Y+19, r25	; 0x13
     124:	ac 8b       	std	Y+20, r26	; 0x14
     126:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
     128:	20 e0       	ldi	r18, 0x00	; 0
     12a:	30 e0       	ldi	r19, 0x00	; 0
     12c:	40 e8       	ldi	r20, 0x80	; 128
     12e:	5f e3       	ldi	r21, 0x3F	; 63
     130:	6a 89       	ldd	r22, Y+18	; 0x12
     132:	7b 89       	ldd	r23, Y+19	; 0x13
     134:	8c 89       	ldd	r24, Y+20	; 0x14
     136:	9d 89       	ldd	r25, Y+21	; 0x15
     138:	8c dd       	rcall	.-1256   	; 0xfffffc52 <__eeprom_end+0xff7efc52>
     13a:	88 23       	and	r24, r24
     13c:	2c f4       	brge	.+10     	; 0x148 <toggle_e+0x102>
		__ticks = 1;
     13e:	81 e0       	ldi	r24, 0x01	; 1
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	9f 8b       	std	Y+23, r25	; 0x17
     144:	8e 8b       	std	Y+22, r24	; 0x16
     146:	3b c0       	rjmp	.+118    	; 0x1be <toggle_e+0x178>
	else if (__tmp > 65535)
     148:	20 e0       	ldi	r18, 0x00	; 0
     14a:	3f ef       	ldi	r19, 0xFF	; 255
     14c:	4f e7       	ldi	r20, 0x7F	; 127
     14e:	57 e4       	ldi	r21, 0x47	; 71
     150:	6a 89       	ldd	r22, Y+18	; 0x12
     152:	7b 89       	ldd	r23, Y+19	; 0x13
     154:	8c 89       	ldd	r24, Y+20	; 0x14
     156:	9d 89       	ldd	r25, Y+21	; 0x15
     158:	89 de       	rcall	.-750    	; 0xfffffe6c <__eeprom_end+0xff7efe6c>
     15a:	18 16       	cp	r1, r24
     15c:	3c f5       	brge	.+78     	; 0x1ac <toggle_e+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     15e:	20 e0       	ldi	r18, 0x00	; 0
     160:	30 e0       	ldi	r19, 0x00	; 0
     162:	40 e2       	ldi	r20, 0x20	; 32
     164:	51 e4       	ldi	r21, 0x41	; 65
     166:	6e 85       	ldd	r22, Y+14	; 0x0e
     168:	7f 85       	ldd	r23, Y+15	; 0x0f
     16a:	88 89       	ldd	r24, Y+16	; 0x10
     16c:	99 89       	ldd	r25, Y+17	; 0x11
     16e:	82 de       	rcall	.-764    	; 0xfffffe74 <__eeprom_end+0xff7efe74>
     170:	dc 01       	movw	r26, r24
     172:	cb 01       	movw	r24, r22
     174:	bc 01       	movw	r22, r24
     176:	cd 01       	movw	r24, r26
     178:	d8 dd       	rcall	.-1104   	; 0xfffffd2a <__eeprom_end+0xff7efd2a>
     17a:	dc 01       	movw	r26, r24
     17c:	cb 01       	movw	r24, r22
     17e:	9f 8b       	std	Y+23, r25	; 0x17
     180:	8e 8b       	std	Y+22, r24	; 0x16
     182:	0f c0       	rjmp	.+30     	; 0x1a2 <toggle_e+0x15c>
     184:	89 e1       	ldi	r24, 0x19	; 25
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	99 8f       	std	Y+25, r25	; 0x19
     18a:	88 8f       	std	Y+24, r24	; 0x18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     18c:	88 8d       	ldd	r24, Y+24	; 0x18
     18e:	99 8d       	ldd	r25, Y+25	; 0x19
     190:	01 97       	sbiw	r24, 0x01	; 1
     192:	f1 f7       	brne	.-4      	; 0x190 <toggle_e+0x14a>
     194:	99 8f       	std	Y+25, r25	; 0x19
     196:	88 8f       	std	Y+24, r24	; 0x18
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     198:	8e 89       	ldd	r24, Y+22	; 0x16
     19a:	9f 89       	ldd	r25, Y+23	; 0x17
     19c:	01 97       	sbiw	r24, 0x01	; 1
     19e:	9f 8b       	std	Y+23, r25	; 0x17
     1a0:	8e 8b       	std	Y+22, r24	; 0x16
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1a2:	8e 89       	ldd	r24, Y+22	; 0x16
     1a4:	9f 89       	ldd	r25, Y+23	; 0x17
     1a6:	89 2b       	or	r24, r25
     1a8:	69 f7       	brne	.-38     	; 0x184 <toggle_e+0x13e>
     1aa:	3b c0       	rjmp	.+118    	; 0x222 <__EEPROM_REGION_LENGTH__+0x22>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1ac:	6a 89       	ldd	r22, Y+18	; 0x12
     1ae:	7b 89       	ldd	r23, Y+19	; 0x13
     1b0:	8c 89       	ldd	r24, Y+20	; 0x14
     1b2:	9d 89       	ldd	r25, Y+21	; 0x15
     1b4:	ba dd       	rcall	.-1164   	; 0xfffffd2a <__eeprom_end+0xff7efd2a>
     1b6:	dc 01       	movw	r26, r24
     1b8:	cb 01       	movw	r24, r22
     1ba:	9f 8b       	std	Y+23, r25	; 0x17
     1bc:	8e 8b       	std	Y+22, r24	; 0x16
     1be:	8e 89       	ldd	r24, Y+22	; 0x16
     1c0:	9f 89       	ldd	r25, Y+23	; 0x17
     1c2:	9b 8f       	std	Y+27, r25	; 0x1b
     1c4:	8a 8f       	std	Y+26, r24	; 0x1a
     1c6:	8a 8d       	ldd	r24, Y+26	; 0x1a
     1c8:	9b 8d       	ldd	r25, Y+27	; 0x1b
     1ca:	01 97       	sbiw	r24, 0x01	; 1
     1cc:	f1 f7       	brne	.-4      	; 0x1ca <toggle_e+0x184>
     1ce:	9b 8f       	std	Y+27, r25	; 0x1b
     1d0:	8a 8f       	std	Y+26, r24	; 0x1a
     1d2:	27 c0       	rjmp	.+78     	; 0x222 <__EEPROM_REGION_LENGTH__+0x22>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     1d4:	20 e0       	ldi	r18, 0x00	; 0
     1d6:	30 e0       	ldi	r19, 0x00	; 0
     1d8:	4f e7       	ldi	r20, 0x7F	; 127
     1da:	53 e4       	ldi	r21, 0x43	; 67
     1dc:	6d 81       	ldd	r22, Y+5	; 0x05
     1de:	7e 81       	ldd	r23, Y+6	; 0x06
     1e0:	8f 81       	ldd	r24, Y+7	; 0x07
     1e2:	98 85       	ldd	r25, Y+8	; 0x08
     1e4:	43 de       	rcall	.-890    	; 0xfffffe6c <__eeprom_end+0xff7efe6c>
     1e6:	18 16       	cp	r1, r24
     1e8:	a4 f4       	brge	.+40     	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     1ea:	69 85       	ldd	r22, Y+9	; 0x09
     1ec:	7a 85       	ldd	r23, Y+10	; 0x0a
     1ee:	8b 85       	ldd	r24, Y+11	; 0x0b
     1f0:	9c 85       	ldd	r25, Y+12	; 0x0c
     1f2:	9b dd       	rcall	.-1226   	; 0xfffffd2a <__eeprom_end+0xff7efd2a>
     1f4:	dc 01       	movw	r26, r24
     1f6:	cb 01       	movw	r24, r22
     1f8:	9d 8f       	std	Y+29, r25	; 0x1d
     1fa:	8c 8f       	std	Y+28, r24	; 0x1c
     1fc:	8c 8d       	ldd	r24, Y+28	; 0x1c
     1fe:	9d 8d       	ldd	r25, Y+29	; 0x1d
     200:	9f 8f       	std	Y+31, r25	; 0x1f
     202:	8e 8f       	std	Y+30, r24	; 0x1e
     204:	8e 8d       	ldd	r24, Y+30	; 0x1e
     206:	9f 8d       	ldd	r25, Y+31	; 0x1f
     208:	01 97       	sbiw	r24, 0x01	; 1
     20a:	f1 f7       	brne	.-4      	; 0x208 <__EEPROM_REGION_LENGTH__+0x8>
     20c:	9f 8f       	std	Y+31, r25	; 0x1f
     20e:	8e 8f       	std	Y+30, r24	; 0x1e
     210:	0e c0       	rjmp	.+28     	; 0x22e <__EEPROM_REGION_LENGTH__+0x2e>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     212:	6d 81       	ldd	r22, Y+5	; 0x05
     214:	7e 81       	ldd	r23, Y+6	; 0x06
     216:	8f 81       	ldd	r24, Y+7	; 0x07
     218:	98 85       	ldd	r25, Y+8	; 0x08
     21a:	87 dd       	rcall	.-1266   	; 0xfffffd2a <__eeprom_end+0xff7efd2a>
     21c:	dc 01       	movw	r26, r24
     21e:	cb 01       	movw	r24, r22
     220:	8d 87       	std	Y+13, r24	; 0x0d
     222:	8d 85       	ldd	r24, Y+13	; 0x0d
     224:	88 a3       	std	Y+32, r24	; 0x20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     226:	88 a1       	ldd	r24, Y+32	; 0x20
     228:	8a 95       	dec	r24
     22a:	f1 f7       	brne	.-4      	; 0x228 <__EEPROM_REGION_LENGTH__+0x28>
     22c:	88 a3       	std	Y+32, r24	; 0x20
    lcd_e_delay();
    lcd_e_low();
     22e:	88 e2       	ldi	r24, 0x28	; 40
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	28 e2       	ldi	r18, 0x28	; 40
     234:	30 e0       	ldi	r19, 0x00	; 0
     236:	f9 01       	movw	r30, r18
     238:	20 81       	ld	r18, Z
     23a:	2f 7b       	andi	r18, 0xBF	; 191
     23c:	fc 01       	movw	r30, r24
     23e:	20 83       	st	Z, r18
}
     240:	00 00       	nop
     242:	a0 96       	adiw	r28, 0x20	; 32
     244:	0f b6       	in	r0, 0x3f	; 63
     246:	f8 94       	cli
     248:	de bf       	out	0x3e, r29	; 62
     24a:	0f be       	out	0x3f, r0	; 63
     24c:	cd bf       	out	0x3d, r28	; 61
     24e:	df 91       	pop	r29
     250:	cf 91       	pop	r28
     252:	08 95       	ret

00000254 <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
     254:	cf 93       	push	r28
     256:	df 93       	push	r29
     258:	00 d0       	rcall	.+0      	; 0x25a <lcd_write+0x6>
     25a:	1f 92       	push	r1
     25c:	cd b7       	in	r28, 0x3d	; 61
     25e:	de b7       	in	r29, 0x3e	; 62
     260:	8a 83       	std	Y+2, r24	; 0x02
     262:	6b 83       	std	Y+3, r22	; 0x03
    unsigned char dataBits ;


    if (rs) {        /* write data        (RS=1, RW=0) */
     264:	8b 81       	ldd	r24, Y+3	; 0x03
     266:	88 23       	and	r24, r24
     268:	51 f0       	breq	.+20     	; 0x27e <lcd_write+0x2a>
       lcd_rs_high();
     26a:	88 e2       	ldi	r24, 0x28	; 40
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	28 e2       	ldi	r18, 0x28	; 40
     270:	30 e0       	ldi	r19, 0x00	; 0
     272:	f9 01       	movw	r30, r18
     274:	20 81       	ld	r18, Z
     276:	20 61       	ori	r18, 0x10	; 16
     278:	fc 01       	movw	r30, r24
     27a:	20 83       	st	Z, r18
     27c:	09 c0       	rjmp	.+18     	; 0x290 <lcd_write+0x3c>
    } else {         /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
     27e:	88 e2       	ldi	r24, 0x28	; 40
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	28 e2       	ldi	r18, 0x28	; 40
     284:	30 e0       	ldi	r19, 0x00	; 0
     286:	f9 01       	movw	r30, r18
     288:	20 81       	ld	r18, Z
     28a:	2f 7e       	andi	r18, 0xEF	; 239
     28c:	fc 01       	movw	r30, r24
     28e:	20 83       	st	Z, r18
    }
    lcd_rw_low();    /* RW=0  write mode      */
     290:	88 e2       	ldi	r24, 0x28	; 40
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	28 e2       	ldi	r18, 0x28	; 40
     296:	30 e0       	ldi	r19, 0x00	; 0
     298:	f9 01       	movw	r30, r18
     29a:	20 81       	ld	r18, Z
     29c:	2f 7d       	andi	r18, 0xDF	; 223
     29e:	fc 01       	movw	r30, r24
     2a0:	20 83       	st	Z, r18

    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= 0x0F;
     2a2:	87 e2       	ldi	r24, 0x27	; 39
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	27 e2       	ldi	r18, 0x27	; 39
     2a8:	30 e0       	ldi	r19, 0x00	; 0
     2aa:	f9 01       	movw	r30, r18
     2ac:	20 81       	ld	r18, Z
     2ae:	2f 60       	ori	r18, 0x0F	; 15
     2b0:	fc 01       	movw	r30, r24
     2b2:	20 83       	st	Z, r18

        /* output high nibble first */
        dataBits = LCD_DATA0_PORT & 0xF0;
     2b4:	88 e2       	ldi	r24, 0x28	; 40
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	fc 01       	movw	r30, r24
     2ba:	80 81       	ld	r24, Z
     2bc:	80 7f       	andi	r24, 0xF0	; 240
     2be:	89 83       	std	Y+1, r24	; 0x01
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
     2c0:	88 e2       	ldi	r24, 0x28	; 40
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	2a 81       	ldd	r18, Y+2	; 0x02
     2c6:	22 95       	swap	r18
     2c8:	2f 70       	andi	r18, 0x0F	; 15
     2ca:	32 2f       	mov	r19, r18
     2cc:	29 81       	ldd	r18, Y+1	; 0x01
     2ce:	23 2b       	or	r18, r19
     2d0:	fc 01       	movw	r30, r24
     2d2:	20 83       	st	Z, r18
        lcd_e_toggle();
     2d4:	b8 de       	rcall	.-656    	; 0x46 <toggle_e>

        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
     2d6:	88 e2       	ldi	r24, 0x28	; 40
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	2a 81       	ldd	r18, Y+2	; 0x02
     2dc:	32 2f       	mov	r19, r18
     2de:	3f 70       	andi	r19, 0x0F	; 15
     2e0:	29 81       	ldd	r18, Y+1	; 0x01
     2e2:	23 2b       	or	r18, r19
     2e4:	fc 01       	movw	r30, r24
     2e6:	20 83       	st	Z, r18
        lcd_e_toggle();
     2e8:	ae de       	rcall	.-676    	; 0x46 <toggle_e>

        /* all data pins high (inactive) */
        LCD_DATA0_PORT = dataBits | 0x0F;
     2ea:	88 e2       	ldi	r24, 0x28	; 40
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	29 81       	ldd	r18, Y+1	; 0x01
     2f0:	2f 60       	ori	r18, 0x0F	; 15
     2f2:	fc 01       	movw	r30, r24
     2f4:	20 83       	st	Z, r18
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    }
}
     2f6:	00 00       	nop
     2f8:	0f 90       	pop	r0
     2fa:	0f 90       	pop	r0
     2fc:	0f 90       	pop	r0
     2fe:	df 91       	pop	r29
     300:	cf 91       	pop	r28
     302:	08 95       	ret

00000304 <lcd_read>:
                 0: read busy flag / address counter
Returns:  byte read from LCD controller
*************************************************************************/
#if LCD_IO_MODE
static uint8_t lcd_read(uint8_t rs) 
{
     304:	0f 93       	push	r16
     306:	1f 93       	push	r17
     308:	cf 93       	push	r28
     30a:	df 93       	push	r29
     30c:	cd b7       	in	r28, 0x3d	; 61
     30e:	de b7       	in	r29, 0x3e	; 62
     310:	c2 56       	subi	r28, 0x62	; 98
     312:	d1 09       	sbc	r29, r1
     314:	0f b6       	in	r0, 0x3f	; 63
     316:	f8 94       	cli
     318:	de bf       	out	0x3e, r29	; 62
     31a:	0f be       	out	0x3f, r0	; 63
     31c:	cd bf       	out	0x3d, r28	; 61
     31e:	9e 01       	movw	r18, r28
     320:	2e 59       	subi	r18, 0x9E	; 158
     322:	3f 4f       	sbci	r19, 0xFF	; 255
     324:	f9 01       	movw	r30, r18
     326:	80 83       	st	Z, r24
    uint8_t data;
    
    
    if (rs)
     328:	ce 01       	movw	r24, r28
     32a:	8e 59       	subi	r24, 0x9E	; 158
     32c:	9f 4f       	sbci	r25, 0xFF	; 255
     32e:	fc 01       	movw	r30, r24
     330:	80 81       	ld	r24, Z
     332:	88 23       	and	r24, r24
     334:	51 f0       	breq	.+20     	; 0x34a <lcd_read+0x46>
        lcd_rs_high();                       /* RS=1: read data      */
     336:	88 e2       	ldi	r24, 0x28	; 40
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	28 e2       	ldi	r18, 0x28	; 40
     33c:	30 e0       	ldi	r19, 0x00	; 0
     33e:	f9 01       	movw	r30, r18
     340:	20 81       	ld	r18, Z
     342:	20 61       	ori	r18, 0x10	; 16
     344:	fc 01       	movw	r30, r24
     346:	20 83       	st	Z, r18
     348:	09 c0       	rjmp	.+18     	; 0x35c <lcd_read+0x58>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
     34a:	88 e2       	ldi	r24, 0x28	; 40
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	28 e2       	ldi	r18, 0x28	; 40
     350:	30 e0       	ldi	r19, 0x00	; 0
     352:	f9 01       	movw	r30, r18
     354:	20 81       	ld	r18, Z
     356:	2f 7e       	andi	r18, 0xEF	; 239
     358:	fc 01       	movw	r30, r24
     35a:	20 83       	st	Z, r18
    lcd_rw_high();                           /* RW=1  read mode      */
     35c:	88 e2       	ldi	r24, 0x28	; 40
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	28 e2       	ldi	r18, 0x28	; 40
     362:	30 e0       	ldi	r19, 0x00	; 0
     364:	f9 01       	movw	r30, r18
     366:	20 81       	ld	r18, Z
     368:	20 62       	ori	r18, 0x20	; 32
     36a:	fc 01       	movw	r30, r24
     36c:	20 83       	st	Z, r18
    
    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && ( LCD_DATA0_PIN == 0 )&& (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
     36e:	87 e2       	ldi	r24, 0x27	; 39
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	27 e2       	ldi	r18, 0x27	; 39
     374:	30 e0       	ldi	r19, 0x00	; 0
     376:	f9 01       	movw	r30, r18
     378:	20 81       	ld	r18, Z
     37a:	20 7f       	andi	r18, 0xF0	; 240
     37c:	fc 01       	movw	r30, r24
     37e:	20 83       	st	Z, r18
        
        lcd_e_high();
     380:	88 e2       	ldi	r24, 0x28	; 40
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	28 e2       	ldi	r18, 0x28	; 40
     386:	30 e0       	ldi	r19, 0x00	; 0
     388:	f9 01       	movw	r30, r18
     38a:	20 81       	ld	r18, Z
     38c:	20 64       	ori	r18, 0x40	; 64
     38e:	fc 01       	movw	r30, r24
     390:	20 83       	st	Z, r18
     392:	80 e0       	ldi	r24, 0x00	; 0
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	a0 e8       	ldi	r26, 0x80	; 128
     398:	bf e3       	ldi	r27, 0x3F	; 63
     39a:	8a 83       	std	Y+2, r24	; 0x02
     39c:	9b 83       	std	Y+3, r25	; 0x03
     39e:	ac 83       	std	Y+4, r26	; 0x04
     3a0:	bd 83       	std	Y+5, r27	; 0x05
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     3a2:	8e 01       	movw	r16, r28
     3a4:	0a 5b       	subi	r16, 0xBA	; 186
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	2b ea       	ldi	r18, 0xAB	; 171
     3aa:	3a ea       	ldi	r19, 0xAA	; 170
     3ac:	4a ea       	ldi	r20, 0xAA	; 170
     3ae:	5e e3       	ldi	r21, 0x3E	; 62
     3b0:	6a 81       	ldd	r22, Y+2	; 0x02
     3b2:	7b 81       	ldd	r23, Y+3	; 0x03
     3b4:	8c 81       	ldd	r24, Y+4	; 0x04
     3b6:	9d 81       	ldd	r25, Y+5	; 0x05
     3b8:	5d dd       	rcall	.-1350   	; 0xfffffe74 <__eeprom_end+0xff7efe74>
     3ba:	dc 01       	movw	r26, r24
     3bc:	cb 01       	movw	r24, r22
     3be:	f8 01       	movw	r30, r16
     3c0:	80 83       	st	Z, r24
     3c2:	91 83       	std	Z+1, r25	; 0x01
     3c4:	a2 83       	std	Z+2, r26	; 0x02
     3c6:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
     3c8:	8e 01       	movw	r16, r28
     3ca:	06 5b       	subi	r16, 0xB6	; 182
     3cc:	1f 4f       	sbci	r17, 0xFF	; 255
     3ce:	20 e0       	ldi	r18, 0x00	; 0
     3d0:	30 e0       	ldi	r19, 0x00	; 0
     3d2:	40 e8       	ldi	r20, 0x80	; 128
     3d4:	5e e3       	ldi	r21, 0x3E	; 62
     3d6:	6a 81       	ldd	r22, Y+2	; 0x02
     3d8:	7b 81       	ldd	r23, Y+3	; 0x03
     3da:	8c 81       	ldd	r24, Y+4	; 0x04
     3dc:	9d 81       	ldd	r25, Y+5	; 0x05
     3de:	4a dd       	rcall	.-1388   	; 0xfffffe74 <__eeprom_end+0xff7efe74>
     3e0:	dc 01       	movw	r26, r24
     3e2:	cb 01       	movw	r24, r22
     3e4:	f8 01       	movw	r30, r16
     3e6:	80 83       	st	Z, r24
     3e8:	91 83       	std	Z+1, r25	; 0x01
     3ea:	a2 83       	std	Z+2, r26	; 0x02
     3ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     3ee:	ce 01       	movw	r24, r28
     3f0:	8a 5b       	subi	r24, 0xBA	; 186
     3f2:	9f 4f       	sbci	r25, 0xFF	; 255
     3f4:	20 e0       	ldi	r18, 0x00	; 0
     3f6:	30 e0       	ldi	r19, 0x00	; 0
     3f8:	40 e8       	ldi	r20, 0x80	; 128
     3fa:	5f e3       	ldi	r21, 0x3F	; 63
     3fc:	fc 01       	movw	r30, r24
     3fe:	60 81       	ld	r22, Z
     400:	71 81       	ldd	r23, Z+1	; 0x01
     402:	82 81       	ldd	r24, Z+2	; 0x02
     404:	93 81       	ldd	r25, Z+3	; 0x03
     406:	25 dc       	rcall	.-1974   	; 0xfffffc52 <__eeprom_end+0xff7efc52>
     408:	88 23       	and	r24, r24
     40a:	3c f4       	brge	.+14     	; 0x41a <__DATA_REGION_LENGTH__+0x1a>
		__ticks = 1;
     40c:	ce 01       	movw	r24, r28
     40e:	82 5b       	subi	r24, 0xB2	; 178
     410:	9f 4f       	sbci	r25, 0xFF	; 255
     412:	21 e0       	ldi	r18, 0x01	; 1
     414:	fc 01       	movw	r30, r24
     416:	20 83       	st	Z, r18
     418:	21 c1       	rjmp	.+578    	; 0x65c <__stack+0x15d>
	else if (__tmp2 > 65535)
     41a:	ce 01       	movw	r24, r28
     41c:	86 5b       	subi	r24, 0xB6	; 182
     41e:	9f 4f       	sbci	r25, 0xFF	; 255
     420:	20 e0       	ldi	r18, 0x00	; 0
     422:	3f ef       	ldi	r19, 0xFF	; 255
     424:	4f e7       	ldi	r20, 0x7F	; 127
     426:	57 e4       	ldi	r21, 0x47	; 71
     428:	fc 01       	movw	r30, r24
     42a:	60 81       	ld	r22, Z
     42c:	71 81       	ldd	r23, Z+1	; 0x01
     42e:	82 81       	ldd	r24, Z+2	; 0x02
     430:	93 81       	ldd	r25, Z+3	; 0x03
     432:	1c dd       	rcall	.-1480   	; 0xfffffe6c <__eeprom_end+0xff7efe6c>
     434:	18 16       	cp	r1, r24
     436:	0c f0       	brlt	.+2      	; 0x43a <__DATA_REGION_LENGTH__+0x3a>
     438:	c6 c0       	rjmp	.+396    	; 0x5c6 <__stack+0xc7>
	{
		_delay_ms(__us / 1000.0);
     43a:	20 e0       	ldi	r18, 0x00	; 0
     43c:	30 e0       	ldi	r19, 0x00	; 0
     43e:	4a e7       	ldi	r20, 0x7A	; 122
     440:	54 e4       	ldi	r21, 0x44	; 68
     442:	6a 81       	ldd	r22, Y+2	; 0x02
     444:	7b 81       	ldd	r23, Y+3	; 0x03
     446:	8c 81       	ldd	r24, Y+4	; 0x04
     448:	9d 81       	ldd	r25, Y+5	; 0x05
     44a:	07 dc       	rcall	.-2034   	; 0xfffffc5a <__eeprom_end+0xff7efc5a>
     44c:	dc 01       	movw	r26, r24
     44e:	cb 01       	movw	r24, r22
     450:	9e 01       	movw	r18, r28
     452:	21 5b       	subi	r18, 0xB1	; 177
     454:	3f 4f       	sbci	r19, 0xFF	; 255
     456:	f9 01       	movw	r30, r18
     458:	80 83       	st	Z, r24
     45a:	91 83       	std	Z+1, r25	; 0x01
     45c:	a2 83       	std	Z+2, r26	; 0x02
     45e:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     460:	8e 01       	movw	r16, r28
     462:	0d 5a       	subi	r16, 0xAD	; 173
     464:	1f 4f       	sbci	r17, 0xFF	; 255
     466:	ce 01       	movw	r24, r28
     468:	81 5b       	subi	r24, 0xB1	; 177
     46a:	9f 4f       	sbci	r25, 0xFF	; 255
     46c:	20 e0       	ldi	r18, 0x00	; 0
     46e:	30 e0       	ldi	r19, 0x00	; 0
     470:	4a e7       	ldi	r20, 0x7A	; 122
     472:	53 e4       	ldi	r21, 0x43	; 67
     474:	fc 01       	movw	r30, r24
     476:	60 81       	ld	r22, Z
     478:	71 81       	ldd	r23, Z+1	; 0x01
     47a:	82 81       	ldd	r24, Z+2	; 0x02
     47c:	93 81       	ldd	r25, Z+3	; 0x03
     47e:	fa dc       	rcall	.-1548   	; 0xfffffe74 <__eeprom_end+0xff7efe74>
     480:	dc 01       	movw	r26, r24
     482:	cb 01       	movw	r24, r22
     484:	f8 01       	movw	r30, r16
     486:	80 83       	st	Z, r24
     488:	91 83       	std	Z+1, r25	; 0x01
     48a:	a2 83       	std	Z+2, r26	; 0x02
     48c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     48e:	ce 01       	movw	r24, r28
     490:	8d 5a       	subi	r24, 0xAD	; 173
     492:	9f 4f       	sbci	r25, 0xFF	; 255
     494:	20 e0       	ldi	r18, 0x00	; 0
     496:	30 e0       	ldi	r19, 0x00	; 0
     498:	40 e8       	ldi	r20, 0x80	; 128
     49a:	5f e3       	ldi	r21, 0x3F	; 63
     49c:	fc 01       	movw	r30, r24
     49e:	60 81       	ld	r22, Z
     4a0:	71 81       	ldd	r23, Z+1	; 0x01
     4a2:	82 81       	ldd	r24, Z+2	; 0x02
     4a4:	93 81       	ldd	r25, Z+3	; 0x03
     4a6:	d5 db       	rcall	.-2134   	; 0xfffffc52 <__eeprom_end+0xff7efc52>
     4a8:	88 23       	and	r24, r24
     4aa:	4c f4       	brge	.+18     	; 0x4be <__DATA_REGION_LENGTH__+0xbe>
		__ticks = 1;
     4ac:	ce 01       	movw	r24, r28
     4ae:	89 5a       	subi	r24, 0xA9	; 169
     4b0:	9f 4f       	sbci	r25, 0xFF	; 255
     4b2:	21 e0       	ldi	r18, 0x01	; 1
     4b4:	30 e0       	ldi	r19, 0x00	; 0
     4b6:	fc 01       	movw	r30, r24
     4b8:	31 83       	std	Z+1, r19	; 0x01
     4ba:	20 83       	st	Z, r18
     4bc:	69 c0       	rjmp	.+210    	; 0x590 <__stack+0x91>
	else if (__tmp > 65535)
     4be:	ce 01       	movw	r24, r28
     4c0:	8d 5a       	subi	r24, 0xAD	; 173
     4c2:	9f 4f       	sbci	r25, 0xFF	; 255
     4c4:	20 e0       	ldi	r18, 0x00	; 0
     4c6:	3f ef       	ldi	r19, 0xFF	; 255
     4c8:	4f e7       	ldi	r20, 0x7F	; 127
     4ca:	57 e4       	ldi	r21, 0x47	; 71
     4cc:	fc 01       	movw	r30, r24
     4ce:	60 81       	ld	r22, Z
     4d0:	71 81       	ldd	r23, Z+1	; 0x01
     4d2:	82 81       	ldd	r24, Z+2	; 0x02
     4d4:	93 81       	ldd	r25, Z+3	; 0x03
     4d6:	ca dc       	rcall	.-1644   	; 0xfffffe6c <__eeprom_end+0xff7efe6c>
     4d8:	18 16       	cp	r1, r24
     4da:	0c f0       	brlt	.+2      	; 0x4de <__DATA_REGION_LENGTH__+0xde>
     4dc:	48 c0       	rjmp	.+144    	; 0x56e <__stack+0x6f>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4de:	ce 01       	movw	r24, r28
     4e0:	81 5b       	subi	r24, 0xB1	; 177
     4e2:	9f 4f       	sbci	r25, 0xFF	; 255
     4e4:	20 e0       	ldi	r18, 0x00	; 0
     4e6:	30 e0       	ldi	r19, 0x00	; 0
     4e8:	40 e2       	ldi	r20, 0x20	; 32
     4ea:	51 e4       	ldi	r21, 0x41	; 65
     4ec:	fc 01       	movw	r30, r24
     4ee:	60 81       	ld	r22, Z
     4f0:	71 81       	ldd	r23, Z+1	; 0x01
     4f2:	82 81       	ldd	r24, Z+2	; 0x02
     4f4:	93 81       	ldd	r25, Z+3	; 0x03
     4f6:	be dc       	rcall	.-1668   	; 0xfffffe74 <__eeprom_end+0xff7efe74>
     4f8:	dc 01       	movw	r26, r24
     4fa:	cb 01       	movw	r24, r22
     4fc:	8e 01       	movw	r16, r28
     4fe:	09 5a       	subi	r16, 0xA9	; 169
     500:	1f 4f       	sbci	r17, 0xFF	; 255
     502:	bc 01       	movw	r22, r24
     504:	cd 01       	movw	r24, r26
     506:	11 dc       	rcall	.-2014   	; 0xfffffd2a <__eeprom_end+0xff7efd2a>
     508:	dc 01       	movw	r26, r24
     50a:	cb 01       	movw	r24, r22
     50c:	f8 01       	movw	r30, r16
     50e:	91 83       	std	Z+1, r25	; 0x01
     510:	80 83       	st	Z, r24
     512:	24 c0       	rjmp	.+72     	; 0x55c <__stack+0x5d>
     514:	ce 01       	movw	r24, r28
     516:	87 5a       	subi	r24, 0xA7	; 167
     518:	9f 4f       	sbci	r25, 0xFF	; 255
     51a:	29 e1       	ldi	r18, 0x19	; 25
     51c:	30 e0       	ldi	r19, 0x00	; 0
     51e:	fc 01       	movw	r30, r24
     520:	31 83       	std	Z+1, r19	; 0x01
     522:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     524:	ce 01       	movw	r24, r28
     526:	87 5a       	subi	r24, 0xA7	; 167
     528:	9f 4f       	sbci	r25, 0xFF	; 255
     52a:	fc 01       	movw	r30, r24
     52c:	80 81       	ld	r24, Z
     52e:	91 81       	ldd	r25, Z+1	; 0x01
     530:	01 97       	sbiw	r24, 0x01	; 1
     532:	f1 f7       	brne	.-4      	; 0x530 <__stack+0x31>
     534:	9e 01       	movw	r18, r28
     536:	27 5a       	subi	r18, 0xA7	; 167
     538:	3f 4f       	sbci	r19, 0xFF	; 255
     53a:	f9 01       	movw	r30, r18
     53c:	91 83       	std	Z+1, r25	; 0x01
     53e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     540:	ce 01       	movw	r24, r28
     542:	89 5a       	subi	r24, 0xA9	; 169
     544:	9f 4f       	sbci	r25, 0xFF	; 255
     546:	9e 01       	movw	r18, r28
     548:	29 5a       	subi	r18, 0xA9	; 169
     54a:	3f 4f       	sbci	r19, 0xFF	; 255
     54c:	f9 01       	movw	r30, r18
     54e:	20 81       	ld	r18, Z
     550:	31 81       	ldd	r19, Z+1	; 0x01
     552:	21 50       	subi	r18, 0x01	; 1
     554:	31 09       	sbc	r19, r1
     556:	fc 01       	movw	r30, r24
     558:	31 83       	std	Z+1, r19	; 0x01
     55a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     55c:	ce 01       	movw	r24, r28
     55e:	89 5a       	subi	r24, 0xA9	; 169
     560:	9f 4f       	sbci	r25, 0xFF	; 255
     562:	fc 01       	movw	r30, r24
     564:	80 81       	ld	r24, Z
     566:	91 81       	ldd	r25, Z+1	; 0x01
     568:	89 2b       	or	r24, r25
     56a:	a1 f6       	brne	.-88     	; 0x514 <__stack+0x15>
     56c:	77 c0       	rjmp	.+238    	; 0x65c <__stack+0x15d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     56e:	8e 01       	movw	r16, r28
     570:	09 5a       	subi	r16, 0xA9	; 169
     572:	1f 4f       	sbci	r17, 0xFF	; 255
     574:	ce 01       	movw	r24, r28
     576:	8d 5a       	subi	r24, 0xAD	; 173
     578:	9f 4f       	sbci	r25, 0xFF	; 255
     57a:	fc 01       	movw	r30, r24
     57c:	60 81       	ld	r22, Z
     57e:	71 81       	ldd	r23, Z+1	; 0x01
     580:	82 81       	ldd	r24, Z+2	; 0x02
     582:	93 81       	ldd	r25, Z+3	; 0x03
     584:	d2 db       	rcall	.-2140   	; 0xfffffd2a <__eeprom_end+0xff7efd2a>
     586:	dc 01       	movw	r26, r24
     588:	cb 01       	movw	r24, r22
     58a:	f8 01       	movw	r30, r16
     58c:	91 83       	std	Z+1, r25	; 0x01
     58e:	80 83       	st	Z, r24
     590:	ce 01       	movw	r24, r28
     592:	85 5a       	subi	r24, 0xA5	; 165
     594:	9f 4f       	sbci	r25, 0xFF	; 255
     596:	9e 01       	movw	r18, r28
     598:	29 5a       	subi	r18, 0xA9	; 169
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	f9 01       	movw	r30, r18
     59e:	20 81       	ld	r18, Z
     5a0:	31 81       	ldd	r19, Z+1	; 0x01
     5a2:	fc 01       	movw	r30, r24
     5a4:	31 83       	std	Z+1, r19	; 0x01
     5a6:	20 83       	st	Z, r18
     5a8:	ce 01       	movw	r24, r28
     5aa:	85 5a       	subi	r24, 0xA5	; 165
     5ac:	9f 4f       	sbci	r25, 0xFF	; 255
     5ae:	fc 01       	movw	r30, r24
     5b0:	80 81       	ld	r24, Z
     5b2:	91 81       	ldd	r25, Z+1	; 0x01
     5b4:	01 97       	sbiw	r24, 0x01	; 1
     5b6:	f1 f7       	brne	.-4      	; 0x5b4 <__stack+0xb5>
     5b8:	9e 01       	movw	r18, r28
     5ba:	25 5a       	subi	r18, 0xA5	; 165
     5bc:	3f 4f       	sbci	r19, 0xFF	; 255
     5be:	f9 01       	movw	r30, r18
     5c0:	91 83       	std	Z+1, r25	; 0x01
     5c2:	80 83       	st	Z, r24
     5c4:	4b c0       	rjmp	.+150    	; 0x65c <__stack+0x15d>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     5c6:	ce 01       	movw	r24, r28
     5c8:	8a 5b       	subi	r24, 0xBA	; 186
     5ca:	9f 4f       	sbci	r25, 0xFF	; 255
     5cc:	20 e0       	ldi	r18, 0x00	; 0
     5ce:	30 e0       	ldi	r19, 0x00	; 0
     5d0:	4f e7       	ldi	r20, 0x7F	; 127
     5d2:	53 e4       	ldi	r21, 0x43	; 67
     5d4:	fc 01       	movw	r30, r24
     5d6:	60 81       	ld	r22, Z
     5d8:	71 81       	ldd	r23, Z+1	; 0x01
     5da:	82 81       	ldd	r24, Z+2	; 0x02
     5dc:	93 81       	ldd	r25, Z+3	; 0x03
     5de:	46 dc       	rcall	.-1908   	; 0xfffffe6c <__eeprom_end+0xff7efe6c>
     5e0:	18 16       	cp	r1, r24
     5e2:	64 f5       	brge	.+88     	; 0x63c <__stack+0x13d>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     5e4:	8e 01       	movw	r16, r28
     5e6:	03 5a       	subi	r16, 0xA3	; 163
     5e8:	1f 4f       	sbci	r17, 0xFF	; 255
     5ea:	ce 01       	movw	r24, r28
     5ec:	86 5b       	subi	r24, 0xB6	; 182
     5ee:	9f 4f       	sbci	r25, 0xFF	; 255
     5f0:	fc 01       	movw	r30, r24
     5f2:	60 81       	ld	r22, Z
     5f4:	71 81       	ldd	r23, Z+1	; 0x01
     5f6:	82 81       	ldd	r24, Z+2	; 0x02
     5f8:	93 81       	ldd	r25, Z+3	; 0x03
     5fa:	97 db       	rcall	.-2258   	; 0xfffffd2a <__eeprom_end+0xff7efd2a>
     5fc:	dc 01       	movw	r26, r24
     5fe:	cb 01       	movw	r24, r22
     600:	f8 01       	movw	r30, r16
     602:	91 83       	std	Z+1, r25	; 0x01
     604:	80 83       	st	Z, r24
     606:	ce 01       	movw	r24, r28
     608:	81 5a       	subi	r24, 0xA1	; 161
     60a:	9f 4f       	sbci	r25, 0xFF	; 255
     60c:	9e 01       	movw	r18, r28
     60e:	23 5a       	subi	r18, 0xA3	; 163
     610:	3f 4f       	sbci	r19, 0xFF	; 255
     612:	f9 01       	movw	r30, r18
     614:	20 81       	ld	r18, Z
     616:	31 81       	ldd	r19, Z+1	; 0x01
     618:	fc 01       	movw	r30, r24
     61a:	31 83       	std	Z+1, r19	; 0x01
     61c:	20 83       	st	Z, r18
     61e:	ce 01       	movw	r24, r28
     620:	81 5a       	subi	r24, 0xA1	; 161
     622:	9f 4f       	sbci	r25, 0xFF	; 255
     624:	fc 01       	movw	r30, r24
     626:	80 81       	ld	r24, Z
     628:	91 81       	ldd	r25, Z+1	; 0x01
     62a:	01 97       	sbiw	r24, 0x01	; 1
     62c:	f1 f7       	brne	.-4      	; 0x62a <__stack+0x12b>
     62e:	9e 01       	movw	r18, r28
     630:	21 5a       	subi	r18, 0xA1	; 161
     632:	3f 4f       	sbci	r19, 0xFF	; 255
     634:	f9 01       	movw	r30, r18
     636:	91 83       	std	Z+1, r25	; 0x01
     638:	80 83       	st	Z, r24
     63a:	27 c0       	rjmp	.+78     	; 0x68a <__stack+0x18b>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     63c:	8e 01       	movw	r16, r28
     63e:	02 5b       	subi	r16, 0xB2	; 178
     640:	1f 4f       	sbci	r17, 0xFF	; 255
     642:	ce 01       	movw	r24, r28
     644:	8a 5b       	subi	r24, 0xBA	; 186
     646:	9f 4f       	sbci	r25, 0xFF	; 255
     648:	fc 01       	movw	r30, r24
     64a:	60 81       	ld	r22, Z
     64c:	71 81       	ldd	r23, Z+1	; 0x01
     64e:	82 81       	ldd	r24, Z+2	; 0x02
     650:	93 81       	ldd	r25, Z+3	; 0x03
     652:	6b db       	rcall	.-2346   	; 0xfffffd2a <__eeprom_end+0xff7efd2a>
     654:	dc 01       	movw	r26, r24
     656:	cb 01       	movw	r24, r22
     658:	f8 01       	movw	r30, r16
     65a:	80 83       	st	Z, r24
     65c:	ce 01       	movw	r24, r28
     65e:	8f 59       	subi	r24, 0x9F	; 159
     660:	9f 4f       	sbci	r25, 0xFF	; 255
     662:	9e 01       	movw	r18, r28
     664:	22 5b       	subi	r18, 0xB2	; 178
     666:	3f 4f       	sbci	r19, 0xFF	; 255
     668:	f9 01       	movw	r30, r18
     66a:	20 81       	ld	r18, Z
     66c:	fc 01       	movw	r30, r24
     66e:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     670:	ce 01       	movw	r24, r28
     672:	8f 59       	subi	r24, 0x9F	; 159
     674:	9f 4f       	sbci	r25, 0xFF	; 255
     676:	fc 01       	movw	r30, r24
     678:	80 81       	ld	r24, Z
     67a:	28 2f       	mov	r18, r24
     67c:	2a 95       	dec	r18
     67e:	f1 f7       	brne	.-4      	; 0x67c <__stack+0x17d>
     680:	ce 01       	movw	r24, r28
     682:	8f 59       	subi	r24, 0x9F	; 159
     684:	9f 4f       	sbci	r25, 0xFF	; 255
     686:	fc 01       	movw	r30, r24
     688:	20 83       	st	Z, r18
        lcd_e_delay();        
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
     68a:	86 e2       	ldi	r24, 0x26	; 38
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	fc 01       	movw	r30, r24
     690:	80 81       	ld	r24, Z
     692:	82 95       	swap	r24
     694:	80 7f       	andi	r24, 0xF0	; 240
     696:	89 83       	std	Y+1, r24	; 0x01
        lcd_e_low();
     698:	88 e2       	ldi	r24, 0x28	; 40
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	28 e2       	ldi	r18, 0x28	; 40
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	f9 01       	movw	r30, r18
     6a2:	20 81       	ld	r18, Z
     6a4:	2f 7b       	andi	r18, 0xBF	; 191
     6a6:	fc 01       	movw	r30, r24
     6a8:	20 83       	st	Z, r18
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	a0 e8       	ldi	r26, 0x80	; 128
     6b0:	bf e3       	ldi	r27, 0x3F	; 63
     6b2:	8e 83       	std	Y+6, r24	; 0x06
     6b4:	9f 83       	std	Y+7, r25	; 0x07
     6b6:	a8 87       	std	Y+8, r26	; 0x08
     6b8:	b9 87       	std	Y+9, r27	; 0x09
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     6ba:	2b ea       	ldi	r18, 0xAB	; 171
     6bc:	3a ea       	ldi	r19, 0xAA	; 170
     6be:	4a ea       	ldi	r20, 0xAA	; 170
     6c0:	5e e3       	ldi	r21, 0x3E	; 62
     6c2:	6e 81       	ldd	r22, Y+6	; 0x06
     6c4:	7f 81       	ldd	r23, Y+7	; 0x07
     6c6:	88 85       	ldd	r24, Y+8	; 0x08
     6c8:	99 85       	ldd	r25, Y+9	; 0x09
     6ca:	d4 db       	rcall	.-2136   	; 0xfffffe74 <__eeprom_end+0xff7efe74>
     6cc:	dc 01       	movw	r26, r24
     6ce:	cb 01       	movw	r24, r22
     6d0:	8a a7       	std	Y+42, r24	; 0x2a
     6d2:	9b a7       	std	Y+43, r25	; 0x2b
     6d4:	ac a7       	std	Y+44, r26	; 0x2c
     6d6:	bd a7       	std	Y+45, r27	; 0x2d
	__tmp2 = ((F_CPU) / 4e6) * __us;
     6d8:	20 e0       	ldi	r18, 0x00	; 0
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	40 e8       	ldi	r20, 0x80	; 128
     6de:	5e e3       	ldi	r21, 0x3E	; 62
     6e0:	6e 81       	ldd	r22, Y+6	; 0x06
     6e2:	7f 81       	ldd	r23, Y+7	; 0x07
     6e4:	88 85       	ldd	r24, Y+8	; 0x08
     6e6:	99 85       	ldd	r25, Y+9	; 0x09
     6e8:	c5 db       	rcall	.-2166   	; 0xfffffe74 <__eeprom_end+0xff7efe74>
     6ea:	dc 01       	movw	r26, r24
     6ec:	cb 01       	movw	r24, r22
     6ee:	8e a7       	std	Y+46, r24	; 0x2e
     6f0:	9f a7       	std	Y+47, r25	; 0x2f
     6f2:	a8 ab       	std	Y+48, r26	; 0x30
     6f4:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
     6f6:	20 e0       	ldi	r18, 0x00	; 0
     6f8:	30 e0       	ldi	r19, 0x00	; 0
     6fa:	40 e8       	ldi	r20, 0x80	; 128
     6fc:	5f e3       	ldi	r21, 0x3F	; 63
     6fe:	6a a5       	ldd	r22, Y+42	; 0x2a
     700:	7b a5       	ldd	r23, Y+43	; 0x2b
     702:	8c a5       	ldd	r24, Y+44	; 0x2c
     704:	9d a5       	ldd	r25, Y+45	; 0x2d
     706:	a5 da       	rcall	.-2742   	; 0xfffffc52 <__eeprom_end+0xff7efc52>
     708:	88 23       	and	r24, r24
     70a:	1c f4       	brge	.+6      	; 0x712 <__stack+0x213>
		__ticks = 1;
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	8a ab       	std	Y+50, r24	; 0x32
     710:	c5 c0       	rjmp	.+394    	; 0x89c <__stack+0x39d>
	else if (__tmp2 > 65535)
     712:	20 e0       	ldi	r18, 0x00	; 0
     714:	3f ef       	ldi	r19, 0xFF	; 255
     716:	4f e7       	ldi	r20, 0x7F	; 127
     718:	57 e4       	ldi	r21, 0x47	; 71
     71a:	6e a5       	ldd	r22, Y+46	; 0x2e
     71c:	7f a5       	ldd	r23, Y+47	; 0x2f
     71e:	88 a9       	ldd	r24, Y+48	; 0x30
     720:	99 a9       	ldd	r25, Y+49	; 0x31
     722:	a4 db       	rcall	.-2232   	; 0xfffffe6c <__eeprom_end+0xff7efe6c>
     724:	18 16       	cp	r1, r24
     726:	0c f0       	brlt	.+2      	; 0x72a <__stack+0x22b>
     728:	7e c0       	rjmp	.+252    	; 0x826 <__stack+0x327>
	{
		_delay_ms(__us / 1000.0);
     72a:	20 e0       	ldi	r18, 0x00	; 0
     72c:	30 e0       	ldi	r19, 0x00	; 0
     72e:	4a e7       	ldi	r20, 0x7A	; 122
     730:	54 e4       	ldi	r21, 0x44	; 68
     732:	6e 81       	ldd	r22, Y+6	; 0x06
     734:	7f 81       	ldd	r23, Y+7	; 0x07
     736:	88 85       	ldd	r24, Y+8	; 0x08
     738:	99 85       	ldd	r25, Y+9	; 0x09
     73a:	8f da       	rcall	.-2786   	; 0xfffffc5a <__eeprom_end+0xff7efc5a>
     73c:	dc 01       	movw	r26, r24
     73e:	cb 01       	movw	r24, r22
     740:	8b ab       	std	Y+51, r24	; 0x33
     742:	9c ab       	std	Y+52, r25	; 0x34
     744:	ad ab       	std	Y+53, r26	; 0x35
     746:	be ab       	std	Y+54, r27	; 0x36

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     748:	20 e0       	ldi	r18, 0x00	; 0
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	4a e7       	ldi	r20, 0x7A	; 122
     74e:	53 e4       	ldi	r21, 0x43	; 67
     750:	6b a9       	ldd	r22, Y+51	; 0x33
     752:	7c a9       	ldd	r23, Y+52	; 0x34
     754:	8d a9       	ldd	r24, Y+53	; 0x35
     756:	9e a9       	ldd	r25, Y+54	; 0x36
     758:	8d db       	rcall	.-2278   	; 0xfffffe74 <__eeprom_end+0xff7efe74>
     75a:	dc 01       	movw	r26, r24
     75c:	cb 01       	movw	r24, r22
     75e:	8f ab       	std	Y+55, r24	; 0x37
     760:	98 af       	std	Y+56, r25	; 0x38
     762:	a9 af       	std	Y+57, r26	; 0x39
     764:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
     766:	20 e0       	ldi	r18, 0x00	; 0
     768:	30 e0       	ldi	r19, 0x00	; 0
     76a:	40 e8       	ldi	r20, 0x80	; 128
     76c:	5f e3       	ldi	r21, 0x3F	; 63
     76e:	6f a9       	ldd	r22, Y+55	; 0x37
     770:	78 ad       	ldd	r23, Y+56	; 0x38
     772:	89 ad       	ldd	r24, Y+57	; 0x39
     774:	9a ad       	ldd	r25, Y+58	; 0x3a
     776:	6d da       	rcall	.-2854   	; 0xfffffc52 <__eeprom_end+0xff7efc52>
     778:	88 23       	and	r24, r24
     77a:	2c f4       	brge	.+10     	; 0x786 <__stack+0x287>
		__ticks = 1;
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	9c af       	std	Y+60, r25	; 0x3c
     782:	8b af       	std	Y+59, r24	; 0x3b
     784:	3b c0       	rjmp	.+118    	; 0x7fc <__stack+0x2fd>
	else if (__tmp > 65535)
     786:	20 e0       	ldi	r18, 0x00	; 0
     788:	3f ef       	ldi	r19, 0xFF	; 255
     78a:	4f e7       	ldi	r20, 0x7F	; 127
     78c:	57 e4       	ldi	r21, 0x47	; 71
     78e:	6f a9       	ldd	r22, Y+55	; 0x37
     790:	78 ad       	ldd	r23, Y+56	; 0x38
     792:	89 ad       	ldd	r24, Y+57	; 0x39
     794:	9a ad       	ldd	r25, Y+58	; 0x3a
     796:	6a db       	rcall	.-2348   	; 0xfffffe6c <__eeprom_end+0xff7efe6c>
     798:	18 16       	cp	r1, r24
     79a:	3c f5       	brge	.+78     	; 0x7ea <__stack+0x2eb>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     79c:	20 e0       	ldi	r18, 0x00	; 0
     79e:	30 e0       	ldi	r19, 0x00	; 0
     7a0:	40 e2       	ldi	r20, 0x20	; 32
     7a2:	51 e4       	ldi	r21, 0x41	; 65
     7a4:	6b a9       	ldd	r22, Y+51	; 0x33
     7a6:	7c a9       	ldd	r23, Y+52	; 0x34
     7a8:	8d a9       	ldd	r24, Y+53	; 0x35
     7aa:	9e a9       	ldd	r25, Y+54	; 0x36
     7ac:	63 db       	rcall	.-2362   	; 0xfffffe74 <__eeprom_end+0xff7efe74>
     7ae:	dc 01       	movw	r26, r24
     7b0:	cb 01       	movw	r24, r22
     7b2:	bc 01       	movw	r22, r24
     7b4:	cd 01       	movw	r24, r26
     7b6:	b9 da       	rcall	.-2702   	; 0xfffffd2a <__eeprom_end+0xff7efd2a>
     7b8:	dc 01       	movw	r26, r24
     7ba:	cb 01       	movw	r24, r22
     7bc:	9c af       	std	Y+60, r25	; 0x3c
     7be:	8b af       	std	Y+59, r24	; 0x3b
     7c0:	0f c0       	rjmp	.+30     	; 0x7e0 <__stack+0x2e1>
     7c2:	89 e1       	ldi	r24, 0x19	; 25
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	9e af       	std	Y+62, r25	; 0x3e
     7c8:	8d af       	std	Y+61, r24	; 0x3d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     7ca:	8d ad       	ldd	r24, Y+61	; 0x3d
     7cc:	9e ad       	ldd	r25, Y+62	; 0x3e
     7ce:	01 97       	sbiw	r24, 0x01	; 1
     7d0:	f1 f7       	brne	.-4      	; 0x7ce <__stack+0x2cf>
     7d2:	9e af       	std	Y+62, r25	; 0x3e
     7d4:	8d af       	std	Y+61, r24	; 0x3d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7d6:	8b ad       	ldd	r24, Y+59	; 0x3b
     7d8:	9c ad       	ldd	r25, Y+60	; 0x3c
     7da:	01 97       	sbiw	r24, 0x01	; 1
     7dc:	9c af       	std	Y+60, r25	; 0x3c
     7de:	8b af       	std	Y+59, r24	; 0x3b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7e0:	8b ad       	ldd	r24, Y+59	; 0x3b
     7e2:	9c ad       	ldd	r25, Y+60	; 0x3c
     7e4:	89 2b       	or	r24, r25
     7e6:	69 f7       	brne	.-38     	; 0x7c2 <__stack+0x2c3>
     7e8:	59 c0       	rjmp	.+178    	; 0x89c <__stack+0x39d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7ea:	6f a9       	ldd	r22, Y+55	; 0x37
     7ec:	78 ad       	ldd	r23, Y+56	; 0x38
     7ee:	89 ad       	ldd	r24, Y+57	; 0x39
     7f0:	9a ad       	ldd	r25, Y+58	; 0x3a
     7f2:	9b da       	rcall	.-2762   	; 0xfffffd2a <__eeprom_end+0xff7efd2a>
     7f4:	dc 01       	movw	r26, r24
     7f6:	cb 01       	movw	r24, r22
     7f8:	9c af       	std	Y+60, r25	; 0x3c
     7fa:	8b af       	std	Y+59, r24	; 0x3b
     7fc:	2b ad       	ldd	r18, Y+59	; 0x3b
     7fe:	3c ad       	ldd	r19, Y+60	; 0x3c
     800:	ce 01       	movw	r24, r28
     802:	cf 96       	adiw	r24, 0x3f	; 63
     804:	fc 01       	movw	r30, r24
     806:	31 83       	std	Z+1, r19	; 0x01
     808:	20 83       	st	Z, r18
     80a:	ce 01       	movw	r24, r28
     80c:	cf 96       	adiw	r24, 0x3f	; 63
     80e:	fc 01       	movw	r30, r24
     810:	80 81       	ld	r24, Z
     812:	91 81       	ldd	r25, Z+1	; 0x01
     814:	01 97       	sbiw	r24, 0x01	; 1
     816:	f1 f7       	brne	.-4      	; 0x814 <__stack+0x315>
     818:	9e 01       	movw	r18, r28
     81a:	21 5c       	subi	r18, 0xC1	; 193
     81c:	3f 4f       	sbci	r19, 0xFF	; 255
     81e:	f9 01       	movw	r30, r18
     820:	91 83       	std	Z+1, r25	; 0x01
     822:	80 83       	st	Z, r24
     824:	3b c0       	rjmp	.+118    	; 0x89c <__stack+0x39d>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     826:	20 e0       	ldi	r18, 0x00	; 0
     828:	30 e0       	ldi	r19, 0x00	; 0
     82a:	4f e7       	ldi	r20, 0x7F	; 127
     82c:	53 e4       	ldi	r21, 0x43	; 67
     82e:	6a a5       	ldd	r22, Y+42	; 0x2a
     830:	7b a5       	ldd	r23, Y+43	; 0x2b
     832:	8c a5       	ldd	r24, Y+44	; 0x2c
     834:	9d a5       	ldd	r25, Y+45	; 0x2d
     836:	1a db       	rcall	.-2508   	; 0xfffffe6c <__eeprom_end+0xff7efe6c>
     838:	18 16       	cp	r1, r24
     83a:	44 f5       	brge	.+80     	; 0x88c <__stack+0x38d>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     83c:	8e 01       	movw	r16, r28
     83e:	0f 5b       	subi	r16, 0xBF	; 191
     840:	1f 4f       	sbci	r17, 0xFF	; 255
     842:	6e a5       	ldd	r22, Y+46	; 0x2e
     844:	7f a5       	ldd	r23, Y+47	; 0x2f
     846:	88 a9       	ldd	r24, Y+48	; 0x30
     848:	99 a9       	ldd	r25, Y+49	; 0x31
     84a:	6f da       	rcall	.-2850   	; 0xfffffd2a <__eeprom_end+0xff7efd2a>
     84c:	dc 01       	movw	r26, r24
     84e:	cb 01       	movw	r24, r22
     850:	f8 01       	movw	r30, r16
     852:	91 83       	std	Z+1, r25	; 0x01
     854:	80 83       	st	Z, r24
     856:	ce 01       	movw	r24, r28
     858:	8d 5b       	subi	r24, 0xBD	; 189
     85a:	9f 4f       	sbci	r25, 0xFF	; 255
     85c:	9e 01       	movw	r18, r28
     85e:	2f 5b       	subi	r18, 0xBF	; 191
     860:	3f 4f       	sbci	r19, 0xFF	; 255
     862:	f9 01       	movw	r30, r18
     864:	20 81       	ld	r18, Z
     866:	31 81       	ldd	r19, Z+1	; 0x01
     868:	fc 01       	movw	r30, r24
     86a:	31 83       	std	Z+1, r19	; 0x01
     86c:	20 83       	st	Z, r18
     86e:	ce 01       	movw	r24, r28
     870:	8d 5b       	subi	r24, 0xBD	; 189
     872:	9f 4f       	sbci	r25, 0xFF	; 255
     874:	fc 01       	movw	r30, r24
     876:	80 81       	ld	r24, Z
     878:	91 81       	ldd	r25, Z+1	; 0x01
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	f1 f7       	brne	.-4      	; 0x87a <__stack+0x37b>
     87e:	9e 01       	movw	r18, r28
     880:	2d 5b       	subi	r18, 0xBD	; 189
     882:	3f 4f       	sbci	r19, 0xFF	; 255
     884:	f9 01       	movw	r30, r18
     886:	91 83       	std	Z+1, r25	; 0x01
     888:	80 83       	st	Z, r24
     88a:	1b c0       	rjmp	.+54     	; 0x8c2 <__stack+0x3c3>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     88c:	6a a5       	ldd	r22, Y+42	; 0x2a
     88e:	7b a5       	ldd	r23, Y+43	; 0x2b
     890:	8c a5       	ldd	r24, Y+44	; 0x2c
     892:	9d a5       	ldd	r25, Y+45	; 0x2d
     894:	4a da       	rcall	.-2924   	; 0xfffffd2a <__eeprom_end+0xff7efd2a>
     896:	dc 01       	movw	r26, r24
     898:	cb 01       	movw	r24, r22
     89a:	8a ab       	std	Y+50, r24	; 0x32
     89c:	ce 01       	movw	r24, r28
     89e:	8b 5b       	subi	r24, 0xBB	; 187
     8a0:	9f 4f       	sbci	r25, 0xFF	; 255
     8a2:	2a a9       	ldd	r18, Y+50	; 0x32
     8a4:	fc 01       	movw	r30, r24
     8a6:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     8a8:	ce 01       	movw	r24, r28
     8aa:	8b 5b       	subi	r24, 0xBB	; 187
     8ac:	9f 4f       	sbci	r25, 0xFF	; 255
     8ae:	fc 01       	movw	r30, r24
     8b0:	80 81       	ld	r24, Z
     8b2:	28 2f       	mov	r18, r24
     8b4:	2a 95       	dec	r18
     8b6:	f1 f7       	brne	.-4      	; 0x8b4 <__stack+0x3b5>
     8b8:	ce 01       	movw	r24, r28
     8ba:	8b 5b       	subi	r24, 0xBB	; 187
     8bc:	9f 4f       	sbci	r25, 0xFF	; 255
     8be:	fc 01       	movw	r30, r24
     8c0:	20 83       	st	Z, r18
        
        lcd_e_delay();                       /* Enable 500ns low       */
        
        lcd_e_high();
     8c2:	88 e2       	ldi	r24, 0x28	; 40
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	28 e2       	ldi	r18, 0x28	; 40
     8c8:	30 e0       	ldi	r19, 0x00	; 0
     8ca:	f9 01       	movw	r30, r18
     8cc:	20 81       	ld	r18, Z
     8ce:	20 64       	ori	r18, 0x40	; 64
     8d0:	fc 01       	movw	r30, r24
     8d2:	20 83       	st	Z, r18
     8d4:	80 e0       	ldi	r24, 0x00	; 0
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	a0 e8       	ldi	r26, 0x80	; 128
     8da:	bf e3       	ldi	r27, 0x3F	; 63
     8dc:	8a 87       	std	Y+10, r24	; 0x0a
     8de:	9b 87       	std	Y+11, r25	; 0x0b
     8e0:	ac 87       	std	Y+12, r26	; 0x0c
     8e2:	bd 87       	std	Y+13, r27	; 0x0d
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     8e4:	2b ea       	ldi	r18, 0xAB	; 171
     8e6:	3a ea       	ldi	r19, 0xAA	; 170
     8e8:	4a ea       	ldi	r20, 0xAA	; 170
     8ea:	5e e3       	ldi	r21, 0x3E	; 62
     8ec:	6a 85       	ldd	r22, Y+10	; 0x0a
     8ee:	7b 85       	ldd	r23, Y+11	; 0x0b
     8f0:	8c 85       	ldd	r24, Y+12	; 0x0c
     8f2:	9d 85       	ldd	r25, Y+13	; 0x0d
     8f4:	bf da       	rcall	.-2690   	; 0xfffffe74 <__eeprom_end+0xff7efe74>
     8f6:	dc 01       	movw	r26, r24
     8f8:	cb 01       	movw	r24, r22
     8fa:	8e 87       	std	Y+14, r24	; 0x0e
     8fc:	9f 87       	std	Y+15, r25	; 0x0f
     8fe:	a8 8b       	std	Y+16, r26	; 0x10
     900:	b9 8b       	std	Y+17, r27	; 0x11
	__tmp2 = ((F_CPU) / 4e6) * __us;
     902:	20 e0       	ldi	r18, 0x00	; 0
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	40 e8       	ldi	r20, 0x80	; 128
     908:	5e e3       	ldi	r21, 0x3E	; 62
     90a:	6a 85       	ldd	r22, Y+10	; 0x0a
     90c:	7b 85       	ldd	r23, Y+11	; 0x0b
     90e:	8c 85       	ldd	r24, Y+12	; 0x0c
     910:	9d 85       	ldd	r25, Y+13	; 0x0d
     912:	b0 da       	rcall	.-2720   	; 0xfffffe74 <__eeprom_end+0xff7efe74>
     914:	dc 01       	movw	r26, r24
     916:	cb 01       	movw	r24, r22
     918:	8a 8b       	std	Y+18, r24	; 0x12
     91a:	9b 8b       	std	Y+19, r25	; 0x13
     91c:	ac 8b       	std	Y+20, r26	; 0x14
     91e:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
     920:	20 e0       	ldi	r18, 0x00	; 0
     922:	30 e0       	ldi	r19, 0x00	; 0
     924:	40 e8       	ldi	r20, 0x80	; 128
     926:	5f e3       	ldi	r21, 0x3F	; 63
     928:	6e 85       	ldd	r22, Y+14	; 0x0e
     92a:	7f 85       	ldd	r23, Y+15	; 0x0f
     92c:	88 89       	ldd	r24, Y+16	; 0x10
     92e:	99 89       	ldd	r25, Y+17	; 0x11
     930:	90 d9       	rcall	.-3296   	; 0xfffffc52 <__eeprom_end+0xff7efc52>
     932:	88 23       	and	r24, r24
     934:	1c f4       	brge	.+6      	; 0x93c <__stack+0x43d>
		__ticks = 1;
     936:	81 e0       	ldi	r24, 0x01	; 1
     938:	8e 8b       	std	Y+22, r24	; 0x16
     93a:	a7 c0       	rjmp	.+334    	; 0xa8a <__stack+0x58b>
	else if (__tmp2 > 65535)
     93c:	20 e0       	ldi	r18, 0x00	; 0
     93e:	3f ef       	ldi	r19, 0xFF	; 255
     940:	4f e7       	ldi	r20, 0x7F	; 127
     942:	57 e4       	ldi	r21, 0x47	; 71
     944:	6a 89       	ldd	r22, Y+18	; 0x12
     946:	7b 89       	ldd	r23, Y+19	; 0x13
     948:	8c 89       	ldd	r24, Y+20	; 0x14
     94a:	9d 89       	ldd	r25, Y+21	; 0x15
     94c:	8f da       	rcall	.-2786   	; 0xfffffe6c <__eeprom_end+0xff7efe6c>
     94e:	18 16       	cp	r1, r24
     950:	0c f0       	brlt	.+2      	; 0x954 <__stack+0x455>
     952:	74 c0       	rjmp	.+232    	; 0xa3c <__stack+0x53d>
	{
		_delay_ms(__us / 1000.0);
     954:	20 e0       	ldi	r18, 0x00	; 0
     956:	30 e0       	ldi	r19, 0x00	; 0
     958:	4a e7       	ldi	r20, 0x7A	; 122
     95a:	54 e4       	ldi	r21, 0x44	; 68
     95c:	6a 85       	ldd	r22, Y+10	; 0x0a
     95e:	7b 85       	ldd	r23, Y+11	; 0x0b
     960:	8c 85       	ldd	r24, Y+12	; 0x0c
     962:	9d 85       	ldd	r25, Y+13	; 0x0d
     964:	7a d9       	rcall	.-3340   	; 0xfffffc5a <__eeprom_end+0xff7efc5a>
     966:	dc 01       	movw	r26, r24
     968:	cb 01       	movw	r24, r22
     96a:	8f 8b       	std	Y+23, r24	; 0x17
     96c:	98 8f       	std	Y+24, r25	; 0x18
     96e:	a9 8f       	std	Y+25, r26	; 0x19
     970:	ba 8f       	std	Y+26, r27	; 0x1a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     972:	20 e0       	ldi	r18, 0x00	; 0
     974:	30 e0       	ldi	r19, 0x00	; 0
     976:	4a e7       	ldi	r20, 0x7A	; 122
     978:	53 e4       	ldi	r21, 0x43	; 67
     97a:	6f 89       	ldd	r22, Y+23	; 0x17
     97c:	78 8d       	ldd	r23, Y+24	; 0x18
     97e:	89 8d       	ldd	r24, Y+25	; 0x19
     980:	9a 8d       	ldd	r25, Y+26	; 0x1a
     982:	78 da       	rcall	.-2832   	; 0xfffffe74 <__eeprom_end+0xff7efe74>
     984:	dc 01       	movw	r26, r24
     986:	cb 01       	movw	r24, r22
     988:	8b 8f       	std	Y+27, r24	; 0x1b
     98a:	9c 8f       	std	Y+28, r25	; 0x1c
     98c:	ad 8f       	std	Y+29, r26	; 0x1d
     98e:	be 8f       	std	Y+30, r27	; 0x1e
	if (__tmp < 1.0)
     990:	20 e0       	ldi	r18, 0x00	; 0
     992:	30 e0       	ldi	r19, 0x00	; 0
     994:	40 e8       	ldi	r20, 0x80	; 128
     996:	5f e3       	ldi	r21, 0x3F	; 63
     998:	6b 8d       	ldd	r22, Y+27	; 0x1b
     99a:	7c 8d       	ldd	r23, Y+28	; 0x1c
     99c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     99e:	9e 8d       	ldd	r25, Y+30	; 0x1e
     9a0:	58 d9       	rcall	.-3408   	; 0xfffffc52 <__eeprom_end+0xff7efc52>
     9a2:	88 23       	and	r24, r24
     9a4:	2c f4       	brge	.+10     	; 0x9b0 <__stack+0x4b1>
		__ticks = 1;
     9a6:	81 e0       	ldi	r24, 0x01	; 1
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	98 a3       	std	Y+32, r25	; 0x20
     9ac:	8f 8f       	std	Y+31, r24	; 0x1f
     9ae:	3b c0       	rjmp	.+118    	; 0xa26 <__stack+0x527>
	else if (__tmp > 65535)
     9b0:	20 e0       	ldi	r18, 0x00	; 0
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	4f e7       	ldi	r20, 0x7F	; 127
     9b6:	57 e4       	ldi	r21, 0x47	; 71
     9b8:	6b 8d       	ldd	r22, Y+27	; 0x1b
     9ba:	7c 8d       	ldd	r23, Y+28	; 0x1c
     9bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
     9be:	9e 8d       	ldd	r25, Y+30	; 0x1e
     9c0:	55 da       	rcall	.-2902   	; 0xfffffe6c <__eeprom_end+0xff7efe6c>
     9c2:	18 16       	cp	r1, r24
     9c4:	3c f5       	brge	.+78     	; 0xa14 <__stack+0x515>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9c6:	20 e0       	ldi	r18, 0x00	; 0
     9c8:	30 e0       	ldi	r19, 0x00	; 0
     9ca:	40 e2       	ldi	r20, 0x20	; 32
     9cc:	51 e4       	ldi	r21, 0x41	; 65
     9ce:	6f 89       	ldd	r22, Y+23	; 0x17
     9d0:	78 8d       	ldd	r23, Y+24	; 0x18
     9d2:	89 8d       	ldd	r24, Y+25	; 0x19
     9d4:	9a 8d       	ldd	r25, Y+26	; 0x1a
     9d6:	4e da       	rcall	.-2916   	; 0xfffffe74 <__eeprom_end+0xff7efe74>
     9d8:	dc 01       	movw	r26, r24
     9da:	cb 01       	movw	r24, r22
     9dc:	bc 01       	movw	r22, r24
     9de:	cd 01       	movw	r24, r26
     9e0:	a4 d9       	rcall	.-3256   	; 0xfffffd2a <__eeprom_end+0xff7efd2a>
     9e2:	dc 01       	movw	r26, r24
     9e4:	cb 01       	movw	r24, r22
     9e6:	98 a3       	std	Y+32, r25	; 0x20
     9e8:	8f 8f       	std	Y+31, r24	; 0x1f
     9ea:	0f c0       	rjmp	.+30     	; 0xa0a <__stack+0x50b>
     9ec:	89 e1       	ldi	r24, 0x19	; 25
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	9a a3       	std	Y+34, r25	; 0x22
     9f2:	89 a3       	std	Y+33, r24	; 0x21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     9f4:	89 a1       	ldd	r24, Y+33	; 0x21
     9f6:	9a a1       	ldd	r25, Y+34	; 0x22
     9f8:	01 97       	sbiw	r24, 0x01	; 1
     9fa:	f1 f7       	brne	.-4      	; 0x9f8 <__stack+0x4f9>
     9fc:	9a a3       	std	Y+34, r25	; 0x22
     9fe:	89 a3       	std	Y+33, r24	; 0x21
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a00:	8f 8d       	ldd	r24, Y+31	; 0x1f
     a02:	98 a1       	ldd	r25, Y+32	; 0x20
     a04:	01 97       	sbiw	r24, 0x01	; 1
     a06:	98 a3       	std	Y+32, r25	; 0x20
     a08:	8f 8f       	std	Y+31, r24	; 0x1f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a0a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     a0c:	98 a1       	ldd	r25, Y+32	; 0x20
     a0e:	89 2b       	or	r24, r25
     a10:	69 f7       	brne	.-38     	; 0x9ec <__stack+0x4ed>
     a12:	3b c0       	rjmp	.+118    	; 0xa8a <__stack+0x58b>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a14:	6b 8d       	ldd	r22, Y+27	; 0x1b
     a16:	7c 8d       	ldd	r23, Y+28	; 0x1c
     a18:	8d 8d       	ldd	r24, Y+29	; 0x1d
     a1a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     a1c:	86 d9       	rcall	.-3316   	; 0xfffffd2a <__eeprom_end+0xff7efd2a>
     a1e:	dc 01       	movw	r26, r24
     a20:	cb 01       	movw	r24, r22
     a22:	98 a3       	std	Y+32, r25	; 0x20
     a24:	8f 8f       	std	Y+31, r24	; 0x1f
     a26:	8f 8d       	ldd	r24, Y+31	; 0x1f
     a28:	98 a1       	ldd	r25, Y+32	; 0x20
     a2a:	9c a3       	std	Y+36, r25	; 0x24
     a2c:	8b a3       	std	Y+35, r24	; 0x23
     a2e:	8b a1       	ldd	r24, Y+35	; 0x23
     a30:	9c a1       	ldd	r25, Y+36	; 0x24
     a32:	01 97       	sbiw	r24, 0x01	; 1
     a34:	f1 f7       	brne	.-4      	; 0xa32 <__stack+0x533>
     a36:	9c a3       	std	Y+36, r25	; 0x24
     a38:	8b a3       	std	Y+35, r24	; 0x23
     a3a:	27 c0       	rjmp	.+78     	; 0xa8a <__stack+0x58b>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     a3c:	20 e0       	ldi	r18, 0x00	; 0
     a3e:	30 e0       	ldi	r19, 0x00	; 0
     a40:	4f e7       	ldi	r20, 0x7F	; 127
     a42:	53 e4       	ldi	r21, 0x43	; 67
     a44:	6e 85       	ldd	r22, Y+14	; 0x0e
     a46:	7f 85       	ldd	r23, Y+15	; 0x0f
     a48:	88 89       	ldd	r24, Y+16	; 0x10
     a4a:	99 89       	ldd	r25, Y+17	; 0x11
     a4c:	0f da       	rcall	.-3042   	; 0xfffffe6c <__eeprom_end+0xff7efe6c>
     a4e:	18 16       	cp	r1, r24
     a50:	a4 f4       	brge	.+40     	; 0xa7a <__stack+0x57b>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     a52:	6a 89       	ldd	r22, Y+18	; 0x12
     a54:	7b 89       	ldd	r23, Y+19	; 0x13
     a56:	8c 89       	ldd	r24, Y+20	; 0x14
     a58:	9d 89       	ldd	r25, Y+21	; 0x15
     a5a:	67 d9       	rcall	.-3378   	; 0xfffffd2a <__eeprom_end+0xff7efd2a>
     a5c:	dc 01       	movw	r26, r24
     a5e:	cb 01       	movw	r24, r22
     a60:	9e a3       	std	Y+38, r25	; 0x26
     a62:	8d a3       	std	Y+37, r24	; 0x25
     a64:	8d a1       	ldd	r24, Y+37	; 0x25
     a66:	9e a1       	ldd	r25, Y+38	; 0x26
     a68:	98 a7       	std	Y+40, r25	; 0x28
     a6a:	8f a3       	std	Y+39, r24	; 0x27
     a6c:	8f a1       	ldd	r24, Y+39	; 0x27
     a6e:	98 a5       	ldd	r25, Y+40	; 0x28
     a70:	01 97       	sbiw	r24, 0x01	; 1
     a72:	f1 f7       	brne	.-4      	; 0xa70 <__stack+0x571>
     a74:	98 a7       	std	Y+40, r25	; 0x28
     a76:	8f a3       	std	Y+39, r24	; 0x27
     a78:	0e c0       	rjmp	.+28     	; 0xa96 <__stack+0x597>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     a7a:	6e 85       	ldd	r22, Y+14	; 0x0e
     a7c:	7f 85       	ldd	r23, Y+15	; 0x0f
     a7e:	88 89       	ldd	r24, Y+16	; 0x10
     a80:	99 89       	ldd	r25, Y+17	; 0x11
     a82:	53 d9       	rcall	.-3418   	; 0xfffffd2a <__eeprom_end+0xff7efd2a>
     a84:	dc 01       	movw	r26, r24
     a86:	cb 01       	movw	r24, r22
     a88:	8e 8b       	std	Y+22, r24	; 0x16
     a8a:	8e 89       	ldd	r24, Y+22	; 0x16
     a8c:	89 a7       	std	Y+41, r24	; 0x29
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     a8e:	89 a5       	ldd	r24, Y+41	; 0x29
     a90:	8a 95       	dec	r24
     a92:	f1 f7       	brne	.-4      	; 0xa90 <__stack+0x591>
     a94:	89 a7       	std	Y+41, r24	; 0x29
        lcd_e_delay();
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
     a96:	86 e2       	ldi	r24, 0x26	; 38
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	fc 01       	movw	r30, r24
     a9c:	80 81       	ld	r24, Z
     a9e:	88 2f       	mov	r24, r24
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	8f 70       	andi	r24, 0x0F	; 15
     aa4:	99 27       	eor	r25, r25
     aa6:	98 2f       	mov	r25, r24
     aa8:	89 81       	ldd	r24, Y+1	; 0x01
     aaa:	89 2b       	or	r24, r25
     aac:	89 83       	std	Y+1, r24	; 0x01
        lcd_e_low();
     aae:	88 e2       	ldi	r24, 0x28	; 40
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	28 e2       	ldi	r18, 0x28	; 40
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	f9 01       	movw	r30, r18
     ab8:	20 81       	ld	r18, Z
     aba:	2f 7b       	andi	r18, 0xBF	; 191
     abc:	fc 01       	movw	r30, r24
     abe:	20 83       	st	Z, r18
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
        lcd_e_low();
    }
    return data;
     ac0:	89 81       	ldd	r24, Y+1	; 0x01
}
     ac2:	ce 59       	subi	r28, 0x9E	; 158
     ac4:	df 4f       	sbci	r29, 0xFF	; 255
     ac6:	0f b6       	in	r0, 0x3f	; 63
     ac8:	f8 94       	cli
     aca:	de bf       	out	0x3e, r29	; 62
     acc:	0f be       	out	0x3f, r0	; 63
     ace:	cd bf       	out	0x3d, r28	; 61
     ad0:	df 91       	pop	r29
     ad2:	cf 91       	pop	r28
     ad4:	1f 91       	pop	r17
     ad6:	0f 91       	pop	r16
     ad8:	08 95       	ret

00000ada <lcd_waitbusy>:
/*************************************************************************
loops while lcd is busy, returns address counter
*************************************************************************/
static uint8_t lcd_waitbusy(void)

{
     ada:	1f 93       	push	r17
     adc:	cf 93       	push	r28
     ade:	df 93       	push	r29
     ae0:	cd b7       	in	r28, 0x3d	; 61
     ae2:	de b7       	in	r29, 0x3e	; 62
     ae4:	a0 97       	sbiw	r28, 0x20	; 32
     ae6:	0f b6       	in	r0, 0x3f	; 63
     ae8:	f8 94       	cli
     aea:	de bf       	out	0x3e, r29	; 62
     aec:	0f be       	out	0x3f, r0	; 63
     aee:	cd bf       	out	0x3d, r28	; 61
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	08 dc       	rcall	.-2032   	; 0x304 <lcd_read>
     af4:	18 2f       	mov	r17, r24
     af6:	81 2f       	mov	r24, r17
     af8:	88 23       	and	r24, r24
     afa:	d4 f3       	brlt	.-12     	; 0xaf0 <lcd_waitbusy+0x16>
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	a0 e8       	ldi	r26, 0x80	; 128
     b02:	b0 e4       	ldi	r27, 0x40	; 64
     b04:	89 83       	std	Y+1, r24	; 0x01
     b06:	9a 83       	std	Y+2, r25	; 0x02
     b08:	ab 83       	std	Y+3, r26	; 0x03
     b0a:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     b0c:	2b ea       	ldi	r18, 0xAB	; 171
     b0e:	3a ea       	ldi	r19, 0xAA	; 170
     b10:	4a ea       	ldi	r20, 0xAA	; 170
     b12:	5e e3       	ldi	r21, 0x3E	; 62
     b14:	69 81       	ldd	r22, Y+1	; 0x01
     b16:	7a 81       	ldd	r23, Y+2	; 0x02
     b18:	8b 81       	ldd	r24, Y+3	; 0x03
     b1a:	9c 81       	ldd	r25, Y+4	; 0x04
     b1c:	ab d9       	rcall	.-3242   	; 0xfffffe74 <__eeprom_end+0xff7efe74>
     b1e:	dc 01       	movw	r26, r24
     b20:	cb 01       	movw	r24, r22
     b22:	8d 83       	std	Y+5, r24	; 0x05
     b24:	9e 83       	std	Y+6, r25	; 0x06
     b26:	af 83       	std	Y+7, r26	; 0x07
     b28:	b8 87       	std	Y+8, r27	; 0x08
	__tmp2 = ((F_CPU) / 4e6) * __us;
     b2a:	20 e0       	ldi	r18, 0x00	; 0
     b2c:	30 e0       	ldi	r19, 0x00	; 0
     b2e:	40 e8       	ldi	r20, 0x80	; 128
     b30:	5e e3       	ldi	r21, 0x3E	; 62
     b32:	69 81       	ldd	r22, Y+1	; 0x01
     b34:	7a 81       	ldd	r23, Y+2	; 0x02
     b36:	8b 81       	ldd	r24, Y+3	; 0x03
     b38:	9c 81       	ldd	r25, Y+4	; 0x04
     b3a:	9c d9       	rcall	.-3272   	; 0xfffffe74 <__eeprom_end+0xff7efe74>
     b3c:	dc 01       	movw	r26, r24
     b3e:	cb 01       	movw	r24, r22
     b40:	89 87       	std	Y+9, r24	; 0x09
     b42:	9a 87       	std	Y+10, r25	; 0x0a
     b44:	ab 87       	std	Y+11, r26	; 0x0b
     b46:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     b48:	20 e0       	ldi	r18, 0x00	; 0
     b4a:	30 e0       	ldi	r19, 0x00	; 0
     b4c:	40 e8       	ldi	r20, 0x80	; 128
     b4e:	5f e3       	ldi	r21, 0x3F	; 63
     b50:	6d 81       	ldd	r22, Y+5	; 0x05
     b52:	7e 81       	ldd	r23, Y+6	; 0x06
     b54:	8f 81       	ldd	r24, Y+7	; 0x07
     b56:	98 85       	ldd	r25, Y+8	; 0x08
     b58:	7c d8       	rcall	.-3848   	; 0xfffffc52 <__eeprom_end+0xff7efc52>
     b5a:	88 23       	and	r24, r24
     b5c:	1c f4       	brge	.+6      	; 0xb64 <lcd_waitbusy+0x8a>
		__ticks = 1;
     b5e:	81 e0       	ldi	r24, 0x01	; 1
     b60:	8d 87       	std	Y+13, r24	; 0x0d
     b62:	a7 c0       	rjmp	.+334    	; 0xcb2 <lcd_waitbusy+0x1d8>
	else if (__tmp2 > 65535)
     b64:	20 e0       	ldi	r18, 0x00	; 0
     b66:	3f ef       	ldi	r19, 0xFF	; 255
     b68:	4f e7       	ldi	r20, 0x7F	; 127
     b6a:	57 e4       	ldi	r21, 0x47	; 71
     b6c:	69 85       	ldd	r22, Y+9	; 0x09
     b6e:	7a 85       	ldd	r23, Y+10	; 0x0a
     b70:	8b 85       	ldd	r24, Y+11	; 0x0b
     b72:	9c 85       	ldd	r25, Y+12	; 0x0c
     b74:	7b d9       	rcall	.-3338   	; 0xfffffe6c <__eeprom_end+0xff7efe6c>
     b76:	18 16       	cp	r1, r24
     b78:	0c f0       	brlt	.+2      	; 0xb7c <lcd_waitbusy+0xa2>
     b7a:	74 c0       	rjmp	.+232    	; 0xc64 <lcd_waitbusy+0x18a>
	{
		_delay_ms(__us / 1000.0);
     b7c:	20 e0       	ldi	r18, 0x00	; 0
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	4a e7       	ldi	r20, 0x7A	; 122
     b82:	54 e4       	ldi	r21, 0x44	; 68
     b84:	69 81       	ldd	r22, Y+1	; 0x01
     b86:	7a 81       	ldd	r23, Y+2	; 0x02
     b88:	8b 81       	ldd	r24, Y+3	; 0x03
     b8a:	9c 81       	ldd	r25, Y+4	; 0x04
     b8c:	66 d8       	rcall	.-3892   	; 0xfffffc5a <__eeprom_end+0xff7efc5a>
     b8e:	dc 01       	movw	r26, r24
     b90:	cb 01       	movw	r24, r22
     b92:	8e 87       	std	Y+14, r24	; 0x0e
     b94:	9f 87       	std	Y+15, r25	; 0x0f
     b96:	a8 8b       	std	Y+16, r26	; 0x10
     b98:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     b9a:	20 e0       	ldi	r18, 0x00	; 0
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	4a e7       	ldi	r20, 0x7A	; 122
     ba0:	53 e4       	ldi	r21, 0x43	; 67
     ba2:	6e 85       	ldd	r22, Y+14	; 0x0e
     ba4:	7f 85       	ldd	r23, Y+15	; 0x0f
     ba6:	88 89       	ldd	r24, Y+16	; 0x10
     ba8:	99 89       	ldd	r25, Y+17	; 0x11
     baa:	64 d9       	rcall	.-3384   	; 0xfffffe74 <__eeprom_end+0xff7efe74>
     bac:	dc 01       	movw	r26, r24
     bae:	cb 01       	movw	r24, r22
     bb0:	8a 8b       	std	Y+18, r24	; 0x12
     bb2:	9b 8b       	std	Y+19, r25	; 0x13
     bb4:	ac 8b       	std	Y+20, r26	; 0x14
     bb6:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
     bb8:	20 e0       	ldi	r18, 0x00	; 0
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	40 e8       	ldi	r20, 0x80	; 128
     bbe:	5f e3       	ldi	r21, 0x3F	; 63
     bc0:	6a 89       	ldd	r22, Y+18	; 0x12
     bc2:	7b 89       	ldd	r23, Y+19	; 0x13
     bc4:	8c 89       	ldd	r24, Y+20	; 0x14
     bc6:	9d 89       	ldd	r25, Y+21	; 0x15
     bc8:	44 d8       	rcall	.-3960   	; 0xfffffc52 <__eeprom_end+0xff7efc52>
     bca:	88 23       	and	r24, r24
     bcc:	2c f4       	brge	.+10     	; 0xbd8 <lcd_waitbusy+0xfe>
		__ticks = 1;
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	9f 8b       	std	Y+23, r25	; 0x17
     bd4:	8e 8b       	std	Y+22, r24	; 0x16
     bd6:	3b c0       	rjmp	.+118    	; 0xc4e <lcd_waitbusy+0x174>
	else if (__tmp > 65535)
     bd8:	20 e0       	ldi	r18, 0x00	; 0
     bda:	3f ef       	ldi	r19, 0xFF	; 255
     bdc:	4f e7       	ldi	r20, 0x7F	; 127
     bde:	57 e4       	ldi	r21, 0x47	; 71
     be0:	6a 89       	ldd	r22, Y+18	; 0x12
     be2:	7b 89       	ldd	r23, Y+19	; 0x13
     be4:	8c 89       	ldd	r24, Y+20	; 0x14
     be6:	9d 89       	ldd	r25, Y+21	; 0x15
     be8:	41 d9       	rcall	.-3454   	; 0xfffffe6c <__eeprom_end+0xff7efe6c>
     bea:	18 16       	cp	r1, r24
     bec:	3c f5       	brge	.+78     	; 0xc3c <lcd_waitbusy+0x162>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bee:	20 e0       	ldi	r18, 0x00	; 0
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	40 e2       	ldi	r20, 0x20	; 32
     bf4:	51 e4       	ldi	r21, 0x41	; 65
     bf6:	6e 85       	ldd	r22, Y+14	; 0x0e
     bf8:	7f 85       	ldd	r23, Y+15	; 0x0f
     bfa:	88 89       	ldd	r24, Y+16	; 0x10
     bfc:	99 89       	ldd	r25, Y+17	; 0x11
     bfe:	3a d9       	rcall	.-3468   	; 0xfffffe74 <__eeprom_end+0xff7efe74>
     c00:	dc 01       	movw	r26, r24
     c02:	cb 01       	movw	r24, r22
     c04:	bc 01       	movw	r22, r24
     c06:	cd 01       	movw	r24, r26
     c08:	90 d8       	rcall	.-3808   	; 0xfffffd2a <__eeprom_end+0xff7efd2a>
     c0a:	dc 01       	movw	r26, r24
     c0c:	cb 01       	movw	r24, r22
     c0e:	9f 8b       	std	Y+23, r25	; 0x17
     c10:	8e 8b       	std	Y+22, r24	; 0x16
     c12:	0f c0       	rjmp	.+30     	; 0xc32 <lcd_waitbusy+0x158>
     c14:	89 e1       	ldi	r24, 0x19	; 25
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	99 8f       	std	Y+25, r25	; 0x19
     c1a:	88 8f       	std	Y+24, r24	; 0x18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c1c:	88 8d       	ldd	r24, Y+24	; 0x18
     c1e:	99 8d       	ldd	r25, Y+25	; 0x19
     c20:	01 97       	sbiw	r24, 0x01	; 1
     c22:	f1 f7       	brne	.-4      	; 0xc20 <lcd_waitbusy+0x146>
     c24:	99 8f       	std	Y+25, r25	; 0x19
     c26:	88 8f       	std	Y+24, r24	; 0x18
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c28:	8e 89       	ldd	r24, Y+22	; 0x16
     c2a:	9f 89       	ldd	r25, Y+23	; 0x17
     c2c:	01 97       	sbiw	r24, 0x01	; 1
     c2e:	9f 8b       	std	Y+23, r25	; 0x17
     c30:	8e 8b       	std	Y+22, r24	; 0x16
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c32:	8e 89       	ldd	r24, Y+22	; 0x16
     c34:	9f 89       	ldd	r25, Y+23	; 0x17
     c36:	89 2b       	or	r24, r25
     c38:	69 f7       	brne	.-38     	; 0xc14 <lcd_waitbusy+0x13a>
     c3a:	3b c0       	rjmp	.+118    	; 0xcb2 <lcd_waitbusy+0x1d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c3c:	6a 89       	ldd	r22, Y+18	; 0x12
     c3e:	7b 89       	ldd	r23, Y+19	; 0x13
     c40:	8c 89       	ldd	r24, Y+20	; 0x14
     c42:	9d 89       	ldd	r25, Y+21	; 0x15
     c44:	72 d8       	rcall	.-3868   	; 0xfffffd2a <__eeprom_end+0xff7efd2a>
     c46:	dc 01       	movw	r26, r24
     c48:	cb 01       	movw	r24, r22
     c4a:	9f 8b       	std	Y+23, r25	; 0x17
     c4c:	8e 8b       	std	Y+22, r24	; 0x16
     c4e:	8e 89       	ldd	r24, Y+22	; 0x16
     c50:	9f 89       	ldd	r25, Y+23	; 0x17
     c52:	9b 8f       	std	Y+27, r25	; 0x1b
     c54:	8a 8f       	std	Y+26, r24	; 0x1a
     c56:	8a 8d       	ldd	r24, Y+26	; 0x1a
     c58:	9b 8d       	ldd	r25, Y+27	; 0x1b
     c5a:	01 97       	sbiw	r24, 0x01	; 1
     c5c:	f1 f7       	brne	.-4      	; 0xc5a <lcd_waitbusy+0x180>
     c5e:	9b 8f       	std	Y+27, r25	; 0x1b
     c60:	8a 8f       	std	Y+26, r24	; 0x1a
     c62:	27 c0       	rjmp	.+78     	; 0xcb2 <lcd_waitbusy+0x1d8>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     c64:	20 e0       	ldi	r18, 0x00	; 0
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	4f e7       	ldi	r20, 0x7F	; 127
     c6a:	53 e4       	ldi	r21, 0x43	; 67
     c6c:	6d 81       	ldd	r22, Y+5	; 0x05
     c6e:	7e 81       	ldd	r23, Y+6	; 0x06
     c70:	8f 81       	ldd	r24, Y+7	; 0x07
     c72:	98 85       	ldd	r25, Y+8	; 0x08
     c74:	fb d8       	rcall	.-3594   	; 0xfffffe6c <__eeprom_end+0xff7efe6c>
     c76:	18 16       	cp	r1, r24
     c78:	a4 f4       	brge	.+40     	; 0xca2 <lcd_waitbusy+0x1c8>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     c7a:	69 85       	ldd	r22, Y+9	; 0x09
     c7c:	7a 85       	ldd	r23, Y+10	; 0x0a
     c7e:	8b 85       	ldd	r24, Y+11	; 0x0b
     c80:	9c 85       	ldd	r25, Y+12	; 0x0c
     c82:	53 d8       	rcall	.-3930   	; 0xfffffd2a <__eeprom_end+0xff7efd2a>
     c84:	dc 01       	movw	r26, r24
     c86:	cb 01       	movw	r24, r22
     c88:	9d 8f       	std	Y+29, r25	; 0x1d
     c8a:	8c 8f       	std	Y+28, r24	; 0x1c
     c8c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     c8e:	9d 8d       	ldd	r25, Y+29	; 0x1d
     c90:	9f 8f       	std	Y+31, r25	; 0x1f
     c92:	8e 8f       	std	Y+30, r24	; 0x1e
     c94:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c96:	9f 8d       	ldd	r25, Y+31	; 0x1f
     c98:	01 97       	sbiw	r24, 0x01	; 1
     c9a:	f1 f7       	brne	.-4      	; 0xc98 <lcd_waitbusy+0x1be>
     c9c:	9f 8f       	std	Y+31, r25	; 0x1f
     c9e:	8e 8f       	std	Y+30, r24	; 0x1e
     ca0:	0e c0       	rjmp	.+28     	; 0xcbe <lcd_waitbusy+0x1e4>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     ca2:	6d 81       	ldd	r22, Y+5	; 0x05
     ca4:	7e 81       	ldd	r23, Y+6	; 0x06
     ca6:	8f 81       	ldd	r24, Y+7	; 0x07
     ca8:	98 85       	ldd	r25, Y+8	; 0x08
     caa:	3f d8       	rcall	.-3970   	; 0xfffffd2a <__eeprom_end+0xff7efd2a>
     cac:	dc 01       	movw	r26, r24
     cae:	cb 01       	movw	r24, r22
     cb0:	8d 87       	std	Y+13, r24	; 0x0d
     cb2:	8d 85       	ldd	r24, Y+13	; 0x0d
     cb4:	88 a3       	std	Y+32, r24	; 0x20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     cb6:	88 a1       	ldd	r24, Y+32	; 0x20
     cb8:	8a 95       	dec	r24
     cba:	f1 f7       	brne	.-4      	; 0xcb8 <lcd_waitbusy+0x1de>
     cbc:	88 a3       	std	Y+32, r24	; 0x20
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(LCD_DELAY_BUSY_FLAG);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	21 db       	rcall	.-2494   	; 0x304 <lcd_read>
    
}/* lcd_waitbusy */
     cc2:	a0 96       	adiw	r28, 0x20	; 32
     cc4:	0f b6       	in	r0, 0x3f	; 63
     cc6:	f8 94       	cli
     cc8:	de bf       	out	0x3e, r29	; 62
     cca:	0f be       	out	0x3f, r0	; 63
     ccc:	cd bf       	out	0x3d, r28	; 61
     cce:	df 91       	pop	r29
     cd0:	cf 91       	pop	r28
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <lcd_newline>:
/*************************************************************************
Move cursor to the start of next line or to the first line if the cursor 
is already on the last line.
*************************************************************************/
static inline void lcd_newline(uint8_t pos)
{
     cd6:	1f 93       	push	r17
     cd8:	cf 93       	push	r28
     cda:	df 93       	push	r29
     cdc:	1f 92       	push	r1
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
     ce2:	89 83       	std	Y+1, r24	; 0x01

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
     ce4:	89 81       	ldd	r24, Y+1	; 0x01
     ce6:	80 34       	cpi	r24, 0x40	; 64
     ce8:	10 f4       	brcc	.+4      	; 0xcee <lcd_newline+0x18>
        addressCounter = LCD_START_LINE2;
     cea:	10 e4       	ldi	r17, 0x40	; 64
     cec:	01 c0       	rjmp	.+2      	; 0xcf0 <lcd_newline+0x1a>
    else
        addressCounter = LCD_START_LINE1;
     cee:	10 e0       	ldi	r17, 0x00	; 0
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
     cf0:	80 e8       	ldi	r24, 0x80	; 128
     cf2:	81 0f       	add	r24, r17
     cf4:	06 d0       	rcall	.+12     	; 0xd02 <lcd_command>

}/* lcd_newline */
     cf6:	00 00       	nop
     cf8:	0f 90       	pop	r0
     cfa:	df 91       	pop	r29
     cfc:	cf 91       	pop	r28
     cfe:	1f 91       	pop	r17
     d00:	08 95       	ret

00000d02 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
     d02:	cf 93       	push	r28
     d04:	df 93       	push	r29
     d06:	1f 92       	push	r1
     d08:	cd b7       	in	r28, 0x3d	; 61
     d0a:	de b7       	in	r29, 0x3e	; 62
     d0c:	89 83       	std	Y+1, r24	; 0x01
    lcd_waitbusy();
     d0e:	e5 de       	rcall	.-566    	; 0xada <lcd_waitbusy>
    lcd_write(cmd,0);
     d10:	60 e0       	ldi	r22, 0x00	; 0
     d12:	89 81       	ldd	r24, Y+1	; 0x01
     d14:	9f da       	rcall	.-2754   	; 0x254 <lcd_write>
}
     d16:	00 00       	nop
     d18:	0f 90       	pop	r0
     d1a:	df 91       	pop	r29
     d1c:	cf 91       	pop	r28
     d1e:	08 95       	ret

00000d20 <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
     d20:	cf 93       	push	r28
     d22:	df 93       	push	r29
     d24:	1f 92       	push	r1
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	89 83       	std	Y+1, r24	; 0x01
    lcd_waitbusy();
     d2c:	d6 de       	rcall	.-596    	; 0xada <lcd_waitbusy>
    lcd_write(data,1);
     d2e:	61 e0       	ldi	r22, 0x01	; 1
     d30:	89 81       	ldd	r24, Y+1	; 0x01
     d32:	90 da       	rcall	.-2784   	; 0x254 <lcd_write>
}
     d34:	00 00       	nop
     d36:	0f 90       	pop	r0
     d38:	df 91       	pop	r29
     d3a:	cf 91       	pop	r28
     d3c:	08 95       	ret

00000d3e <lcd_gotoxy>:
Input:    x  horizontal position  (0: left most position)
          y  vertical position    (0: first line)
Returns:  none
*************************************************************************/
void lcd_gotoxy(uint8_t x, uint8_t y)
{
     d3e:	cf 93       	push	r28
     d40:	df 93       	push	r29
     d42:	00 d0       	rcall	.+0      	; 0xd44 <lcd_gotoxy+0x6>
     d44:	cd b7       	in	r28, 0x3d	; 61
     d46:	de b7       	in	r29, 0x3e	; 62
     d48:	89 83       	std	Y+1, r24	; 0x01
     d4a:	6a 83       	std	Y+2, r22	; 0x02
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
     d4c:	8a 81       	ldd	r24, Y+2	; 0x02
     d4e:	88 23       	and	r24, r24
     d50:	21 f4       	brne	.+8      	; 0xd5a <lcd_gotoxy+0x1c>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
     d52:	89 81       	ldd	r24, Y+1	; 0x01
     d54:	80 58       	subi	r24, 0x80	; 128
     d56:	d5 df       	rcall	.-86     	; 0xd02 <lcd_command>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE3+x);
    else /* y==3 */
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE4+x);
#endif

}/* lcd_gotoxy */
     d58:	03 c0       	rjmp	.+6      	; 0xd60 <lcd_gotoxy+0x22>
#endif
#if LCD_LINES==2
    if ( y==0 ) 
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
     d5a:	89 81       	ldd	r24, Y+1	; 0x01
     d5c:	80 54       	subi	r24, 0x40	; 64
     d5e:	d1 df       	rcall	.-94     	; 0xd02 <lcd_command>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE3+x);
    else /* y==3 */
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE4+x);
#endif

}/* lcd_gotoxy */
     d60:	00 00       	nop
     d62:	0f 90       	pop	r0
     d64:	0f 90       	pop	r0
     d66:	df 91       	pop	r29
     d68:	cf 91       	pop	r28
     d6a:	08 95       	ret

00000d6c <lcd_getxy>:


/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
     d6c:	cf 93       	push	r28
     d6e:	df 93       	push	r29
     d70:	cd b7       	in	r28, 0x3d	; 61
     d72:	de b7       	in	r29, 0x3e	; 62
    return lcd_waitbusy();
     d74:	b2 de       	rcall	.-668    	; 0xada <lcd_waitbusy>
     d76:	88 2f       	mov	r24, r24
     d78:	90 e0       	ldi	r25, 0x00	; 0
}
     d7a:	df 91       	pop	r29
     d7c:	cf 91       	pop	r28
     d7e:	08 95       	ret

00000d80 <lcd_clrscr>:

/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
     d80:	cf 93       	push	r28
     d82:	df 93       	push	r29
     d84:	cd b7       	in	r28, 0x3d	; 61
     d86:	de b7       	in	r29, 0x3e	; 62
    lcd_command(1<<LCD_CLR);
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	bb df       	rcall	.-138    	; 0xd02 <lcd_command>
}
     d8c:	00 00       	nop
     d8e:	df 91       	pop	r29
     d90:	cf 91       	pop	r28
     d92:	08 95       	ret

00000d94 <lcd_home>:

/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
     d94:	cf 93       	push	r28
     d96:	df 93       	push	r29
     d98:	cd b7       	in	r28, 0x3d	; 61
     d9a:	de b7       	in	r29, 0x3e	; 62
    lcd_command(1<<LCD_HOME);
     d9c:	82 e0       	ldi	r24, 0x02	; 2
     d9e:	b1 df       	rcall	.-158    	; 0xd02 <lcd_command>
}
     da0:	00 00       	nop
     da2:	df 91       	pop	r29
     da4:	cf 91       	pop	r28
     da6:	08 95       	ret

00000da8 <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
     da8:	cf 93       	push	r28
     daa:	df 93       	push	r29
     dac:	00 d0       	rcall	.+0      	; 0xdae <lcd_putc+0x6>
     dae:	cd b7       	in	r28, 0x3d	; 61
     db0:	de b7       	in	r29, 0x3e	; 62
     db2:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
     db4:	92 de       	rcall	.-732    	; 0xada <lcd_waitbusy>
     db6:	89 83       	std	Y+1, r24	; 0x01
    if (c=='\n')
     db8:	8a 81       	ldd	r24, Y+2	; 0x02
     dba:	8a 30       	cpi	r24, 0x0A	; 10
     dbc:	19 f4       	brne	.+6      	; 0xdc4 <lcd_putc+0x1c>
    {
        lcd_newline(pos);
     dbe:	89 81       	ldd	r24, Y+1	; 0x01
     dc0:	8a df       	rcall	.-236    	; 0xcd6 <lcd_newline>
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
    }

}/* lcd_putc */
     dc2:	03 c0       	rjmp	.+6      	; 0xdca <lcd_putc+0x22>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
     dc4:	61 e0       	ldi	r22, 0x01	; 1
     dc6:	8a 81       	ldd	r24, Y+2	; 0x02
     dc8:	45 da       	rcall	.-2934   	; 0x254 <lcd_write>
    }

}/* lcd_putc */
     dca:	00 00       	nop
     dcc:	0f 90       	pop	r0
     dce:	0f 90       	pop	r0
     dd0:	df 91       	pop	r29
     dd2:	cf 91       	pop	r28
     dd4:	08 95       	ret

00000dd6 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
     dd6:	1f 93       	push	r17
     dd8:	cf 93       	push	r28
     dda:	df 93       	push	r29
     ddc:	00 d0       	rcall	.+0      	; 0xdde <lcd_puts+0x8>
     dde:	cd b7       	in	r28, 0x3d	; 61
     de0:	de b7       	in	r29, 0x3e	; 62
     de2:	9a 83       	std	Y+2, r25	; 0x02
     de4:	89 83       	std	Y+1, r24	; 0x01
    register char c;

    while ( (c = *s++) ) {
     de6:	02 c0       	rjmp	.+4      	; 0xdec <lcd_puts+0x16>
        lcd_putc(c);
     de8:	81 2f       	mov	r24, r17
     dea:	de df       	rcall	.-68     	; 0xda8 <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
     dec:	89 81       	ldd	r24, Y+1	; 0x01
     dee:	9a 81       	ldd	r25, Y+2	; 0x02
     df0:	9c 01       	movw	r18, r24
     df2:	2f 5f       	subi	r18, 0xFF	; 255
     df4:	3f 4f       	sbci	r19, 0xFF	; 255
     df6:	3a 83       	std	Y+2, r19	; 0x02
     df8:	29 83       	std	Y+1, r18	; 0x01
     dfa:	fc 01       	movw	r30, r24
     dfc:	10 81       	ld	r17, Z
     dfe:	11 23       	and	r17, r17
     e00:	99 f7       	brne	.-26     	; 0xde8 <lcd_puts+0x12>
        lcd_putc(c);
    }

}/* lcd_puts */
     e02:	00 00       	nop
     e04:	0f 90       	pop	r0
     e06:	0f 90       	pop	r0
     e08:	df 91       	pop	r29
     e0a:	cf 91       	pop	r28
     e0c:	1f 91       	pop	r17
     e0e:	08 95       	ret

00000e10 <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
     e10:	1f 93       	push	r17
     e12:	cf 93       	push	r28
     e14:	df 93       	push	r29
     e16:	00 d0       	rcall	.+0      	; 0xe18 <lcd_puts_p+0x8>
     e18:	00 d0       	rcall	.+0      	; 0xe1a <lcd_puts_p+0xa>
     e1a:	1f 92       	push	r1
     e1c:	cd b7       	in	r28, 0x3d	; 61
     e1e:	de b7       	in	r29, 0x3e	; 62
     e20:	9d 83       	std	Y+5, r25	; 0x05
     e22:	8c 83       	std	Y+4, r24	; 0x04
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
     e24:	02 c0       	rjmp	.+4      	; 0xe2a <lcd_puts_p+0x1a>
        lcd_putc(c);
     e26:	81 2f       	mov	r24, r17
     e28:	bf df       	rcall	.-130    	; 0xda8 <lcd_putc>
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
     e2a:	8c 81       	ldd	r24, Y+4	; 0x04
     e2c:	9d 81       	ldd	r25, Y+5	; 0x05
     e2e:	9c 01       	movw	r18, r24
     e30:	2f 5f       	subi	r18, 0xFF	; 255
     e32:	3f 4f       	sbci	r19, 0xFF	; 255
     e34:	3d 83       	std	Y+5, r19	; 0x05
     e36:	2c 83       	std	Y+4, r18	; 0x04
     e38:	9a 83       	std	Y+2, r25	; 0x02
     e3a:	89 83       	std	Y+1, r24	; 0x01
     e3c:	89 81       	ldd	r24, Y+1	; 0x01
     e3e:	9a 81       	ldd	r25, Y+2	; 0x02
     e40:	fc 01       	movw	r30, r24
     e42:	84 91       	lpm	r24, Z
     e44:	8b 83       	std	Y+3, r24	; 0x03
     e46:	8b 81       	ldd	r24, Y+3	; 0x03
     e48:	18 2f       	mov	r17, r24
     e4a:	11 23       	and	r17, r17
     e4c:	61 f7       	brne	.-40     	; 0xe26 <lcd_puts_p+0x16>
        lcd_putc(c);
    }

}/* lcd_puts_p */
     e4e:	00 00       	nop
     e50:	0f 90       	pop	r0
     e52:	0f 90       	pop	r0
     e54:	0f 90       	pop	r0
     e56:	0f 90       	pop	r0
     e58:	0f 90       	pop	r0
     e5a:	df 91       	pop	r29
     e5c:	cf 91       	pop	r28
     e5e:	1f 91       	pop	r17
     e60:	08 95       	ret

00000e62 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     e62:	0f 93       	push	r16
     e64:	1f 93       	push	r17
     e66:	cf 93       	push	r28
     e68:	df 93       	push	r29
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
     e6e:	c1 5a       	subi	r28, 0xA1	; 161
     e70:	d1 09       	sbc	r29, r1
     e72:	0f b6       	in	r0, 0x3f	; 63
     e74:	f8 94       	cli
     e76:	de bf       	out	0x3e, r29	; 62
     e78:	0f be       	out	0x3f, r0	; 63
     e7a:	cd bf       	out	0x3d, r28	; 61
     e7c:	9e 01       	movw	r18, r28
     e7e:	2f 55       	subi	r18, 0x5F	; 95
     e80:	3f 4f       	sbci	r19, 0xFF	; 255
     e82:	f9 01       	movw	r30, r18
     e84:	80 83       	st	Z, r24
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
     e86:	87 e2       	ldi	r24, 0x27	; 39
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	27 e2       	ldi	r18, 0x27	; 39
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	f9 01       	movw	r30, r18
     e90:	20 81       	ld	r18, Z
     e92:	2f 67       	ori	r18, 0x7F	; 127
     e94:	fc 01       	movw	r30, r24
     e96:	20 83       	st	Z, r18
     e98:	80 e0       	ldi	r24, 0x00	; 0
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	aa e7       	ldi	r26, 0x7A	; 122
     e9e:	b6 e4       	ldi	r27, 0x46	; 70
     ea0:	89 83       	std	Y+1, r24	; 0x01
     ea2:	9a 83       	std	Y+2, r25	; 0x02
     ea4:	ab 83       	std	Y+3, r26	; 0x03
     ea6:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     ea8:	8e 01       	movw	r16, r28
     eaa:	0b 57       	subi	r16, 0x7B	; 123
     eac:	1f 4f       	sbci	r17, 0xFF	; 255
     eae:	2b ea       	ldi	r18, 0xAB	; 171
     eb0:	3a ea       	ldi	r19, 0xAA	; 170
     eb2:	4a ea       	ldi	r20, 0xAA	; 170
     eb4:	5e e3       	ldi	r21, 0x3E	; 62
     eb6:	69 81       	ldd	r22, Y+1	; 0x01
     eb8:	7a 81       	ldd	r23, Y+2	; 0x02
     eba:	8b 81       	ldd	r24, Y+3	; 0x03
     ebc:	9c 81       	ldd	r25, Y+4	; 0x04
     ebe:	da d7       	rcall	.+4020   	; 0x1e74 <__mulsf3>
     ec0:	dc 01       	movw	r26, r24
     ec2:	cb 01       	movw	r24, r22
     ec4:	f8 01       	movw	r30, r16
     ec6:	80 83       	st	Z, r24
     ec8:	91 83       	std	Z+1, r25	; 0x01
     eca:	a2 83       	std	Z+2, r26	; 0x02
     ecc:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
     ece:	8e 01       	movw	r16, r28
     ed0:	07 57       	subi	r16, 0x77	; 119
     ed2:	1f 4f       	sbci	r17, 0xFF	; 255
     ed4:	20 e0       	ldi	r18, 0x00	; 0
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	40 e8       	ldi	r20, 0x80	; 128
     eda:	5e e3       	ldi	r21, 0x3E	; 62
     edc:	69 81       	ldd	r22, Y+1	; 0x01
     ede:	7a 81       	ldd	r23, Y+2	; 0x02
     ee0:	8b 81       	ldd	r24, Y+3	; 0x03
     ee2:	9c 81       	ldd	r25, Y+4	; 0x04
     ee4:	c7 d7       	rcall	.+3982   	; 0x1e74 <__mulsf3>
     ee6:	dc 01       	movw	r26, r24
     ee8:	cb 01       	movw	r24, r22
     eea:	f8 01       	movw	r30, r16
     eec:	80 83       	st	Z, r24
     eee:	91 83       	std	Z+1, r25	; 0x01
     ef0:	a2 83       	std	Z+2, r26	; 0x02
     ef2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ef4:	ce 01       	movw	r24, r28
     ef6:	8b 57       	subi	r24, 0x7B	; 123
     ef8:	9f 4f       	sbci	r25, 0xFF	; 255
     efa:	20 e0       	ldi	r18, 0x00	; 0
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	40 e8       	ldi	r20, 0x80	; 128
     f00:	5f e3       	ldi	r21, 0x3F	; 63
     f02:	fc 01       	movw	r30, r24
     f04:	60 81       	ld	r22, Z
     f06:	71 81       	ldd	r23, Z+1	; 0x01
     f08:	82 81       	ldd	r24, Z+2	; 0x02
     f0a:	93 81       	ldd	r25, Z+3	; 0x03
     f0c:	a2 d6       	rcall	.+3396   	; 0x1c52 <__cmpsf2>
     f0e:	88 23       	and	r24, r24
     f10:	3c f4       	brge	.+14     	; 0xf20 <lcd_init+0xbe>
		__ticks = 1;
     f12:	ce 01       	movw	r24, r28
     f14:	83 57       	subi	r24, 0x73	; 115
     f16:	9f 4f       	sbci	r25, 0xFF	; 255
     f18:	21 e0       	ldi	r18, 0x01	; 1
     f1a:	fc 01       	movw	r30, r24
     f1c:	20 83       	st	Z, r18
     f1e:	21 c1       	rjmp	.+578    	; 0x1162 <lcd_init+0x300>
	else if (__tmp2 > 65535)
     f20:	ce 01       	movw	r24, r28
     f22:	87 57       	subi	r24, 0x77	; 119
     f24:	9f 4f       	sbci	r25, 0xFF	; 255
     f26:	20 e0       	ldi	r18, 0x00	; 0
     f28:	3f ef       	ldi	r19, 0xFF	; 255
     f2a:	4f e7       	ldi	r20, 0x7F	; 127
     f2c:	57 e4       	ldi	r21, 0x47	; 71
     f2e:	fc 01       	movw	r30, r24
     f30:	60 81       	ld	r22, Z
     f32:	71 81       	ldd	r23, Z+1	; 0x01
     f34:	82 81       	ldd	r24, Z+2	; 0x02
     f36:	93 81       	ldd	r25, Z+3	; 0x03
     f38:	99 d7       	rcall	.+3890   	; 0x1e6c <__gesf2>
     f3a:	18 16       	cp	r1, r24
     f3c:	0c f0       	brlt	.+2      	; 0xf40 <lcd_init+0xde>
     f3e:	c6 c0       	rjmp	.+396    	; 0x10cc <lcd_init+0x26a>
	{
		_delay_ms(__us / 1000.0);
     f40:	20 e0       	ldi	r18, 0x00	; 0
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	4a e7       	ldi	r20, 0x7A	; 122
     f46:	54 e4       	ldi	r21, 0x44	; 68
     f48:	69 81       	ldd	r22, Y+1	; 0x01
     f4a:	7a 81       	ldd	r23, Y+2	; 0x02
     f4c:	8b 81       	ldd	r24, Y+3	; 0x03
     f4e:	9c 81       	ldd	r25, Y+4	; 0x04
     f50:	84 d6       	rcall	.+3336   	; 0x1c5a <__divsf3>
     f52:	dc 01       	movw	r26, r24
     f54:	cb 01       	movw	r24, r22
     f56:	9e 01       	movw	r18, r28
     f58:	22 57       	subi	r18, 0x72	; 114
     f5a:	3f 4f       	sbci	r19, 0xFF	; 255
     f5c:	f9 01       	movw	r30, r18
     f5e:	80 83       	st	Z, r24
     f60:	91 83       	std	Z+1, r25	; 0x01
     f62:	a2 83       	std	Z+2, r26	; 0x02
     f64:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     f66:	8e 01       	movw	r16, r28
     f68:	0e 56       	subi	r16, 0x6E	; 110
     f6a:	1f 4f       	sbci	r17, 0xFF	; 255
     f6c:	ce 01       	movw	r24, r28
     f6e:	82 57       	subi	r24, 0x72	; 114
     f70:	9f 4f       	sbci	r25, 0xFF	; 255
     f72:	20 e0       	ldi	r18, 0x00	; 0
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	4a e7       	ldi	r20, 0x7A	; 122
     f78:	53 e4       	ldi	r21, 0x43	; 67
     f7a:	fc 01       	movw	r30, r24
     f7c:	60 81       	ld	r22, Z
     f7e:	71 81       	ldd	r23, Z+1	; 0x01
     f80:	82 81       	ldd	r24, Z+2	; 0x02
     f82:	93 81       	ldd	r25, Z+3	; 0x03
     f84:	77 d7       	rcall	.+3822   	; 0x1e74 <__mulsf3>
     f86:	dc 01       	movw	r26, r24
     f88:	cb 01       	movw	r24, r22
     f8a:	f8 01       	movw	r30, r16
     f8c:	80 83       	st	Z, r24
     f8e:	91 83       	std	Z+1, r25	; 0x01
     f90:	a2 83       	std	Z+2, r26	; 0x02
     f92:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f94:	ce 01       	movw	r24, r28
     f96:	8e 56       	subi	r24, 0x6E	; 110
     f98:	9f 4f       	sbci	r25, 0xFF	; 255
     f9a:	20 e0       	ldi	r18, 0x00	; 0
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	40 e8       	ldi	r20, 0x80	; 128
     fa0:	5f e3       	ldi	r21, 0x3F	; 63
     fa2:	fc 01       	movw	r30, r24
     fa4:	60 81       	ld	r22, Z
     fa6:	71 81       	ldd	r23, Z+1	; 0x01
     fa8:	82 81       	ldd	r24, Z+2	; 0x02
     faa:	93 81       	ldd	r25, Z+3	; 0x03
     fac:	52 d6       	rcall	.+3236   	; 0x1c52 <__cmpsf2>
     fae:	88 23       	and	r24, r24
     fb0:	4c f4       	brge	.+18     	; 0xfc4 <lcd_init+0x162>
		__ticks = 1;
     fb2:	ce 01       	movw	r24, r28
     fb4:	8a 56       	subi	r24, 0x6A	; 106
     fb6:	9f 4f       	sbci	r25, 0xFF	; 255
     fb8:	21 e0       	ldi	r18, 0x01	; 1
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	fc 01       	movw	r30, r24
     fbe:	31 83       	std	Z+1, r19	; 0x01
     fc0:	20 83       	st	Z, r18
     fc2:	69 c0       	rjmp	.+210    	; 0x1096 <lcd_init+0x234>
	else if (__tmp > 65535)
     fc4:	ce 01       	movw	r24, r28
     fc6:	8e 56       	subi	r24, 0x6E	; 110
     fc8:	9f 4f       	sbci	r25, 0xFF	; 255
     fca:	20 e0       	ldi	r18, 0x00	; 0
     fcc:	3f ef       	ldi	r19, 0xFF	; 255
     fce:	4f e7       	ldi	r20, 0x7F	; 127
     fd0:	57 e4       	ldi	r21, 0x47	; 71
     fd2:	fc 01       	movw	r30, r24
     fd4:	60 81       	ld	r22, Z
     fd6:	71 81       	ldd	r23, Z+1	; 0x01
     fd8:	82 81       	ldd	r24, Z+2	; 0x02
     fda:	93 81       	ldd	r25, Z+3	; 0x03
     fdc:	47 d7       	rcall	.+3726   	; 0x1e6c <__gesf2>
     fde:	18 16       	cp	r1, r24
     fe0:	0c f0       	brlt	.+2      	; 0xfe4 <lcd_init+0x182>
     fe2:	48 c0       	rjmp	.+144    	; 0x1074 <lcd_init+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fe4:	ce 01       	movw	r24, r28
     fe6:	82 57       	subi	r24, 0x72	; 114
     fe8:	9f 4f       	sbci	r25, 0xFF	; 255
     fea:	20 e0       	ldi	r18, 0x00	; 0
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	40 e2       	ldi	r20, 0x20	; 32
     ff0:	51 e4       	ldi	r21, 0x41	; 65
     ff2:	fc 01       	movw	r30, r24
     ff4:	60 81       	ld	r22, Z
     ff6:	71 81       	ldd	r23, Z+1	; 0x01
     ff8:	82 81       	ldd	r24, Z+2	; 0x02
     ffa:	93 81       	ldd	r25, Z+3	; 0x03
     ffc:	3b d7       	rcall	.+3702   	; 0x1e74 <__mulsf3>
     ffe:	dc 01       	movw	r26, r24
    1000:	cb 01       	movw	r24, r22
    1002:	8e 01       	movw	r16, r28
    1004:	0a 56       	subi	r16, 0x6A	; 106
    1006:	1f 4f       	sbci	r17, 0xFF	; 255
    1008:	bc 01       	movw	r22, r24
    100a:	cd 01       	movw	r24, r26
    100c:	8e d6       	rcall	.+3356   	; 0x1d2a <__fixunssfsi>
    100e:	dc 01       	movw	r26, r24
    1010:	cb 01       	movw	r24, r22
    1012:	f8 01       	movw	r30, r16
    1014:	91 83       	std	Z+1, r25	; 0x01
    1016:	80 83       	st	Z, r24
    1018:	24 c0       	rjmp	.+72     	; 0x1062 <lcd_init+0x200>
    101a:	ce 01       	movw	r24, r28
    101c:	88 56       	subi	r24, 0x68	; 104
    101e:	9f 4f       	sbci	r25, 0xFF	; 255
    1020:	29 e1       	ldi	r18, 0x19	; 25
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	fc 01       	movw	r30, r24
    1026:	31 83       	std	Z+1, r19	; 0x01
    1028:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    102a:	ce 01       	movw	r24, r28
    102c:	88 56       	subi	r24, 0x68	; 104
    102e:	9f 4f       	sbci	r25, 0xFF	; 255
    1030:	fc 01       	movw	r30, r24
    1032:	80 81       	ld	r24, Z
    1034:	91 81       	ldd	r25, Z+1	; 0x01
    1036:	01 97       	sbiw	r24, 0x01	; 1
    1038:	f1 f7       	brne	.-4      	; 0x1036 <lcd_init+0x1d4>
    103a:	9e 01       	movw	r18, r28
    103c:	28 56       	subi	r18, 0x68	; 104
    103e:	3f 4f       	sbci	r19, 0xFF	; 255
    1040:	f9 01       	movw	r30, r18
    1042:	91 83       	std	Z+1, r25	; 0x01
    1044:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1046:	ce 01       	movw	r24, r28
    1048:	8a 56       	subi	r24, 0x6A	; 106
    104a:	9f 4f       	sbci	r25, 0xFF	; 255
    104c:	9e 01       	movw	r18, r28
    104e:	2a 56       	subi	r18, 0x6A	; 106
    1050:	3f 4f       	sbci	r19, 0xFF	; 255
    1052:	f9 01       	movw	r30, r18
    1054:	20 81       	ld	r18, Z
    1056:	31 81       	ldd	r19, Z+1	; 0x01
    1058:	21 50       	subi	r18, 0x01	; 1
    105a:	31 09       	sbc	r19, r1
    105c:	fc 01       	movw	r30, r24
    105e:	31 83       	std	Z+1, r19	; 0x01
    1060:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1062:	ce 01       	movw	r24, r28
    1064:	8a 56       	subi	r24, 0x6A	; 106
    1066:	9f 4f       	sbci	r25, 0xFF	; 255
    1068:	fc 01       	movw	r30, r24
    106a:	80 81       	ld	r24, Z
    106c:	91 81       	ldd	r25, Z+1	; 0x01
    106e:	89 2b       	or	r24, r25
    1070:	a1 f6       	brne	.-88     	; 0x101a <lcd_init+0x1b8>
    1072:	77 c0       	rjmp	.+238    	; 0x1162 <lcd_init+0x300>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1074:	8e 01       	movw	r16, r28
    1076:	0a 56       	subi	r16, 0x6A	; 106
    1078:	1f 4f       	sbci	r17, 0xFF	; 255
    107a:	ce 01       	movw	r24, r28
    107c:	8e 56       	subi	r24, 0x6E	; 110
    107e:	9f 4f       	sbci	r25, 0xFF	; 255
    1080:	fc 01       	movw	r30, r24
    1082:	60 81       	ld	r22, Z
    1084:	71 81       	ldd	r23, Z+1	; 0x01
    1086:	82 81       	ldd	r24, Z+2	; 0x02
    1088:	93 81       	ldd	r25, Z+3	; 0x03
    108a:	4f d6       	rcall	.+3230   	; 0x1d2a <__fixunssfsi>
    108c:	dc 01       	movw	r26, r24
    108e:	cb 01       	movw	r24, r22
    1090:	f8 01       	movw	r30, r16
    1092:	91 83       	std	Z+1, r25	; 0x01
    1094:	80 83       	st	Z, r24
    1096:	ce 01       	movw	r24, r28
    1098:	86 56       	subi	r24, 0x66	; 102
    109a:	9f 4f       	sbci	r25, 0xFF	; 255
    109c:	9e 01       	movw	r18, r28
    109e:	2a 56       	subi	r18, 0x6A	; 106
    10a0:	3f 4f       	sbci	r19, 0xFF	; 255
    10a2:	f9 01       	movw	r30, r18
    10a4:	20 81       	ld	r18, Z
    10a6:	31 81       	ldd	r19, Z+1	; 0x01
    10a8:	fc 01       	movw	r30, r24
    10aa:	31 83       	std	Z+1, r19	; 0x01
    10ac:	20 83       	st	Z, r18
    10ae:	ce 01       	movw	r24, r28
    10b0:	86 56       	subi	r24, 0x66	; 102
    10b2:	9f 4f       	sbci	r25, 0xFF	; 255
    10b4:	fc 01       	movw	r30, r24
    10b6:	80 81       	ld	r24, Z
    10b8:	91 81       	ldd	r25, Z+1	; 0x01
    10ba:	01 97       	sbiw	r24, 0x01	; 1
    10bc:	f1 f7       	brne	.-4      	; 0x10ba <lcd_init+0x258>
    10be:	9e 01       	movw	r18, r28
    10c0:	26 56       	subi	r18, 0x66	; 102
    10c2:	3f 4f       	sbci	r19, 0xFF	; 255
    10c4:	f9 01       	movw	r30, r18
    10c6:	91 83       	std	Z+1, r25	; 0x01
    10c8:	80 83       	st	Z, r24
    10ca:	4b c0       	rjmp	.+150    	; 0x1162 <lcd_init+0x300>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    10cc:	ce 01       	movw	r24, r28
    10ce:	8b 57       	subi	r24, 0x7B	; 123
    10d0:	9f 4f       	sbci	r25, 0xFF	; 255
    10d2:	20 e0       	ldi	r18, 0x00	; 0
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	4f e7       	ldi	r20, 0x7F	; 127
    10d8:	53 e4       	ldi	r21, 0x43	; 67
    10da:	fc 01       	movw	r30, r24
    10dc:	60 81       	ld	r22, Z
    10de:	71 81       	ldd	r23, Z+1	; 0x01
    10e0:	82 81       	ldd	r24, Z+2	; 0x02
    10e2:	93 81       	ldd	r25, Z+3	; 0x03
    10e4:	c3 d6       	rcall	.+3462   	; 0x1e6c <__gesf2>
    10e6:	18 16       	cp	r1, r24
    10e8:	64 f5       	brge	.+88     	; 0x1142 <lcd_init+0x2e0>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    10ea:	8e 01       	movw	r16, r28
    10ec:	04 56       	subi	r16, 0x64	; 100
    10ee:	1f 4f       	sbci	r17, 0xFF	; 255
    10f0:	ce 01       	movw	r24, r28
    10f2:	87 57       	subi	r24, 0x77	; 119
    10f4:	9f 4f       	sbci	r25, 0xFF	; 255
    10f6:	fc 01       	movw	r30, r24
    10f8:	60 81       	ld	r22, Z
    10fa:	71 81       	ldd	r23, Z+1	; 0x01
    10fc:	82 81       	ldd	r24, Z+2	; 0x02
    10fe:	93 81       	ldd	r25, Z+3	; 0x03
    1100:	14 d6       	rcall	.+3112   	; 0x1d2a <__fixunssfsi>
    1102:	dc 01       	movw	r26, r24
    1104:	cb 01       	movw	r24, r22
    1106:	f8 01       	movw	r30, r16
    1108:	91 83       	std	Z+1, r25	; 0x01
    110a:	80 83       	st	Z, r24
    110c:	ce 01       	movw	r24, r28
    110e:	82 56       	subi	r24, 0x62	; 98
    1110:	9f 4f       	sbci	r25, 0xFF	; 255
    1112:	9e 01       	movw	r18, r28
    1114:	24 56       	subi	r18, 0x64	; 100
    1116:	3f 4f       	sbci	r19, 0xFF	; 255
    1118:	f9 01       	movw	r30, r18
    111a:	20 81       	ld	r18, Z
    111c:	31 81       	ldd	r19, Z+1	; 0x01
    111e:	fc 01       	movw	r30, r24
    1120:	31 83       	std	Z+1, r19	; 0x01
    1122:	20 83       	st	Z, r18
    1124:	ce 01       	movw	r24, r28
    1126:	82 56       	subi	r24, 0x62	; 98
    1128:	9f 4f       	sbci	r25, 0xFF	; 255
    112a:	fc 01       	movw	r30, r24
    112c:	80 81       	ld	r24, Z
    112e:	91 81       	ldd	r25, Z+1	; 0x01
    1130:	01 97       	sbiw	r24, 0x01	; 1
    1132:	f1 f7       	brne	.-4      	; 0x1130 <lcd_init+0x2ce>
    1134:	9e 01       	movw	r18, r28
    1136:	22 56       	subi	r18, 0x62	; 98
    1138:	3f 4f       	sbci	r19, 0xFF	; 255
    113a:	f9 01       	movw	r30, r18
    113c:	91 83       	std	Z+1, r25	; 0x01
    113e:	80 83       	st	Z, r24
    1140:	27 c0       	rjmp	.+78     	; 0x1190 <lcd_init+0x32e>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1142:	8e 01       	movw	r16, r28
    1144:	03 57       	subi	r16, 0x73	; 115
    1146:	1f 4f       	sbci	r17, 0xFF	; 255
    1148:	ce 01       	movw	r24, r28
    114a:	8b 57       	subi	r24, 0x7B	; 123
    114c:	9f 4f       	sbci	r25, 0xFF	; 255
    114e:	fc 01       	movw	r30, r24
    1150:	60 81       	ld	r22, Z
    1152:	71 81       	ldd	r23, Z+1	; 0x01
    1154:	82 81       	ldd	r24, Z+2	; 0x02
    1156:	93 81       	ldd	r25, Z+3	; 0x03
    1158:	e8 d5       	rcall	.+3024   	; 0x1d2a <__fixunssfsi>
    115a:	dc 01       	movw	r26, r24
    115c:	cb 01       	movw	r24, r22
    115e:	f8 01       	movw	r30, r16
    1160:	80 83       	st	Z, r24
    1162:	ce 01       	movw	r24, r28
    1164:	80 56       	subi	r24, 0x60	; 96
    1166:	9f 4f       	sbci	r25, 0xFF	; 255
    1168:	9e 01       	movw	r18, r28
    116a:	23 57       	subi	r18, 0x73	; 115
    116c:	3f 4f       	sbci	r19, 0xFF	; 255
    116e:	f9 01       	movw	r30, r18
    1170:	20 81       	ld	r18, Z
    1172:	fc 01       	movw	r30, r24
    1174:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1176:	ce 01       	movw	r24, r28
    1178:	80 56       	subi	r24, 0x60	; 96
    117a:	9f 4f       	sbci	r25, 0xFF	; 255
    117c:	fc 01       	movw	r30, r24
    117e:	80 81       	ld	r24, Z
    1180:	28 2f       	mov	r18, r24
    1182:	2a 95       	dec	r18
    1184:	f1 f7       	brne	.-4      	; 0x1182 <lcd_init+0x320>
    1186:	ce 01       	movw	r24, r28
    1188:	80 56       	subi	r24, 0x60	; 96
    118a:	9f 4f       	sbci	r25, 0xFF	; 255
    118c:	fc 01       	movw	r30, r24
    118e:	20 83       	st	Z, r18
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
    1190:	88 e2       	ldi	r24, 0x28	; 40
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	28 e2       	ldi	r18, 0x28	; 40
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	f9 01       	movw	r30, r18
    119a:	20 81       	ld	r18, Z
    119c:	22 60       	ori	r18, 0x02	; 2
    119e:	fc 01       	movw	r30, r24
    11a0:	20 83       	st	Z, r18
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
    11a2:	88 e2       	ldi	r24, 0x28	; 40
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	28 e2       	ldi	r18, 0x28	; 40
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	f9 01       	movw	r30, r18
    11ac:	20 81       	ld	r18, Z
    11ae:	21 60       	ori	r18, 0x01	; 1
    11b0:	fc 01       	movw	r30, r24
    11b2:	20 83       	st	Z, r18
    lcd_e_toggle();
    11b4:	48 d7       	rcall	.+3728   	; 0x2046 <__TEXT_REGION_LENGTH__+0x46>
    11b6:	80 e0       	ldi	r24, 0x00	; 0
    11b8:	90 e4       	ldi	r25, 0x40	; 64
    11ba:	ac e9       	ldi	r26, 0x9C	; 156
    11bc:	b5 e4       	ldi	r27, 0x45	; 69
    11be:	8d 83       	std	Y+5, r24	; 0x05
    11c0:	9e 83       	std	Y+6, r25	; 0x06
    11c2:	af 83       	std	Y+7, r26	; 0x07
    11c4:	b8 87       	std	Y+8, r27	; 0x08
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    11c6:	8e 01       	movw	r16, r28
    11c8:	07 59       	subi	r16, 0x97	; 151
    11ca:	1f 4f       	sbci	r17, 0xFF	; 255
    11cc:	2b ea       	ldi	r18, 0xAB	; 171
    11ce:	3a ea       	ldi	r19, 0xAA	; 170
    11d0:	4a ea       	ldi	r20, 0xAA	; 170
    11d2:	5e e3       	ldi	r21, 0x3E	; 62
    11d4:	6d 81       	ldd	r22, Y+5	; 0x05
    11d6:	7e 81       	ldd	r23, Y+6	; 0x06
    11d8:	8f 81       	ldd	r24, Y+7	; 0x07
    11da:	98 85       	ldd	r25, Y+8	; 0x08
    11dc:	4b d6       	rcall	.+3222   	; 0x1e74 <__mulsf3>
    11de:	dc 01       	movw	r26, r24
    11e0:	cb 01       	movw	r24, r22
    11e2:	f8 01       	movw	r30, r16
    11e4:	80 83       	st	Z, r24
    11e6:	91 83       	std	Z+1, r25	; 0x01
    11e8:	a2 83       	std	Z+2, r26	; 0x02
    11ea:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
    11ec:	8e 01       	movw	r16, r28
    11ee:	03 59       	subi	r16, 0x93	; 147
    11f0:	1f 4f       	sbci	r17, 0xFF	; 255
    11f2:	20 e0       	ldi	r18, 0x00	; 0
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	40 e8       	ldi	r20, 0x80	; 128
    11f8:	5e e3       	ldi	r21, 0x3E	; 62
    11fa:	6d 81       	ldd	r22, Y+5	; 0x05
    11fc:	7e 81       	ldd	r23, Y+6	; 0x06
    11fe:	8f 81       	ldd	r24, Y+7	; 0x07
    1200:	98 85       	ldd	r25, Y+8	; 0x08
    1202:	38 d6       	rcall	.+3184   	; 0x1e74 <__mulsf3>
    1204:	dc 01       	movw	r26, r24
    1206:	cb 01       	movw	r24, r22
    1208:	f8 01       	movw	r30, r16
    120a:	80 83       	st	Z, r24
    120c:	91 83       	std	Z+1, r25	; 0x01
    120e:	a2 83       	std	Z+2, r26	; 0x02
    1210:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1212:	ce 01       	movw	r24, r28
    1214:	87 59       	subi	r24, 0x97	; 151
    1216:	9f 4f       	sbci	r25, 0xFF	; 255
    1218:	20 e0       	ldi	r18, 0x00	; 0
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	40 e8       	ldi	r20, 0x80	; 128
    121e:	5f e3       	ldi	r21, 0x3F	; 63
    1220:	fc 01       	movw	r30, r24
    1222:	60 81       	ld	r22, Z
    1224:	71 81       	ldd	r23, Z+1	; 0x01
    1226:	82 81       	ldd	r24, Z+2	; 0x02
    1228:	93 81       	ldd	r25, Z+3	; 0x03
    122a:	13 d5       	rcall	.+2598   	; 0x1c52 <__cmpsf2>
    122c:	88 23       	and	r24, r24
    122e:	3c f4       	brge	.+14     	; 0x123e <lcd_init+0x3dc>
		__ticks = 1;
    1230:	ce 01       	movw	r24, r28
    1232:	8f 58       	subi	r24, 0x8F	; 143
    1234:	9f 4f       	sbci	r25, 0xFF	; 255
    1236:	21 e0       	ldi	r18, 0x01	; 1
    1238:	fc 01       	movw	r30, r24
    123a:	20 83       	st	Z, r18
    123c:	21 c1       	rjmp	.+578    	; 0x1480 <lcd_init+0x61e>
	else if (__tmp2 > 65535)
    123e:	ce 01       	movw	r24, r28
    1240:	83 59       	subi	r24, 0x93	; 147
    1242:	9f 4f       	sbci	r25, 0xFF	; 255
    1244:	20 e0       	ldi	r18, 0x00	; 0
    1246:	3f ef       	ldi	r19, 0xFF	; 255
    1248:	4f e7       	ldi	r20, 0x7F	; 127
    124a:	57 e4       	ldi	r21, 0x47	; 71
    124c:	fc 01       	movw	r30, r24
    124e:	60 81       	ld	r22, Z
    1250:	71 81       	ldd	r23, Z+1	; 0x01
    1252:	82 81       	ldd	r24, Z+2	; 0x02
    1254:	93 81       	ldd	r25, Z+3	; 0x03
    1256:	0a d6       	rcall	.+3092   	; 0x1e6c <__gesf2>
    1258:	18 16       	cp	r1, r24
    125a:	0c f0       	brlt	.+2      	; 0x125e <lcd_init+0x3fc>
    125c:	c6 c0       	rjmp	.+396    	; 0x13ea <lcd_init+0x588>
	{
		_delay_ms(__us / 1000.0);
    125e:	20 e0       	ldi	r18, 0x00	; 0
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	4a e7       	ldi	r20, 0x7A	; 122
    1264:	54 e4       	ldi	r21, 0x44	; 68
    1266:	6d 81       	ldd	r22, Y+5	; 0x05
    1268:	7e 81       	ldd	r23, Y+6	; 0x06
    126a:	8f 81       	ldd	r24, Y+7	; 0x07
    126c:	98 85       	ldd	r25, Y+8	; 0x08
    126e:	f5 d4       	rcall	.+2538   	; 0x1c5a <__divsf3>
    1270:	dc 01       	movw	r26, r24
    1272:	cb 01       	movw	r24, r22
    1274:	9e 01       	movw	r18, r28
    1276:	2e 58       	subi	r18, 0x8E	; 142
    1278:	3f 4f       	sbci	r19, 0xFF	; 255
    127a:	f9 01       	movw	r30, r18
    127c:	80 83       	st	Z, r24
    127e:	91 83       	std	Z+1, r25	; 0x01
    1280:	a2 83       	std	Z+2, r26	; 0x02
    1282:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1284:	8e 01       	movw	r16, r28
    1286:	0a 58       	subi	r16, 0x8A	; 138
    1288:	1f 4f       	sbci	r17, 0xFF	; 255
    128a:	ce 01       	movw	r24, r28
    128c:	8e 58       	subi	r24, 0x8E	; 142
    128e:	9f 4f       	sbci	r25, 0xFF	; 255
    1290:	20 e0       	ldi	r18, 0x00	; 0
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	4a e7       	ldi	r20, 0x7A	; 122
    1296:	53 e4       	ldi	r21, 0x43	; 67
    1298:	fc 01       	movw	r30, r24
    129a:	60 81       	ld	r22, Z
    129c:	71 81       	ldd	r23, Z+1	; 0x01
    129e:	82 81       	ldd	r24, Z+2	; 0x02
    12a0:	93 81       	ldd	r25, Z+3	; 0x03
    12a2:	e8 d5       	rcall	.+3024   	; 0x1e74 <__mulsf3>
    12a4:	dc 01       	movw	r26, r24
    12a6:	cb 01       	movw	r24, r22
    12a8:	f8 01       	movw	r30, r16
    12aa:	80 83       	st	Z, r24
    12ac:	91 83       	std	Z+1, r25	; 0x01
    12ae:	a2 83       	std	Z+2, r26	; 0x02
    12b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    12b2:	ce 01       	movw	r24, r28
    12b4:	8a 58       	subi	r24, 0x8A	; 138
    12b6:	9f 4f       	sbci	r25, 0xFF	; 255
    12b8:	20 e0       	ldi	r18, 0x00	; 0
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	40 e8       	ldi	r20, 0x80	; 128
    12be:	5f e3       	ldi	r21, 0x3F	; 63
    12c0:	fc 01       	movw	r30, r24
    12c2:	60 81       	ld	r22, Z
    12c4:	71 81       	ldd	r23, Z+1	; 0x01
    12c6:	82 81       	ldd	r24, Z+2	; 0x02
    12c8:	93 81       	ldd	r25, Z+3	; 0x03
    12ca:	c3 d4       	rcall	.+2438   	; 0x1c52 <__cmpsf2>
    12cc:	88 23       	and	r24, r24
    12ce:	4c f4       	brge	.+18     	; 0x12e2 <lcd_init+0x480>
		__ticks = 1;
    12d0:	ce 01       	movw	r24, r28
    12d2:	86 58       	subi	r24, 0x86	; 134
    12d4:	9f 4f       	sbci	r25, 0xFF	; 255
    12d6:	21 e0       	ldi	r18, 0x01	; 1
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	fc 01       	movw	r30, r24
    12dc:	31 83       	std	Z+1, r19	; 0x01
    12de:	20 83       	st	Z, r18
    12e0:	69 c0       	rjmp	.+210    	; 0x13b4 <lcd_init+0x552>
	else if (__tmp > 65535)
    12e2:	ce 01       	movw	r24, r28
    12e4:	8a 58       	subi	r24, 0x8A	; 138
    12e6:	9f 4f       	sbci	r25, 0xFF	; 255
    12e8:	20 e0       	ldi	r18, 0x00	; 0
    12ea:	3f ef       	ldi	r19, 0xFF	; 255
    12ec:	4f e7       	ldi	r20, 0x7F	; 127
    12ee:	57 e4       	ldi	r21, 0x47	; 71
    12f0:	fc 01       	movw	r30, r24
    12f2:	60 81       	ld	r22, Z
    12f4:	71 81       	ldd	r23, Z+1	; 0x01
    12f6:	82 81       	ldd	r24, Z+2	; 0x02
    12f8:	93 81       	ldd	r25, Z+3	; 0x03
    12fa:	b8 d5       	rcall	.+2928   	; 0x1e6c <__gesf2>
    12fc:	18 16       	cp	r1, r24
    12fe:	0c f0       	brlt	.+2      	; 0x1302 <lcd_init+0x4a0>
    1300:	48 c0       	rjmp	.+144    	; 0x1392 <lcd_init+0x530>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1302:	ce 01       	movw	r24, r28
    1304:	8e 58       	subi	r24, 0x8E	; 142
    1306:	9f 4f       	sbci	r25, 0xFF	; 255
    1308:	20 e0       	ldi	r18, 0x00	; 0
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	40 e2       	ldi	r20, 0x20	; 32
    130e:	51 e4       	ldi	r21, 0x41	; 65
    1310:	fc 01       	movw	r30, r24
    1312:	60 81       	ld	r22, Z
    1314:	71 81       	ldd	r23, Z+1	; 0x01
    1316:	82 81       	ldd	r24, Z+2	; 0x02
    1318:	93 81       	ldd	r25, Z+3	; 0x03
    131a:	ac d5       	rcall	.+2904   	; 0x1e74 <__mulsf3>
    131c:	dc 01       	movw	r26, r24
    131e:	cb 01       	movw	r24, r22
    1320:	8e 01       	movw	r16, r28
    1322:	06 58       	subi	r16, 0x86	; 134
    1324:	1f 4f       	sbci	r17, 0xFF	; 255
    1326:	bc 01       	movw	r22, r24
    1328:	cd 01       	movw	r24, r26
    132a:	ff d4       	rcall	.+2558   	; 0x1d2a <__fixunssfsi>
    132c:	dc 01       	movw	r26, r24
    132e:	cb 01       	movw	r24, r22
    1330:	f8 01       	movw	r30, r16
    1332:	91 83       	std	Z+1, r25	; 0x01
    1334:	80 83       	st	Z, r24
    1336:	24 c0       	rjmp	.+72     	; 0x1380 <lcd_init+0x51e>
    1338:	ce 01       	movw	r24, r28
    133a:	84 58       	subi	r24, 0x84	; 132
    133c:	9f 4f       	sbci	r25, 0xFF	; 255
    133e:	29 e1       	ldi	r18, 0x19	; 25
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	fc 01       	movw	r30, r24
    1344:	31 83       	std	Z+1, r19	; 0x01
    1346:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1348:	ce 01       	movw	r24, r28
    134a:	84 58       	subi	r24, 0x84	; 132
    134c:	9f 4f       	sbci	r25, 0xFF	; 255
    134e:	fc 01       	movw	r30, r24
    1350:	80 81       	ld	r24, Z
    1352:	91 81       	ldd	r25, Z+1	; 0x01
    1354:	01 97       	sbiw	r24, 0x01	; 1
    1356:	f1 f7       	brne	.-4      	; 0x1354 <lcd_init+0x4f2>
    1358:	9e 01       	movw	r18, r28
    135a:	24 58       	subi	r18, 0x84	; 132
    135c:	3f 4f       	sbci	r19, 0xFF	; 255
    135e:	f9 01       	movw	r30, r18
    1360:	91 83       	std	Z+1, r25	; 0x01
    1362:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1364:	ce 01       	movw	r24, r28
    1366:	86 58       	subi	r24, 0x86	; 134
    1368:	9f 4f       	sbci	r25, 0xFF	; 255
    136a:	9e 01       	movw	r18, r28
    136c:	26 58       	subi	r18, 0x86	; 134
    136e:	3f 4f       	sbci	r19, 0xFF	; 255
    1370:	f9 01       	movw	r30, r18
    1372:	20 81       	ld	r18, Z
    1374:	31 81       	ldd	r19, Z+1	; 0x01
    1376:	21 50       	subi	r18, 0x01	; 1
    1378:	31 09       	sbc	r19, r1
    137a:	fc 01       	movw	r30, r24
    137c:	31 83       	std	Z+1, r19	; 0x01
    137e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1380:	ce 01       	movw	r24, r28
    1382:	86 58       	subi	r24, 0x86	; 134
    1384:	9f 4f       	sbci	r25, 0xFF	; 255
    1386:	fc 01       	movw	r30, r24
    1388:	80 81       	ld	r24, Z
    138a:	91 81       	ldd	r25, Z+1	; 0x01
    138c:	89 2b       	or	r24, r25
    138e:	a1 f6       	brne	.-88     	; 0x1338 <lcd_init+0x4d6>
    1390:	77 c0       	rjmp	.+238    	; 0x1480 <lcd_init+0x61e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1392:	8e 01       	movw	r16, r28
    1394:	06 58       	subi	r16, 0x86	; 134
    1396:	1f 4f       	sbci	r17, 0xFF	; 255
    1398:	ce 01       	movw	r24, r28
    139a:	8a 58       	subi	r24, 0x8A	; 138
    139c:	9f 4f       	sbci	r25, 0xFF	; 255
    139e:	fc 01       	movw	r30, r24
    13a0:	60 81       	ld	r22, Z
    13a2:	71 81       	ldd	r23, Z+1	; 0x01
    13a4:	82 81       	ldd	r24, Z+2	; 0x02
    13a6:	93 81       	ldd	r25, Z+3	; 0x03
    13a8:	c0 d4       	rcall	.+2432   	; 0x1d2a <__fixunssfsi>
    13aa:	dc 01       	movw	r26, r24
    13ac:	cb 01       	movw	r24, r22
    13ae:	f8 01       	movw	r30, r16
    13b0:	91 83       	std	Z+1, r25	; 0x01
    13b2:	80 83       	st	Z, r24
    13b4:	ce 01       	movw	r24, r28
    13b6:	82 58       	subi	r24, 0x82	; 130
    13b8:	9f 4f       	sbci	r25, 0xFF	; 255
    13ba:	9e 01       	movw	r18, r28
    13bc:	26 58       	subi	r18, 0x86	; 134
    13be:	3f 4f       	sbci	r19, 0xFF	; 255
    13c0:	f9 01       	movw	r30, r18
    13c2:	20 81       	ld	r18, Z
    13c4:	31 81       	ldd	r19, Z+1	; 0x01
    13c6:	fc 01       	movw	r30, r24
    13c8:	31 83       	std	Z+1, r19	; 0x01
    13ca:	20 83       	st	Z, r18
    13cc:	ce 01       	movw	r24, r28
    13ce:	82 58       	subi	r24, 0x82	; 130
    13d0:	9f 4f       	sbci	r25, 0xFF	; 255
    13d2:	fc 01       	movw	r30, r24
    13d4:	80 81       	ld	r24, Z
    13d6:	91 81       	ldd	r25, Z+1	; 0x01
    13d8:	01 97       	sbiw	r24, 0x01	; 1
    13da:	f1 f7       	brne	.-4      	; 0x13d8 <lcd_init+0x576>
    13dc:	9e 01       	movw	r18, r28
    13de:	22 58       	subi	r18, 0x82	; 130
    13e0:	3f 4f       	sbci	r19, 0xFF	; 255
    13e2:	f9 01       	movw	r30, r18
    13e4:	91 83       	std	Z+1, r25	; 0x01
    13e6:	80 83       	st	Z, r24
    13e8:	4b c0       	rjmp	.+150    	; 0x1480 <lcd_init+0x61e>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    13ea:	ce 01       	movw	r24, r28
    13ec:	87 59       	subi	r24, 0x97	; 151
    13ee:	9f 4f       	sbci	r25, 0xFF	; 255
    13f0:	20 e0       	ldi	r18, 0x00	; 0
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	4f e7       	ldi	r20, 0x7F	; 127
    13f6:	53 e4       	ldi	r21, 0x43	; 67
    13f8:	fc 01       	movw	r30, r24
    13fa:	60 81       	ld	r22, Z
    13fc:	71 81       	ldd	r23, Z+1	; 0x01
    13fe:	82 81       	ldd	r24, Z+2	; 0x02
    1400:	93 81       	ldd	r25, Z+3	; 0x03
    1402:	34 d5       	rcall	.+2664   	; 0x1e6c <__gesf2>
    1404:	18 16       	cp	r1, r24
    1406:	64 f5       	brge	.+88     	; 0x1460 <lcd_init+0x5fe>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1408:	8e 01       	movw	r16, r28
    140a:	00 58       	subi	r16, 0x80	; 128
    140c:	1f 4f       	sbci	r17, 0xFF	; 255
    140e:	ce 01       	movw	r24, r28
    1410:	83 59       	subi	r24, 0x93	; 147
    1412:	9f 4f       	sbci	r25, 0xFF	; 255
    1414:	fc 01       	movw	r30, r24
    1416:	60 81       	ld	r22, Z
    1418:	71 81       	ldd	r23, Z+1	; 0x01
    141a:	82 81       	ldd	r24, Z+2	; 0x02
    141c:	93 81       	ldd	r25, Z+3	; 0x03
    141e:	85 d4       	rcall	.+2314   	; 0x1d2a <__fixunssfsi>
    1420:	dc 01       	movw	r26, r24
    1422:	cb 01       	movw	r24, r22
    1424:	f8 01       	movw	r30, r16
    1426:	91 83       	std	Z+1, r25	; 0x01
    1428:	80 83       	st	Z, r24
    142a:	ce 01       	movw	r24, r28
    142c:	8e 57       	subi	r24, 0x7E	; 126
    142e:	9f 4f       	sbci	r25, 0xFF	; 255
    1430:	9e 01       	movw	r18, r28
    1432:	20 58       	subi	r18, 0x80	; 128
    1434:	3f 4f       	sbci	r19, 0xFF	; 255
    1436:	f9 01       	movw	r30, r18
    1438:	20 81       	ld	r18, Z
    143a:	31 81       	ldd	r19, Z+1	; 0x01
    143c:	fc 01       	movw	r30, r24
    143e:	31 83       	std	Z+1, r19	; 0x01
    1440:	20 83       	st	Z, r18
    1442:	ce 01       	movw	r24, r28
    1444:	8e 57       	subi	r24, 0x7E	; 126
    1446:	9f 4f       	sbci	r25, 0xFF	; 255
    1448:	fc 01       	movw	r30, r24
    144a:	80 81       	ld	r24, Z
    144c:	91 81       	ldd	r25, Z+1	; 0x01
    144e:	01 97       	sbiw	r24, 0x01	; 1
    1450:	f1 f7       	brne	.-4      	; 0x144e <lcd_init+0x5ec>
    1452:	9e 01       	movw	r18, r28
    1454:	2e 57       	subi	r18, 0x7E	; 126
    1456:	3f 4f       	sbci	r19, 0xFF	; 255
    1458:	f9 01       	movw	r30, r18
    145a:	91 83       	std	Z+1, r25	; 0x01
    145c:	80 83       	st	Z, r24
    145e:	27 c0       	rjmp	.+78     	; 0x14ae <lcd_init+0x64c>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1460:	8e 01       	movw	r16, r28
    1462:	0f 58       	subi	r16, 0x8F	; 143
    1464:	1f 4f       	sbci	r17, 0xFF	; 255
    1466:	ce 01       	movw	r24, r28
    1468:	87 59       	subi	r24, 0x97	; 151
    146a:	9f 4f       	sbci	r25, 0xFF	; 255
    146c:	fc 01       	movw	r30, r24
    146e:	60 81       	ld	r22, Z
    1470:	71 81       	ldd	r23, Z+1	; 0x01
    1472:	82 81       	ldd	r24, Z+2	; 0x02
    1474:	93 81       	ldd	r25, Z+3	; 0x03
    1476:	59 d4       	rcall	.+2226   	; 0x1d2a <__fixunssfsi>
    1478:	dc 01       	movw	r26, r24
    147a:	cb 01       	movw	r24, r22
    147c:	f8 01       	movw	r30, r16
    147e:	80 83       	st	Z, r24
    1480:	ce 01       	movw	r24, r28
    1482:	8c 57       	subi	r24, 0x7C	; 124
    1484:	9f 4f       	sbci	r25, 0xFF	; 255
    1486:	9e 01       	movw	r18, r28
    1488:	2f 58       	subi	r18, 0x8F	; 143
    148a:	3f 4f       	sbci	r19, 0xFF	; 255
    148c:	f9 01       	movw	r30, r18
    148e:	20 81       	ld	r18, Z
    1490:	fc 01       	movw	r30, r24
    1492:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1494:	ce 01       	movw	r24, r28
    1496:	8c 57       	subi	r24, 0x7C	; 124
    1498:	9f 4f       	sbci	r25, 0xFF	; 255
    149a:	fc 01       	movw	r30, r24
    149c:	80 81       	ld	r24, Z
    149e:	28 2f       	mov	r18, r24
    14a0:	2a 95       	dec	r18
    14a2:	f1 f7       	brne	.-4      	; 0x14a0 <lcd_init+0x63e>
    14a4:	ce 01       	movw	r24, r28
    14a6:	8c 57       	subi	r24, 0x7C	; 124
    14a8:	9f 4f       	sbci	r25, 0xFF	; 255
    14aa:	fc 01       	movw	r30, r24
    14ac:	20 83       	st	Z, r18
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
    14ae:	cb d5       	rcall	.+2966   	; 0x2046 <__TEXT_REGION_LENGTH__+0x46>
    14b0:	80 e0       	ldi	r24, 0x00	; 0
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	a0 e8       	ldi	r26, 0x80	; 128
    14b6:	b2 e4       	ldi	r27, 0x42	; 66
    14b8:	89 87       	std	Y+9, r24	; 0x09
    14ba:	9a 87       	std	Y+10, r25	; 0x0a
    14bc:	ab 87       	std	Y+11, r26	; 0x0b
    14be:	bc 87       	std	Y+12, r27	; 0x0c
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    14c0:	8e 01       	movw	r16, r28
    14c2:	03 5b       	subi	r16, 0xB3	; 179
    14c4:	1f 4f       	sbci	r17, 0xFF	; 255
    14c6:	2b ea       	ldi	r18, 0xAB	; 171
    14c8:	3a ea       	ldi	r19, 0xAA	; 170
    14ca:	4a ea       	ldi	r20, 0xAA	; 170
    14cc:	5e e3       	ldi	r21, 0x3E	; 62
    14ce:	69 85       	ldd	r22, Y+9	; 0x09
    14d0:	7a 85       	ldd	r23, Y+10	; 0x0a
    14d2:	8b 85       	ldd	r24, Y+11	; 0x0b
    14d4:	9c 85       	ldd	r25, Y+12	; 0x0c
    14d6:	ce d4       	rcall	.+2460   	; 0x1e74 <__mulsf3>
    14d8:	dc 01       	movw	r26, r24
    14da:	cb 01       	movw	r24, r22
    14dc:	f8 01       	movw	r30, r16
    14de:	80 83       	st	Z, r24
    14e0:	91 83       	std	Z+1, r25	; 0x01
    14e2:	a2 83       	std	Z+2, r26	; 0x02
    14e4:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
    14e6:	8e 01       	movw	r16, r28
    14e8:	0f 5a       	subi	r16, 0xAF	; 175
    14ea:	1f 4f       	sbci	r17, 0xFF	; 255
    14ec:	20 e0       	ldi	r18, 0x00	; 0
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	40 e8       	ldi	r20, 0x80	; 128
    14f2:	5e e3       	ldi	r21, 0x3E	; 62
    14f4:	69 85       	ldd	r22, Y+9	; 0x09
    14f6:	7a 85       	ldd	r23, Y+10	; 0x0a
    14f8:	8b 85       	ldd	r24, Y+11	; 0x0b
    14fa:	9c 85       	ldd	r25, Y+12	; 0x0c
    14fc:	bb d4       	rcall	.+2422   	; 0x1e74 <__mulsf3>
    14fe:	dc 01       	movw	r26, r24
    1500:	cb 01       	movw	r24, r22
    1502:	f8 01       	movw	r30, r16
    1504:	80 83       	st	Z, r24
    1506:	91 83       	std	Z+1, r25	; 0x01
    1508:	a2 83       	std	Z+2, r26	; 0x02
    150a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    150c:	ce 01       	movw	r24, r28
    150e:	83 5b       	subi	r24, 0xB3	; 179
    1510:	9f 4f       	sbci	r25, 0xFF	; 255
    1512:	20 e0       	ldi	r18, 0x00	; 0
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	40 e8       	ldi	r20, 0x80	; 128
    1518:	5f e3       	ldi	r21, 0x3F	; 63
    151a:	fc 01       	movw	r30, r24
    151c:	60 81       	ld	r22, Z
    151e:	71 81       	ldd	r23, Z+1	; 0x01
    1520:	82 81       	ldd	r24, Z+2	; 0x02
    1522:	93 81       	ldd	r25, Z+3	; 0x03
    1524:	96 d3       	rcall	.+1836   	; 0x1c52 <__cmpsf2>
    1526:	88 23       	and	r24, r24
    1528:	3c f4       	brge	.+14     	; 0x1538 <lcd_init+0x6d6>
		__ticks = 1;
    152a:	ce 01       	movw	r24, r28
    152c:	8b 5a       	subi	r24, 0xAB	; 171
    152e:	9f 4f       	sbci	r25, 0xFF	; 255
    1530:	21 e0       	ldi	r18, 0x01	; 1
    1532:	fc 01       	movw	r30, r24
    1534:	20 83       	st	Z, r18
    1536:	21 c1       	rjmp	.+578    	; 0x177a <lcd_init+0x918>
	else if (__tmp2 > 65535)
    1538:	ce 01       	movw	r24, r28
    153a:	8f 5a       	subi	r24, 0xAF	; 175
    153c:	9f 4f       	sbci	r25, 0xFF	; 255
    153e:	20 e0       	ldi	r18, 0x00	; 0
    1540:	3f ef       	ldi	r19, 0xFF	; 255
    1542:	4f e7       	ldi	r20, 0x7F	; 127
    1544:	57 e4       	ldi	r21, 0x47	; 71
    1546:	fc 01       	movw	r30, r24
    1548:	60 81       	ld	r22, Z
    154a:	71 81       	ldd	r23, Z+1	; 0x01
    154c:	82 81       	ldd	r24, Z+2	; 0x02
    154e:	93 81       	ldd	r25, Z+3	; 0x03
    1550:	8d d4       	rcall	.+2330   	; 0x1e6c <__gesf2>
    1552:	18 16       	cp	r1, r24
    1554:	0c f0       	brlt	.+2      	; 0x1558 <lcd_init+0x6f6>
    1556:	c6 c0       	rjmp	.+396    	; 0x16e4 <lcd_init+0x882>
	{
		_delay_ms(__us / 1000.0);
    1558:	20 e0       	ldi	r18, 0x00	; 0
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	4a e7       	ldi	r20, 0x7A	; 122
    155e:	54 e4       	ldi	r21, 0x44	; 68
    1560:	69 85       	ldd	r22, Y+9	; 0x09
    1562:	7a 85       	ldd	r23, Y+10	; 0x0a
    1564:	8b 85       	ldd	r24, Y+11	; 0x0b
    1566:	9c 85       	ldd	r25, Y+12	; 0x0c
    1568:	78 d3       	rcall	.+1776   	; 0x1c5a <__divsf3>
    156a:	dc 01       	movw	r26, r24
    156c:	cb 01       	movw	r24, r22
    156e:	9e 01       	movw	r18, r28
    1570:	2a 5a       	subi	r18, 0xAA	; 170
    1572:	3f 4f       	sbci	r19, 0xFF	; 255
    1574:	f9 01       	movw	r30, r18
    1576:	80 83       	st	Z, r24
    1578:	91 83       	std	Z+1, r25	; 0x01
    157a:	a2 83       	std	Z+2, r26	; 0x02
    157c:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    157e:	8e 01       	movw	r16, r28
    1580:	06 5a       	subi	r16, 0xA6	; 166
    1582:	1f 4f       	sbci	r17, 0xFF	; 255
    1584:	ce 01       	movw	r24, r28
    1586:	8a 5a       	subi	r24, 0xAA	; 170
    1588:	9f 4f       	sbci	r25, 0xFF	; 255
    158a:	20 e0       	ldi	r18, 0x00	; 0
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	4a e7       	ldi	r20, 0x7A	; 122
    1590:	53 e4       	ldi	r21, 0x43	; 67
    1592:	fc 01       	movw	r30, r24
    1594:	60 81       	ld	r22, Z
    1596:	71 81       	ldd	r23, Z+1	; 0x01
    1598:	82 81       	ldd	r24, Z+2	; 0x02
    159a:	93 81       	ldd	r25, Z+3	; 0x03
    159c:	6b d4       	rcall	.+2262   	; 0x1e74 <__mulsf3>
    159e:	dc 01       	movw	r26, r24
    15a0:	cb 01       	movw	r24, r22
    15a2:	f8 01       	movw	r30, r16
    15a4:	80 83       	st	Z, r24
    15a6:	91 83       	std	Z+1, r25	; 0x01
    15a8:	a2 83       	std	Z+2, r26	; 0x02
    15aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15ac:	ce 01       	movw	r24, r28
    15ae:	86 5a       	subi	r24, 0xA6	; 166
    15b0:	9f 4f       	sbci	r25, 0xFF	; 255
    15b2:	20 e0       	ldi	r18, 0x00	; 0
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	40 e8       	ldi	r20, 0x80	; 128
    15b8:	5f e3       	ldi	r21, 0x3F	; 63
    15ba:	fc 01       	movw	r30, r24
    15bc:	60 81       	ld	r22, Z
    15be:	71 81       	ldd	r23, Z+1	; 0x01
    15c0:	82 81       	ldd	r24, Z+2	; 0x02
    15c2:	93 81       	ldd	r25, Z+3	; 0x03
    15c4:	46 d3       	rcall	.+1676   	; 0x1c52 <__cmpsf2>
    15c6:	88 23       	and	r24, r24
    15c8:	4c f4       	brge	.+18     	; 0x15dc <lcd_init+0x77a>
		__ticks = 1;
    15ca:	ce 01       	movw	r24, r28
    15cc:	82 5a       	subi	r24, 0xA2	; 162
    15ce:	9f 4f       	sbci	r25, 0xFF	; 255
    15d0:	21 e0       	ldi	r18, 0x01	; 1
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	fc 01       	movw	r30, r24
    15d6:	31 83       	std	Z+1, r19	; 0x01
    15d8:	20 83       	st	Z, r18
    15da:	69 c0       	rjmp	.+210    	; 0x16ae <lcd_init+0x84c>
	else if (__tmp > 65535)
    15dc:	ce 01       	movw	r24, r28
    15de:	86 5a       	subi	r24, 0xA6	; 166
    15e0:	9f 4f       	sbci	r25, 0xFF	; 255
    15e2:	20 e0       	ldi	r18, 0x00	; 0
    15e4:	3f ef       	ldi	r19, 0xFF	; 255
    15e6:	4f e7       	ldi	r20, 0x7F	; 127
    15e8:	57 e4       	ldi	r21, 0x47	; 71
    15ea:	fc 01       	movw	r30, r24
    15ec:	60 81       	ld	r22, Z
    15ee:	71 81       	ldd	r23, Z+1	; 0x01
    15f0:	82 81       	ldd	r24, Z+2	; 0x02
    15f2:	93 81       	ldd	r25, Z+3	; 0x03
    15f4:	3b d4       	rcall	.+2166   	; 0x1e6c <__gesf2>
    15f6:	18 16       	cp	r1, r24
    15f8:	0c f0       	brlt	.+2      	; 0x15fc <lcd_init+0x79a>
    15fa:	48 c0       	rjmp	.+144    	; 0x168c <lcd_init+0x82a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15fc:	ce 01       	movw	r24, r28
    15fe:	8a 5a       	subi	r24, 0xAA	; 170
    1600:	9f 4f       	sbci	r25, 0xFF	; 255
    1602:	20 e0       	ldi	r18, 0x00	; 0
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	40 e2       	ldi	r20, 0x20	; 32
    1608:	51 e4       	ldi	r21, 0x41	; 65
    160a:	fc 01       	movw	r30, r24
    160c:	60 81       	ld	r22, Z
    160e:	71 81       	ldd	r23, Z+1	; 0x01
    1610:	82 81       	ldd	r24, Z+2	; 0x02
    1612:	93 81       	ldd	r25, Z+3	; 0x03
    1614:	2f d4       	rcall	.+2142   	; 0x1e74 <__mulsf3>
    1616:	dc 01       	movw	r26, r24
    1618:	cb 01       	movw	r24, r22
    161a:	8e 01       	movw	r16, r28
    161c:	02 5a       	subi	r16, 0xA2	; 162
    161e:	1f 4f       	sbci	r17, 0xFF	; 255
    1620:	bc 01       	movw	r22, r24
    1622:	cd 01       	movw	r24, r26
    1624:	82 d3       	rcall	.+1796   	; 0x1d2a <__fixunssfsi>
    1626:	dc 01       	movw	r26, r24
    1628:	cb 01       	movw	r24, r22
    162a:	f8 01       	movw	r30, r16
    162c:	91 83       	std	Z+1, r25	; 0x01
    162e:	80 83       	st	Z, r24
    1630:	24 c0       	rjmp	.+72     	; 0x167a <lcd_init+0x818>
    1632:	ce 01       	movw	r24, r28
    1634:	80 5a       	subi	r24, 0xA0	; 160
    1636:	9f 4f       	sbci	r25, 0xFF	; 255
    1638:	29 e1       	ldi	r18, 0x19	; 25
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	fc 01       	movw	r30, r24
    163e:	31 83       	std	Z+1, r19	; 0x01
    1640:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1642:	ce 01       	movw	r24, r28
    1644:	80 5a       	subi	r24, 0xA0	; 160
    1646:	9f 4f       	sbci	r25, 0xFF	; 255
    1648:	fc 01       	movw	r30, r24
    164a:	80 81       	ld	r24, Z
    164c:	91 81       	ldd	r25, Z+1	; 0x01
    164e:	01 97       	sbiw	r24, 0x01	; 1
    1650:	f1 f7       	brne	.-4      	; 0x164e <lcd_init+0x7ec>
    1652:	9e 01       	movw	r18, r28
    1654:	20 5a       	subi	r18, 0xA0	; 160
    1656:	3f 4f       	sbci	r19, 0xFF	; 255
    1658:	f9 01       	movw	r30, r18
    165a:	91 83       	std	Z+1, r25	; 0x01
    165c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    165e:	ce 01       	movw	r24, r28
    1660:	82 5a       	subi	r24, 0xA2	; 162
    1662:	9f 4f       	sbci	r25, 0xFF	; 255
    1664:	9e 01       	movw	r18, r28
    1666:	22 5a       	subi	r18, 0xA2	; 162
    1668:	3f 4f       	sbci	r19, 0xFF	; 255
    166a:	f9 01       	movw	r30, r18
    166c:	20 81       	ld	r18, Z
    166e:	31 81       	ldd	r19, Z+1	; 0x01
    1670:	21 50       	subi	r18, 0x01	; 1
    1672:	31 09       	sbc	r19, r1
    1674:	fc 01       	movw	r30, r24
    1676:	31 83       	std	Z+1, r19	; 0x01
    1678:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    167a:	ce 01       	movw	r24, r28
    167c:	82 5a       	subi	r24, 0xA2	; 162
    167e:	9f 4f       	sbci	r25, 0xFF	; 255
    1680:	fc 01       	movw	r30, r24
    1682:	80 81       	ld	r24, Z
    1684:	91 81       	ldd	r25, Z+1	; 0x01
    1686:	89 2b       	or	r24, r25
    1688:	a1 f6       	brne	.-88     	; 0x1632 <lcd_init+0x7d0>
    168a:	77 c0       	rjmp	.+238    	; 0x177a <lcd_init+0x918>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    168c:	8e 01       	movw	r16, r28
    168e:	02 5a       	subi	r16, 0xA2	; 162
    1690:	1f 4f       	sbci	r17, 0xFF	; 255
    1692:	ce 01       	movw	r24, r28
    1694:	86 5a       	subi	r24, 0xA6	; 166
    1696:	9f 4f       	sbci	r25, 0xFF	; 255
    1698:	fc 01       	movw	r30, r24
    169a:	60 81       	ld	r22, Z
    169c:	71 81       	ldd	r23, Z+1	; 0x01
    169e:	82 81       	ldd	r24, Z+2	; 0x02
    16a0:	93 81       	ldd	r25, Z+3	; 0x03
    16a2:	43 d3       	rcall	.+1670   	; 0x1d2a <__fixunssfsi>
    16a4:	dc 01       	movw	r26, r24
    16a6:	cb 01       	movw	r24, r22
    16a8:	f8 01       	movw	r30, r16
    16aa:	91 83       	std	Z+1, r25	; 0x01
    16ac:	80 83       	st	Z, r24
    16ae:	ce 01       	movw	r24, r28
    16b0:	8e 59       	subi	r24, 0x9E	; 158
    16b2:	9f 4f       	sbci	r25, 0xFF	; 255
    16b4:	9e 01       	movw	r18, r28
    16b6:	22 5a       	subi	r18, 0xA2	; 162
    16b8:	3f 4f       	sbci	r19, 0xFF	; 255
    16ba:	f9 01       	movw	r30, r18
    16bc:	20 81       	ld	r18, Z
    16be:	31 81       	ldd	r19, Z+1	; 0x01
    16c0:	fc 01       	movw	r30, r24
    16c2:	31 83       	std	Z+1, r19	; 0x01
    16c4:	20 83       	st	Z, r18
    16c6:	ce 01       	movw	r24, r28
    16c8:	8e 59       	subi	r24, 0x9E	; 158
    16ca:	9f 4f       	sbci	r25, 0xFF	; 255
    16cc:	fc 01       	movw	r30, r24
    16ce:	80 81       	ld	r24, Z
    16d0:	91 81       	ldd	r25, Z+1	; 0x01
    16d2:	01 97       	sbiw	r24, 0x01	; 1
    16d4:	f1 f7       	brne	.-4      	; 0x16d2 <lcd_init+0x870>
    16d6:	9e 01       	movw	r18, r28
    16d8:	2e 59       	subi	r18, 0x9E	; 158
    16da:	3f 4f       	sbci	r19, 0xFF	; 255
    16dc:	f9 01       	movw	r30, r18
    16de:	91 83       	std	Z+1, r25	; 0x01
    16e0:	80 83       	st	Z, r24
    16e2:	4b c0       	rjmp	.+150    	; 0x177a <lcd_init+0x918>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    16e4:	ce 01       	movw	r24, r28
    16e6:	83 5b       	subi	r24, 0xB3	; 179
    16e8:	9f 4f       	sbci	r25, 0xFF	; 255
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	4f e7       	ldi	r20, 0x7F	; 127
    16f0:	53 e4       	ldi	r21, 0x43	; 67
    16f2:	fc 01       	movw	r30, r24
    16f4:	60 81       	ld	r22, Z
    16f6:	71 81       	ldd	r23, Z+1	; 0x01
    16f8:	82 81       	ldd	r24, Z+2	; 0x02
    16fa:	93 81       	ldd	r25, Z+3	; 0x03
    16fc:	b7 d3       	rcall	.+1902   	; 0x1e6c <__gesf2>
    16fe:	18 16       	cp	r1, r24
    1700:	64 f5       	brge	.+88     	; 0x175a <lcd_init+0x8f8>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1702:	8e 01       	movw	r16, r28
    1704:	0c 59       	subi	r16, 0x9C	; 156
    1706:	1f 4f       	sbci	r17, 0xFF	; 255
    1708:	ce 01       	movw	r24, r28
    170a:	8f 5a       	subi	r24, 0xAF	; 175
    170c:	9f 4f       	sbci	r25, 0xFF	; 255
    170e:	fc 01       	movw	r30, r24
    1710:	60 81       	ld	r22, Z
    1712:	71 81       	ldd	r23, Z+1	; 0x01
    1714:	82 81       	ldd	r24, Z+2	; 0x02
    1716:	93 81       	ldd	r25, Z+3	; 0x03
    1718:	08 d3       	rcall	.+1552   	; 0x1d2a <__fixunssfsi>
    171a:	dc 01       	movw	r26, r24
    171c:	cb 01       	movw	r24, r22
    171e:	f8 01       	movw	r30, r16
    1720:	91 83       	std	Z+1, r25	; 0x01
    1722:	80 83       	st	Z, r24
    1724:	ce 01       	movw	r24, r28
    1726:	8a 59       	subi	r24, 0x9A	; 154
    1728:	9f 4f       	sbci	r25, 0xFF	; 255
    172a:	9e 01       	movw	r18, r28
    172c:	2c 59       	subi	r18, 0x9C	; 156
    172e:	3f 4f       	sbci	r19, 0xFF	; 255
    1730:	f9 01       	movw	r30, r18
    1732:	20 81       	ld	r18, Z
    1734:	31 81       	ldd	r19, Z+1	; 0x01
    1736:	fc 01       	movw	r30, r24
    1738:	31 83       	std	Z+1, r19	; 0x01
    173a:	20 83       	st	Z, r18
    173c:	ce 01       	movw	r24, r28
    173e:	8a 59       	subi	r24, 0x9A	; 154
    1740:	9f 4f       	sbci	r25, 0xFF	; 255
    1742:	fc 01       	movw	r30, r24
    1744:	80 81       	ld	r24, Z
    1746:	91 81       	ldd	r25, Z+1	; 0x01
    1748:	01 97       	sbiw	r24, 0x01	; 1
    174a:	f1 f7       	brne	.-4      	; 0x1748 <lcd_init+0x8e6>
    174c:	9e 01       	movw	r18, r28
    174e:	2a 59       	subi	r18, 0x9A	; 154
    1750:	3f 4f       	sbci	r19, 0xFF	; 255
    1752:	f9 01       	movw	r30, r18
    1754:	91 83       	std	Z+1, r25	; 0x01
    1756:	80 83       	st	Z, r24
    1758:	27 c0       	rjmp	.+78     	; 0x17a8 <lcd_init+0x946>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    175a:	8e 01       	movw	r16, r28
    175c:	0b 5a       	subi	r16, 0xAB	; 171
    175e:	1f 4f       	sbci	r17, 0xFF	; 255
    1760:	ce 01       	movw	r24, r28
    1762:	83 5b       	subi	r24, 0xB3	; 179
    1764:	9f 4f       	sbci	r25, 0xFF	; 255
    1766:	fc 01       	movw	r30, r24
    1768:	60 81       	ld	r22, Z
    176a:	71 81       	ldd	r23, Z+1	; 0x01
    176c:	82 81       	ldd	r24, Z+2	; 0x02
    176e:	93 81       	ldd	r25, Z+3	; 0x03
    1770:	dc d2       	rcall	.+1464   	; 0x1d2a <__fixunssfsi>
    1772:	dc 01       	movw	r26, r24
    1774:	cb 01       	movw	r24, r22
    1776:	f8 01       	movw	r30, r16
    1778:	80 83       	st	Z, r24
    177a:	ce 01       	movw	r24, r28
    177c:	88 59       	subi	r24, 0x98	; 152
    177e:	9f 4f       	sbci	r25, 0xFF	; 255
    1780:	9e 01       	movw	r18, r28
    1782:	2b 5a       	subi	r18, 0xAB	; 171
    1784:	3f 4f       	sbci	r19, 0xFF	; 255
    1786:	f9 01       	movw	r30, r18
    1788:	20 81       	ld	r18, Z
    178a:	fc 01       	movw	r30, r24
    178c:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    178e:	ce 01       	movw	r24, r28
    1790:	88 59       	subi	r24, 0x98	; 152
    1792:	9f 4f       	sbci	r25, 0xFF	; 255
    1794:	fc 01       	movw	r30, r24
    1796:	80 81       	ld	r24, Z
    1798:	28 2f       	mov	r18, r24
    179a:	2a 95       	dec	r18
    179c:	f1 f7       	brne	.-4      	; 0x179a <lcd_init+0x938>
    179e:	ce 01       	movw	r24, r28
    17a0:	88 59       	subi	r24, 0x98	; 152
    17a2:	9f 4f       	sbci	r25, 0xFF	; 255
    17a4:	fc 01       	movw	r30, r24
    17a6:	20 83       	st	Z, r18
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
    17a8:	4e d4       	rcall	.+2204   	; 0x2046 <__TEXT_REGION_LENGTH__+0x46>
    17aa:	80 e0       	ldi	r24, 0x00	; 0
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	a0 e8       	ldi	r26, 0x80	; 128
    17b0:	b2 e4       	ldi	r27, 0x42	; 66
    17b2:	8d 87       	std	Y+13, r24	; 0x0d
    17b4:	9e 87       	std	Y+14, r25	; 0x0e
    17b6:	af 87       	std	Y+15, r26	; 0x0f
    17b8:	b8 8b       	std	Y+16, r27	; 0x10
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    17ba:	2b ea       	ldi	r18, 0xAB	; 171
    17bc:	3a ea       	ldi	r19, 0xAA	; 170
    17be:	4a ea       	ldi	r20, 0xAA	; 170
    17c0:	5e e3       	ldi	r21, 0x3E	; 62
    17c2:	6d 85       	ldd	r22, Y+13	; 0x0d
    17c4:	7e 85       	ldd	r23, Y+14	; 0x0e
    17c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    17c8:	98 89       	ldd	r25, Y+16	; 0x10
    17ca:	54 d3       	rcall	.+1704   	; 0x1e74 <__mulsf3>
    17cc:	dc 01       	movw	r26, r24
    17ce:	cb 01       	movw	r24, r22
    17d0:	89 ab       	std	Y+49, r24	; 0x31
    17d2:	9a ab       	std	Y+50, r25	; 0x32
    17d4:	ab ab       	std	Y+51, r26	; 0x33
    17d6:	bc ab       	std	Y+52, r27	; 0x34
	__tmp2 = ((F_CPU) / 4e6) * __us;
    17d8:	20 e0       	ldi	r18, 0x00	; 0
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	40 e8       	ldi	r20, 0x80	; 128
    17de:	5e e3       	ldi	r21, 0x3E	; 62
    17e0:	6d 85       	ldd	r22, Y+13	; 0x0d
    17e2:	7e 85       	ldd	r23, Y+14	; 0x0e
    17e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    17e6:	98 89       	ldd	r25, Y+16	; 0x10
    17e8:	45 d3       	rcall	.+1674   	; 0x1e74 <__mulsf3>
    17ea:	dc 01       	movw	r26, r24
    17ec:	cb 01       	movw	r24, r22
    17ee:	8d ab       	std	Y+53, r24	; 0x35
    17f0:	9e ab       	std	Y+54, r25	; 0x36
    17f2:	af ab       	std	Y+55, r26	; 0x37
    17f4:	b8 af       	std	Y+56, r27	; 0x38
	if (__tmp < 1.0)
    17f6:	20 e0       	ldi	r18, 0x00	; 0
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	40 e8       	ldi	r20, 0x80	; 128
    17fc:	5f e3       	ldi	r21, 0x3F	; 63
    17fe:	69 a9       	ldd	r22, Y+49	; 0x31
    1800:	7a a9       	ldd	r23, Y+50	; 0x32
    1802:	8b a9       	ldd	r24, Y+51	; 0x33
    1804:	9c a9       	ldd	r25, Y+52	; 0x34
    1806:	25 d2       	rcall	.+1098   	; 0x1c52 <__cmpsf2>
    1808:	88 23       	and	r24, r24
    180a:	1c f4       	brge	.+6      	; 0x1812 <lcd_init+0x9b0>
		__ticks = 1;
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	89 af       	std	Y+57, r24	; 0x39
    1810:	fe c0       	rjmp	.+508    	; 0x1a0e <lcd_init+0xbac>
	else if (__tmp2 > 65535)
    1812:	20 e0       	ldi	r18, 0x00	; 0
    1814:	3f ef       	ldi	r19, 0xFF	; 255
    1816:	4f e7       	ldi	r20, 0x7F	; 127
    1818:	57 e4       	ldi	r21, 0x47	; 71
    181a:	6d a9       	ldd	r22, Y+53	; 0x35
    181c:	7e a9       	ldd	r23, Y+54	; 0x36
    181e:	8f a9       	ldd	r24, Y+55	; 0x37
    1820:	98 ad       	ldd	r25, Y+56	; 0x38
    1822:	24 d3       	rcall	.+1608   	; 0x1e6c <__gesf2>
    1824:	18 16       	cp	r1, r24
    1826:	0c f0       	brlt	.+2      	; 0x182a <lcd_init+0x9c8>
    1828:	b7 c0       	rjmp	.+366    	; 0x1998 <lcd_init+0xb36>
	{
		_delay_ms(__us / 1000.0);
    182a:	20 e0       	ldi	r18, 0x00	; 0
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	4a e7       	ldi	r20, 0x7A	; 122
    1830:	54 e4       	ldi	r21, 0x44	; 68
    1832:	6d 85       	ldd	r22, Y+13	; 0x0d
    1834:	7e 85       	ldd	r23, Y+14	; 0x0e
    1836:	8f 85       	ldd	r24, Y+15	; 0x0f
    1838:	98 89       	ldd	r25, Y+16	; 0x10
    183a:	0f d2       	rcall	.+1054   	; 0x1c5a <__divsf3>
    183c:	dc 01       	movw	r26, r24
    183e:	cb 01       	movw	r24, r22
    1840:	8a af       	std	Y+58, r24	; 0x3a
    1842:	9b af       	std	Y+59, r25	; 0x3b
    1844:	ac af       	std	Y+60, r26	; 0x3c
    1846:	bd af       	std	Y+61, r27	; 0x3d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1848:	8e 01       	movw	r16, r28
    184a:	02 5c       	subi	r16, 0xC2	; 194
    184c:	1f 4f       	sbci	r17, 0xFF	; 255
    184e:	20 e0       	ldi	r18, 0x00	; 0
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	4a e7       	ldi	r20, 0x7A	; 122
    1854:	53 e4       	ldi	r21, 0x43	; 67
    1856:	6a ad       	ldd	r22, Y+58	; 0x3a
    1858:	7b ad       	ldd	r23, Y+59	; 0x3b
    185a:	8c ad       	ldd	r24, Y+60	; 0x3c
    185c:	9d ad       	ldd	r25, Y+61	; 0x3d
    185e:	0a d3       	rcall	.+1556   	; 0x1e74 <__mulsf3>
    1860:	dc 01       	movw	r26, r24
    1862:	cb 01       	movw	r24, r22
    1864:	f8 01       	movw	r30, r16
    1866:	80 83       	st	Z, r24
    1868:	91 83       	std	Z+1, r25	; 0x01
    186a:	a2 83       	std	Z+2, r26	; 0x02
    186c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    186e:	ce 01       	movw	r24, r28
    1870:	ce 96       	adiw	r24, 0x3e	; 62
    1872:	20 e0       	ldi	r18, 0x00	; 0
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	40 e8       	ldi	r20, 0x80	; 128
    1878:	5f e3       	ldi	r21, 0x3F	; 63
    187a:	fc 01       	movw	r30, r24
    187c:	60 81       	ld	r22, Z
    187e:	71 81       	ldd	r23, Z+1	; 0x01
    1880:	82 81       	ldd	r24, Z+2	; 0x02
    1882:	93 81       	ldd	r25, Z+3	; 0x03
    1884:	e6 d1       	rcall	.+972    	; 0x1c52 <__cmpsf2>
    1886:	88 23       	and	r24, r24
    1888:	4c f4       	brge	.+18     	; 0x189c <lcd_init+0xa3a>
		__ticks = 1;
    188a:	ce 01       	movw	r24, r28
    188c:	8e 5b       	subi	r24, 0xBE	; 190
    188e:	9f 4f       	sbci	r25, 0xFF	; 255
    1890:	21 e0       	ldi	r18, 0x01	; 1
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	fc 01       	movw	r30, r24
    1896:	31 83       	std	Z+1, r19	; 0x01
    1898:	20 83       	st	Z, r18
    189a:	63 c0       	rjmp	.+198    	; 0x1962 <lcd_init+0xb00>
	else if (__tmp > 65535)
    189c:	ce 01       	movw	r24, r28
    189e:	ce 96       	adiw	r24, 0x3e	; 62
    18a0:	20 e0       	ldi	r18, 0x00	; 0
    18a2:	3f ef       	ldi	r19, 0xFF	; 255
    18a4:	4f e7       	ldi	r20, 0x7F	; 127
    18a6:	57 e4       	ldi	r21, 0x47	; 71
    18a8:	fc 01       	movw	r30, r24
    18aa:	60 81       	ld	r22, Z
    18ac:	71 81       	ldd	r23, Z+1	; 0x01
    18ae:	82 81       	ldd	r24, Z+2	; 0x02
    18b0:	93 81       	ldd	r25, Z+3	; 0x03
    18b2:	dc d2       	rcall	.+1464   	; 0x1e6c <__gesf2>
    18b4:	18 16       	cp	r1, r24
    18b6:	0c f0       	brlt	.+2      	; 0x18ba <lcd_init+0xa58>
    18b8:	44 c0       	rjmp	.+136    	; 0x1942 <lcd_init+0xae0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	40 e2       	ldi	r20, 0x20	; 32
    18c0:	51 e4       	ldi	r21, 0x41	; 65
    18c2:	6a ad       	ldd	r22, Y+58	; 0x3a
    18c4:	7b ad       	ldd	r23, Y+59	; 0x3b
    18c6:	8c ad       	ldd	r24, Y+60	; 0x3c
    18c8:	9d ad       	ldd	r25, Y+61	; 0x3d
    18ca:	d4 d2       	rcall	.+1448   	; 0x1e74 <__mulsf3>
    18cc:	dc 01       	movw	r26, r24
    18ce:	cb 01       	movw	r24, r22
    18d0:	8e 01       	movw	r16, r28
    18d2:	0e 5b       	subi	r16, 0xBE	; 190
    18d4:	1f 4f       	sbci	r17, 0xFF	; 255
    18d6:	bc 01       	movw	r22, r24
    18d8:	cd 01       	movw	r24, r26
    18da:	27 d2       	rcall	.+1102   	; 0x1d2a <__fixunssfsi>
    18dc:	dc 01       	movw	r26, r24
    18de:	cb 01       	movw	r24, r22
    18e0:	f8 01       	movw	r30, r16
    18e2:	91 83       	std	Z+1, r25	; 0x01
    18e4:	80 83       	st	Z, r24
    18e6:	24 c0       	rjmp	.+72     	; 0x1930 <lcd_init+0xace>
    18e8:	ce 01       	movw	r24, r28
    18ea:	8c 5b       	subi	r24, 0xBC	; 188
    18ec:	9f 4f       	sbci	r25, 0xFF	; 255
    18ee:	29 e1       	ldi	r18, 0x19	; 25
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	fc 01       	movw	r30, r24
    18f4:	31 83       	std	Z+1, r19	; 0x01
    18f6:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18f8:	ce 01       	movw	r24, r28
    18fa:	8c 5b       	subi	r24, 0xBC	; 188
    18fc:	9f 4f       	sbci	r25, 0xFF	; 255
    18fe:	fc 01       	movw	r30, r24
    1900:	80 81       	ld	r24, Z
    1902:	91 81       	ldd	r25, Z+1	; 0x01
    1904:	01 97       	sbiw	r24, 0x01	; 1
    1906:	f1 f7       	brne	.-4      	; 0x1904 <lcd_init+0xaa2>
    1908:	9e 01       	movw	r18, r28
    190a:	2c 5b       	subi	r18, 0xBC	; 188
    190c:	3f 4f       	sbci	r19, 0xFF	; 255
    190e:	f9 01       	movw	r30, r18
    1910:	91 83       	std	Z+1, r25	; 0x01
    1912:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1914:	ce 01       	movw	r24, r28
    1916:	8e 5b       	subi	r24, 0xBE	; 190
    1918:	9f 4f       	sbci	r25, 0xFF	; 255
    191a:	9e 01       	movw	r18, r28
    191c:	2e 5b       	subi	r18, 0xBE	; 190
    191e:	3f 4f       	sbci	r19, 0xFF	; 255
    1920:	f9 01       	movw	r30, r18
    1922:	20 81       	ld	r18, Z
    1924:	31 81       	ldd	r19, Z+1	; 0x01
    1926:	21 50       	subi	r18, 0x01	; 1
    1928:	31 09       	sbc	r19, r1
    192a:	fc 01       	movw	r30, r24
    192c:	31 83       	std	Z+1, r19	; 0x01
    192e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1930:	ce 01       	movw	r24, r28
    1932:	8e 5b       	subi	r24, 0xBE	; 190
    1934:	9f 4f       	sbci	r25, 0xFF	; 255
    1936:	fc 01       	movw	r30, r24
    1938:	80 81       	ld	r24, Z
    193a:	91 81       	ldd	r25, Z+1	; 0x01
    193c:	89 2b       	or	r24, r25
    193e:	a1 f6       	brne	.-88     	; 0x18e8 <lcd_init+0xa86>
    1940:	66 c0       	rjmp	.+204    	; 0x1a0e <lcd_init+0xbac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1942:	8e 01       	movw	r16, r28
    1944:	0e 5b       	subi	r16, 0xBE	; 190
    1946:	1f 4f       	sbci	r17, 0xFF	; 255
    1948:	ce 01       	movw	r24, r28
    194a:	ce 96       	adiw	r24, 0x3e	; 62
    194c:	fc 01       	movw	r30, r24
    194e:	60 81       	ld	r22, Z
    1950:	71 81       	ldd	r23, Z+1	; 0x01
    1952:	82 81       	ldd	r24, Z+2	; 0x02
    1954:	93 81       	ldd	r25, Z+3	; 0x03
    1956:	e9 d1       	rcall	.+978    	; 0x1d2a <__fixunssfsi>
    1958:	dc 01       	movw	r26, r24
    195a:	cb 01       	movw	r24, r22
    195c:	f8 01       	movw	r30, r16
    195e:	91 83       	std	Z+1, r25	; 0x01
    1960:	80 83       	st	Z, r24
    1962:	ce 01       	movw	r24, r28
    1964:	8a 5b       	subi	r24, 0xBA	; 186
    1966:	9f 4f       	sbci	r25, 0xFF	; 255
    1968:	9e 01       	movw	r18, r28
    196a:	2e 5b       	subi	r18, 0xBE	; 190
    196c:	3f 4f       	sbci	r19, 0xFF	; 255
    196e:	f9 01       	movw	r30, r18
    1970:	20 81       	ld	r18, Z
    1972:	31 81       	ldd	r19, Z+1	; 0x01
    1974:	fc 01       	movw	r30, r24
    1976:	31 83       	std	Z+1, r19	; 0x01
    1978:	20 83       	st	Z, r18
    197a:	ce 01       	movw	r24, r28
    197c:	8a 5b       	subi	r24, 0xBA	; 186
    197e:	9f 4f       	sbci	r25, 0xFF	; 255
    1980:	fc 01       	movw	r30, r24
    1982:	80 81       	ld	r24, Z
    1984:	91 81       	ldd	r25, Z+1	; 0x01
    1986:	01 97       	sbiw	r24, 0x01	; 1
    1988:	f1 f7       	brne	.-4      	; 0x1986 <lcd_init+0xb24>
    198a:	9e 01       	movw	r18, r28
    198c:	2a 5b       	subi	r18, 0xBA	; 186
    198e:	3f 4f       	sbci	r19, 0xFF	; 255
    1990:	f9 01       	movw	r30, r18
    1992:	91 83       	std	Z+1, r25	; 0x01
    1994:	80 83       	st	Z, r24
    1996:	3b c0       	rjmp	.+118    	; 0x1a0e <lcd_init+0xbac>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1998:	20 e0       	ldi	r18, 0x00	; 0
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	4f e7       	ldi	r20, 0x7F	; 127
    199e:	53 e4       	ldi	r21, 0x43	; 67
    19a0:	69 a9       	ldd	r22, Y+49	; 0x31
    19a2:	7a a9       	ldd	r23, Y+50	; 0x32
    19a4:	8b a9       	ldd	r24, Y+51	; 0x33
    19a6:	9c a9       	ldd	r25, Y+52	; 0x34
    19a8:	61 d2       	rcall	.+1218   	; 0x1e6c <__gesf2>
    19aa:	18 16       	cp	r1, r24
    19ac:	44 f5       	brge	.+80     	; 0x19fe <lcd_init+0xb9c>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    19ae:	8e 01       	movw	r16, r28
    19b0:	08 5b       	subi	r16, 0xB8	; 184
    19b2:	1f 4f       	sbci	r17, 0xFF	; 255
    19b4:	6d a9       	ldd	r22, Y+53	; 0x35
    19b6:	7e a9       	ldd	r23, Y+54	; 0x36
    19b8:	8f a9       	ldd	r24, Y+55	; 0x37
    19ba:	98 ad       	ldd	r25, Y+56	; 0x38
    19bc:	b6 d1       	rcall	.+876    	; 0x1d2a <__fixunssfsi>
    19be:	dc 01       	movw	r26, r24
    19c0:	cb 01       	movw	r24, r22
    19c2:	f8 01       	movw	r30, r16
    19c4:	91 83       	std	Z+1, r25	; 0x01
    19c6:	80 83       	st	Z, r24
    19c8:	ce 01       	movw	r24, r28
    19ca:	86 5b       	subi	r24, 0xB6	; 182
    19cc:	9f 4f       	sbci	r25, 0xFF	; 255
    19ce:	9e 01       	movw	r18, r28
    19d0:	28 5b       	subi	r18, 0xB8	; 184
    19d2:	3f 4f       	sbci	r19, 0xFF	; 255
    19d4:	f9 01       	movw	r30, r18
    19d6:	20 81       	ld	r18, Z
    19d8:	31 81       	ldd	r19, Z+1	; 0x01
    19da:	fc 01       	movw	r30, r24
    19dc:	31 83       	std	Z+1, r19	; 0x01
    19de:	20 83       	st	Z, r18
    19e0:	ce 01       	movw	r24, r28
    19e2:	86 5b       	subi	r24, 0xB6	; 182
    19e4:	9f 4f       	sbci	r25, 0xFF	; 255
    19e6:	fc 01       	movw	r30, r24
    19e8:	80 81       	ld	r24, Z
    19ea:	91 81       	ldd	r25, Z+1	; 0x01
    19ec:	01 97       	sbiw	r24, 0x01	; 1
    19ee:	f1 f7       	brne	.-4      	; 0x19ec <lcd_init+0xb8a>
    19f0:	9e 01       	movw	r18, r28
    19f2:	26 5b       	subi	r18, 0xB6	; 182
    19f4:	3f 4f       	sbci	r19, 0xFF	; 255
    19f6:	f9 01       	movw	r30, r18
    19f8:	91 83       	std	Z+1, r25	; 0x01
    19fa:	80 83       	st	Z, r24
    19fc:	1b c0       	rjmp	.+54     	; 0x1a34 <lcd_init+0xbd2>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    19fe:	69 a9       	ldd	r22, Y+49	; 0x31
    1a00:	7a a9       	ldd	r23, Y+50	; 0x32
    1a02:	8b a9       	ldd	r24, Y+51	; 0x33
    1a04:	9c a9       	ldd	r25, Y+52	; 0x34
    1a06:	91 d1       	rcall	.+802    	; 0x1d2a <__fixunssfsi>
    1a08:	dc 01       	movw	r26, r24
    1a0a:	cb 01       	movw	r24, r22
    1a0c:	89 af       	std	Y+57, r24	; 0x39
    1a0e:	ce 01       	movw	r24, r28
    1a10:	84 5b       	subi	r24, 0xB4	; 180
    1a12:	9f 4f       	sbci	r25, 0xFF	; 255
    1a14:	29 ad       	ldd	r18, Y+57	; 0x39
    1a16:	fc 01       	movw	r30, r24
    1a18:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a1a:	ce 01       	movw	r24, r28
    1a1c:	84 5b       	subi	r24, 0xB4	; 180
    1a1e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a20:	fc 01       	movw	r30, r24
    1a22:	80 81       	ld	r24, Z
    1a24:	28 2f       	mov	r18, r24
    1a26:	2a 95       	dec	r18
    1a28:	f1 f7       	brne	.-4      	; 0x1a26 <lcd_init+0xbc4>
    1a2a:	ce 01       	movw	r24, r28
    1a2c:	84 5b       	subi	r24, 0xB4	; 180
    1a2e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a30:	fc 01       	movw	r30, r24
    1a32:	20 83       	st	Z, r18
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
    1a34:	88 e2       	ldi	r24, 0x28	; 40
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	28 e2       	ldi	r18, 0x28	; 40
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	f9 01       	movw	r30, r18
    1a3e:	20 81       	ld	r18, Z
    1a40:	2e 7f       	andi	r18, 0xFE	; 254
    1a42:	fc 01       	movw	r30, r24
    1a44:	20 83       	st	Z, r18
    lcd_e_toggle();
    1a46:	ff d2       	rcall	.+1534   	; 0x2046 <__TEXT_REGION_LENGTH__+0x46>
    1a48:	80 e0       	ldi	r24, 0x00	; 0
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	a0 e8       	ldi	r26, 0x80	; 128
    1a4e:	b2 e4       	ldi	r27, 0x42	; 66
    1a50:	89 8b       	std	Y+17, r24	; 0x11
    1a52:	9a 8b       	std	Y+18, r25	; 0x12
    1a54:	ab 8b       	std	Y+19, r26	; 0x13
    1a56:	bc 8b       	std	Y+20, r27	; 0x14
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1a58:	2b ea       	ldi	r18, 0xAB	; 171
    1a5a:	3a ea       	ldi	r19, 0xAA	; 170
    1a5c:	4a ea       	ldi	r20, 0xAA	; 170
    1a5e:	5e e3       	ldi	r21, 0x3E	; 62
    1a60:	69 89       	ldd	r22, Y+17	; 0x11
    1a62:	7a 89       	ldd	r23, Y+18	; 0x12
    1a64:	8b 89       	ldd	r24, Y+19	; 0x13
    1a66:	9c 89       	ldd	r25, Y+20	; 0x14
    1a68:	05 d2       	rcall	.+1034   	; 0x1e74 <__mulsf3>
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	8d 8b       	std	Y+21, r24	; 0x15
    1a70:	9e 8b       	std	Y+22, r25	; 0x16
    1a72:	af 8b       	std	Y+23, r26	; 0x17
    1a74:	b8 8f       	std	Y+24, r27	; 0x18
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1a76:	20 e0       	ldi	r18, 0x00	; 0
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	40 e8       	ldi	r20, 0x80	; 128
    1a7c:	5e e3       	ldi	r21, 0x3E	; 62
    1a7e:	69 89       	ldd	r22, Y+17	; 0x11
    1a80:	7a 89       	ldd	r23, Y+18	; 0x12
    1a82:	8b 89       	ldd	r24, Y+19	; 0x13
    1a84:	9c 89       	ldd	r25, Y+20	; 0x14
    1a86:	f6 d1       	rcall	.+1004   	; 0x1e74 <__mulsf3>
    1a88:	dc 01       	movw	r26, r24
    1a8a:	cb 01       	movw	r24, r22
    1a8c:	89 8f       	std	Y+25, r24	; 0x19
    1a8e:	9a 8f       	std	Y+26, r25	; 0x1a
    1a90:	ab 8f       	std	Y+27, r26	; 0x1b
    1a92:	bc 8f       	std	Y+28, r27	; 0x1c
	if (__tmp < 1.0)
    1a94:	20 e0       	ldi	r18, 0x00	; 0
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	40 e8       	ldi	r20, 0x80	; 128
    1a9a:	5f e3       	ldi	r21, 0x3F	; 63
    1a9c:	6d 89       	ldd	r22, Y+21	; 0x15
    1a9e:	7e 89       	ldd	r23, Y+22	; 0x16
    1aa0:	8f 89       	ldd	r24, Y+23	; 0x17
    1aa2:	98 8d       	ldd	r25, Y+24	; 0x18
    1aa4:	d6 d0       	rcall	.+428    	; 0x1c52 <__cmpsf2>
    1aa6:	88 23       	and	r24, r24
    1aa8:	1c f4       	brge	.+6      	; 0x1ab0 <lcd_init+0xc4e>
		__ticks = 1;
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	8d 8f       	std	Y+29, r24	; 0x1d
    1aae:	a7 c0       	rjmp	.+334    	; 0x1bfe <lcd_init+0xd9c>
	else if (__tmp2 > 65535)
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	3f ef       	ldi	r19, 0xFF	; 255
    1ab4:	4f e7       	ldi	r20, 0x7F	; 127
    1ab6:	57 e4       	ldi	r21, 0x47	; 71
    1ab8:	69 8d       	ldd	r22, Y+25	; 0x19
    1aba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1abc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1abe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ac0:	d5 d1       	rcall	.+938    	; 0x1e6c <__gesf2>
    1ac2:	18 16       	cp	r1, r24
    1ac4:	0c f0       	brlt	.+2      	; 0x1ac8 <lcd_init+0xc66>
    1ac6:	74 c0       	rjmp	.+232    	; 0x1bb0 <lcd_init+0xd4e>
	{
		_delay_ms(__us / 1000.0);
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	4a e7       	ldi	r20, 0x7A	; 122
    1ace:	54 e4       	ldi	r21, 0x44	; 68
    1ad0:	69 89       	ldd	r22, Y+17	; 0x11
    1ad2:	7a 89       	ldd	r23, Y+18	; 0x12
    1ad4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ad6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ad8:	c0 d0       	rcall	.+384    	; 0x1c5a <__divsf3>
    1ada:	dc 01       	movw	r26, r24
    1adc:	cb 01       	movw	r24, r22
    1ade:	8e 8f       	std	Y+30, r24	; 0x1e
    1ae0:	9f 8f       	std	Y+31, r25	; 0x1f
    1ae2:	a8 a3       	std	Y+32, r26	; 0x20
    1ae4:	b9 a3       	std	Y+33, r27	; 0x21

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	4a e7       	ldi	r20, 0x7A	; 122
    1aec:	53 e4       	ldi	r21, 0x43	; 67
    1aee:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1af0:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1af2:	88 a1       	ldd	r24, Y+32	; 0x20
    1af4:	99 a1       	ldd	r25, Y+33	; 0x21
    1af6:	be d1       	rcall	.+892    	; 0x1e74 <__mulsf3>
    1af8:	dc 01       	movw	r26, r24
    1afa:	cb 01       	movw	r24, r22
    1afc:	8a a3       	std	Y+34, r24	; 0x22
    1afe:	9b a3       	std	Y+35, r25	; 0x23
    1b00:	ac a3       	std	Y+36, r26	; 0x24
    1b02:	bd a3       	std	Y+37, r27	; 0x25
	if (__tmp < 1.0)
    1b04:	20 e0       	ldi	r18, 0x00	; 0
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	40 e8       	ldi	r20, 0x80	; 128
    1b0a:	5f e3       	ldi	r21, 0x3F	; 63
    1b0c:	6a a1       	ldd	r22, Y+34	; 0x22
    1b0e:	7b a1       	ldd	r23, Y+35	; 0x23
    1b10:	8c a1       	ldd	r24, Y+36	; 0x24
    1b12:	9d a1       	ldd	r25, Y+37	; 0x25
    1b14:	9e d0       	rcall	.+316    	; 0x1c52 <__cmpsf2>
    1b16:	88 23       	and	r24, r24
    1b18:	2c f4       	brge	.+10     	; 0x1b24 <lcd_init+0xcc2>
		__ticks = 1;
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	9f a3       	std	Y+39, r25	; 0x27
    1b20:	8e a3       	std	Y+38, r24	; 0x26
    1b22:	3b c0       	rjmp	.+118    	; 0x1b9a <lcd_init+0xd38>
	else if (__tmp > 65535)
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	3f ef       	ldi	r19, 0xFF	; 255
    1b28:	4f e7       	ldi	r20, 0x7F	; 127
    1b2a:	57 e4       	ldi	r21, 0x47	; 71
    1b2c:	6a a1       	ldd	r22, Y+34	; 0x22
    1b2e:	7b a1       	ldd	r23, Y+35	; 0x23
    1b30:	8c a1       	ldd	r24, Y+36	; 0x24
    1b32:	9d a1       	ldd	r25, Y+37	; 0x25
    1b34:	9b d1       	rcall	.+822    	; 0x1e6c <__gesf2>
    1b36:	18 16       	cp	r1, r24
    1b38:	3c f5       	brge	.+78     	; 0x1b88 <lcd_init+0xd26>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b3a:	20 e0       	ldi	r18, 0x00	; 0
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	40 e2       	ldi	r20, 0x20	; 32
    1b40:	51 e4       	ldi	r21, 0x41	; 65
    1b42:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1b44:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1b46:	88 a1       	ldd	r24, Y+32	; 0x20
    1b48:	99 a1       	ldd	r25, Y+33	; 0x21
    1b4a:	94 d1       	rcall	.+808    	; 0x1e74 <__mulsf3>
    1b4c:	dc 01       	movw	r26, r24
    1b4e:	cb 01       	movw	r24, r22
    1b50:	bc 01       	movw	r22, r24
    1b52:	cd 01       	movw	r24, r26
    1b54:	ea d0       	rcall	.+468    	; 0x1d2a <__fixunssfsi>
    1b56:	dc 01       	movw	r26, r24
    1b58:	cb 01       	movw	r24, r22
    1b5a:	9f a3       	std	Y+39, r25	; 0x27
    1b5c:	8e a3       	std	Y+38, r24	; 0x26
    1b5e:	0f c0       	rjmp	.+30     	; 0x1b7e <lcd_init+0xd1c>
    1b60:	89 e1       	ldi	r24, 0x19	; 25
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	99 a7       	std	Y+41, r25	; 0x29
    1b66:	88 a7       	std	Y+40, r24	; 0x28
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b68:	88 a5       	ldd	r24, Y+40	; 0x28
    1b6a:	99 a5       	ldd	r25, Y+41	; 0x29
    1b6c:	01 97       	sbiw	r24, 0x01	; 1
    1b6e:	f1 f7       	brne	.-4      	; 0x1b6c <lcd_init+0xd0a>
    1b70:	99 a7       	std	Y+41, r25	; 0x29
    1b72:	88 a7       	std	Y+40, r24	; 0x28
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b74:	8e a1       	ldd	r24, Y+38	; 0x26
    1b76:	9f a1       	ldd	r25, Y+39	; 0x27
    1b78:	01 97       	sbiw	r24, 0x01	; 1
    1b7a:	9f a3       	std	Y+39, r25	; 0x27
    1b7c:	8e a3       	std	Y+38, r24	; 0x26
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b7e:	8e a1       	ldd	r24, Y+38	; 0x26
    1b80:	9f a1       	ldd	r25, Y+39	; 0x27
    1b82:	89 2b       	or	r24, r25
    1b84:	69 f7       	brne	.-38     	; 0x1b60 <lcd_init+0xcfe>
    1b86:	3b c0       	rjmp	.+118    	; 0x1bfe <lcd_init+0xd9c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b88:	6a a1       	ldd	r22, Y+34	; 0x22
    1b8a:	7b a1       	ldd	r23, Y+35	; 0x23
    1b8c:	8c a1       	ldd	r24, Y+36	; 0x24
    1b8e:	9d a1       	ldd	r25, Y+37	; 0x25
    1b90:	cc d0       	rcall	.+408    	; 0x1d2a <__fixunssfsi>
    1b92:	dc 01       	movw	r26, r24
    1b94:	cb 01       	movw	r24, r22
    1b96:	9f a3       	std	Y+39, r25	; 0x27
    1b98:	8e a3       	std	Y+38, r24	; 0x26
    1b9a:	8e a1       	ldd	r24, Y+38	; 0x26
    1b9c:	9f a1       	ldd	r25, Y+39	; 0x27
    1b9e:	9b a7       	std	Y+43, r25	; 0x2b
    1ba0:	8a a7       	std	Y+42, r24	; 0x2a
    1ba2:	8a a5       	ldd	r24, Y+42	; 0x2a
    1ba4:	9b a5       	ldd	r25, Y+43	; 0x2b
    1ba6:	01 97       	sbiw	r24, 0x01	; 1
    1ba8:	f1 f7       	brne	.-4      	; 0x1ba6 <lcd_init+0xd44>
    1baa:	9b a7       	std	Y+43, r25	; 0x2b
    1bac:	8a a7       	std	Y+42, r24	; 0x2a
    1bae:	27 c0       	rjmp	.+78     	; 0x1bfe <lcd_init+0xd9c>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1bb0:	20 e0       	ldi	r18, 0x00	; 0
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	4f e7       	ldi	r20, 0x7F	; 127
    1bb6:	53 e4       	ldi	r21, 0x43	; 67
    1bb8:	6d 89       	ldd	r22, Y+21	; 0x15
    1bba:	7e 89       	ldd	r23, Y+22	; 0x16
    1bbc:	8f 89       	ldd	r24, Y+23	; 0x17
    1bbe:	98 8d       	ldd	r25, Y+24	; 0x18
    1bc0:	55 d1       	rcall	.+682    	; 0x1e6c <__gesf2>
    1bc2:	18 16       	cp	r1, r24
    1bc4:	a4 f4       	brge	.+40     	; 0x1bee <lcd_init+0xd8c>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1bc6:	69 8d       	ldd	r22, Y+25	; 0x19
    1bc8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bcc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bce:	ad d0       	rcall	.+346    	; 0x1d2a <__fixunssfsi>
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	cb 01       	movw	r24, r22
    1bd4:	9d a7       	std	Y+45, r25	; 0x2d
    1bd6:	8c a7       	std	Y+44, r24	; 0x2c
    1bd8:	8c a5       	ldd	r24, Y+44	; 0x2c
    1bda:	9d a5       	ldd	r25, Y+45	; 0x2d
    1bdc:	9f a7       	std	Y+47, r25	; 0x2f
    1bde:	8e a7       	std	Y+46, r24	; 0x2e
    1be0:	8e a5       	ldd	r24, Y+46	; 0x2e
    1be2:	9f a5       	ldd	r25, Y+47	; 0x2f
    1be4:	01 97       	sbiw	r24, 0x01	; 1
    1be6:	f1 f7       	brne	.-4      	; 0x1be4 <lcd_init+0xd82>
    1be8:	9f a7       	std	Y+47, r25	; 0x2f
    1bea:	8e a7       	std	Y+46, r24	; 0x2e
    1bec:	0e c0       	rjmp	.+28     	; 0x1c0a <lcd_init+0xda8>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1bee:	6d 89       	ldd	r22, Y+21	; 0x15
    1bf0:	7e 89       	ldd	r23, Y+22	; 0x16
    1bf2:	8f 89       	ldd	r24, Y+23	; 0x17
    1bf4:	98 8d       	ldd	r25, Y+24	; 0x18
    1bf6:	99 d0       	rcall	.+306    	; 0x1d2a <__fixunssfsi>
    1bf8:	dc 01       	movw	r26, r24
    1bfa:	cb 01       	movw	r24, r22
    1bfc:	8d 8f       	std	Y+29, r24	; 0x1d
    1bfe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c00:	88 ab       	std	Y+48, r24	; 0x30
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c02:	88 a9       	ldd	r24, Y+48	; 0x30
    1c04:	8a 95       	dec	r24
    1c06:	f1 f7       	brne	.-4      	; 0x1c04 <lcd_init+0xda2>
    1c08:	88 ab       	std	Y+48, r24	; 0x30
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
    1c0a:	88 e2       	ldi	r24, 0x28	; 40
    1c0c:	7a d8       	rcall	.-3852   	; 0xd02 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
    1c0e:	88 e0       	ldi	r24, 0x08	; 8
    1c10:	78 d8       	rcall	.-3856   	; 0xd02 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
    1c12:	b6 d8       	rcall	.-3732   	; 0xd80 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
    1c14:	86 e0       	ldi	r24, 0x06	; 6
    1c16:	75 d8       	rcall	.-3862   	; 0xd02 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
    1c18:	ce 01       	movw	r24, r28
    1c1a:	8f 55       	subi	r24, 0x5F	; 95
    1c1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c1e:	fc 01       	movw	r30, r24
    1c20:	80 81       	ld	r24, Z
    1c22:	6f d8       	rcall	.-3874   	; 0xd02 <lcd_command>

}/* lcd_init */
    1c24:	00 00       	nop
    1c26:	cf 55       	subi	r28, 0x5F	; 95
    1c28:	df 4f       	sbci	r29, 0xFF	; 255
    1c2a:	0f b6       	in	r0, 0x3f	; 63
    1c2c:	f8 94       	cli
    1c2e:	de bf       	out	0x3e, r29	; 62
    1c30:	0f be       	out	0x3f, r0	; 63
    1c32:	cd bf       	out	0x3d, r28	; 61
    1c34:	df 91       	pop	r29
    1c36:	cf 91       	pop	r28
    1c38:	1f 91       	pop	r17
    1c3a:	0f 91       	pop	r16
    1c3c:	08 95       	ret

00001c3e <main>:

#include <avr/io.h>
#include "LCD_lib/lcd.h"

int main(void)
{
    1c3e:	cf 93       	push	r28
    1c40:	df 93       	push	r29
    1c42:	cd b7       	in	r28, 0x3d	; 61
    1c44:	de b7       	in	r29, 0x3e	; 62
	lcd_init(2);
    1c46:	82 e0       	ldi	r24, 0x02	; 2
    1c48:	0c d9       	rcall	.-3560   	; 0xe62 <lcd_init>
	lcd_clrscr();
    1c4a:	9a d8       	rcall	.-3788   	; 0xd80 <lcd_clrscr>
	lcd_putc('A');
    1c4c:	81 e4       	ldi	r24, 0x41	; 65
    1c4e:	ac d8       	rcall	.-3752   	; 0xda8 <lcd_putc>

    while (1) 
    {
		
    }
    1c50:	ff cf       	rjmp	.-2      	; 0x1c50 <main+0x12>

00001c52 <__cmpsf2>:
    1c52:	97 d0       	rcall	.+302    	; 0x1d82 <__fp_cmp>
    1c54:	08 f4       	brcc	.+2      	; 0x1c58 <__cmpsf2+0x6>
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	08 95       	ret

00001c5a <__divsf3>:
    1c5a:	0c d0       	rcall	.+24     	; 0x1c74 <__divsf3x>
    1c5c:	cd c0       	rjmp	.+410    	; 0x1df8 <__fp_round>
    1c5e:	c5 d0       	rcall	.+394    	; 0x1dea <__fp_pscB>
    1c60:	40 f0       	brcs	.+16     	; 0x1c72 <__divsf3+0x18>
    1c62:	bc d0       	rcall	.+376    	; 0x1ddc <__fp_pscA>
    1c64:	30 f0       	brcs	.+12     	; 0x1c72 <__divsf3+0x18>
    1c66:	21 f4       	brne	.+8      	; 0x1c70 <__divsf3+0x16>
    1c68:	5f 3f       	cpi	r21, 0xFF	; 255
    1c6a:	19 f0       	breq	.+6      	; 0x1c72 <__divsf3+0x18>
    1c6c:	ae c0       	rjmp	.+348    	; 0x1dca <__fp_inf>
    1c6e:	51 11       	cpse	r21, r1
    1c70:	f7 c0       	rjmp	.+494    	; 0x1e60 <__fp_szero>
    1c72:	b1 c0       	rjmp	.+354    	; 0x1dd6 <__fp_nan>

00001c74 <__divsf3x>:
    1c74:	d2 d0       	rcall	.+420    	; 0x1e1a <__fp_split3>
    1c76:	98 f3       	brcs	.-26     	; 0x1c5e <__divsf3+0x4>

00001c78 <__divsf3_pse>:
    1c78:	99 23       	and	r25, r25
    1c7a:	c9 f3       	breq	.-14     	; 0x1c6e <__divsf3+0x14>
    1c7c:	55 23       	and	r21, r21
    1c7e:	b1 f3       	breq	.-20     	; 0x1c6c <__divsf3+0x12>
    1c80:	95 1b       	sub	r25, r21
    1c82:	55 0b       	sbc	r21, r21
    1c84:	bb 27       	eor	r27, r27
    1c86:	aa 27       	eor	r26, r26
    1c88:	62 17       	cp	r22, r18
    1c8a:	73 07       	cpc	r23, r19
    1c8c:	84 07       	cpc	r24, r20
    1c8e:	38 f0       	brcs	.+14     	; 0x1c9e <__divsf3_pse+0x26>
    1c90:	9f 5f       	subi	r25, 0xFF	; 255
    1c92:	5f 4f       	sbci	r21, 0xFF	; 255
    1c94:	22 0f       	add	r18, r18
    1c96:	33 1f       	adc	r19, r19
    1c98:	44 1f       	adc	r20, r20
    1c9a:	aa 1f       	adc	r26, r26
    1c9c:	a9 f3       	breq	.-22     	; 0x1c88 <__divsf3_pse+0x10>
    1c9e:	33 d0       	rcall	.+102    	; 0x1d06 <__divsf3_pse+0x8e>
    1ca0:	0e 2e       	mov	r0, r30
    1ca2:	3a f0       	brmi	.+14     	; 0x1cb2 <__divsf3_pse+0x3a>
    1ca4:	e0 e8       	ldi	r30, 0x80	; 128
    1ca6:	30 d0       	rcall	.+96     	; 0x1d08 <__divsf3_pse+0x90>
    1ca8:	91 50       	subi	r25, 0x01	; 1
    1caa:	50 40       	sbci	r21, 0x00	; 0
    1cac:	e6 95       	lsr	r30
    1cae:	00 1c       	adc	r0, r0
    1cb0:	ca f7       	brpl	.-14     	; 0x1ca4 <__divsf3_pse+0x2c>
    1cb2:	29 d0       	rcall	.+82     	; 0x1d06 <__divsf3_pse+0x8e>
    1cb4:	fe 2f       	mov	r31, r30
    1cb6:	27 d0       	rcall	.+78     	; 0x1d06 <__divsf3_pse+0x8e>
    1cb8:	66 0f       	add	r22, r22
    1cba:	77 1f       	adc	r23, r23
    1cbc:	88 1f       	adc	r24, r24
    1cbe:	bb 1f       	adc	r27, r27
    1cc0:	26 17       	cp	r18, r22
    1cc2:	37 07       	cpc	r19, r23
    1cc4:	48 07       	cpc	r20, r24
    1cc6:	ab 07       	cpc	r26, r27
    1cc8:	b0 e8       	ldi	r27, 0x80	; 128
    1cca:	09 f0       	breq	.+2      	; 0x1cce <__divsf3_pse+0x56>
    1ccc:	bb 0b       	sbc	r27, r27
    1cce:	80 2d       	mov	r24, r0
    1cd0:	bf 01       	movw	r22, r30
    1cd2:	ff 27       	eor	r31, r31
    1cd4:	93 58       	subi	r25, 0x83	; 131
    1cd6:	5f 4f       	sbci	r21, 0xFF	; 255
    1cd8:	2a f0       	brmi	.+10     	; 0x1ce4 <__divsf3_pse+0x6c>
    1cda:	9e 3f       	cpi	r25, 0xFE	; 254
    1cdc:	51 05       	cpc	r21, r1
    1cde:	68 f0       	brcs	.+26     	; 0x1cfa <__divsf3_pse+0x82>
    1ce0:	74 c0       	rjmp	.+232    	; 0x1dca <__fp_inf>
    1ce2:	be c0       	rjmp	.+380    	; 0x1e60 <__fp_szero>
    1ce4:	5f 3f       	cpi	r21, 0xFF	; 255
    1ce6:	ec f3       	brlt	.-6      	; 0x1ce2 <__divsf3_pse+0x6a>
    1ce8:	98 3e       	cpi	r25, 0xE8	; 232
    1cea:	dc f3       	brlt	.-10     	; 0x1ce2 <__divsf3_pse+0x6a>
    1cec:	86 95       	lsr	r24
    1cee:	77 95       	ror	r23
    1cf0:	67 95       	ror	r22
    1cf2:	b7 95       	ror	r27
    1cf4:	f7 95       	ror	r31
    1cf6:	9f 5f       	subi	r25, 0xFF	; 255
    1cf8:	c9 f7       	brne	.-14     	; 0x1cec <__divsf3_pse+0x74>
    1cfa:	88 0f       	add	r24, r24
    1cfc:	91 1d       	adc	r25, r1
    1cfe:	96 95       	lsr	r25
    1d00:	87 95       	ror	r24
    1d02:	97 f9       	bld	r25, 7
    1d04:	08 95       	ret
    1d06:	e1 e0       	ldi	r30, 0x01	; 1
    1d08:	66 0f       	add	r22, r22
    1d0a:	77 1f       	adc	r23, r23
    1d0c:	88 1f       	adc	r24, r24
    1d0e:	bb 1f       	adc	r27, r27
    1d10:	62 17       	cp	r22, r18
    1d12:	73 07       	cpc	r23, r19
    1d14:	84 07       	cpc	r24, r20
    1d16:	ba 07       	cpc	r27, r26
    1d18:	20 f0       	brcs	.+8      	; 0x1d22 <__divsf3_pse+0xaa>
    1d1a:	62 1b       	sub	r22, r18
    1d1c:	73 0b       	sbc	r23, r19
    1d1e:	84 0b       	sbc	r24, r20
    1d20:	ba 0b       	sbc	r27, r26
    1d22:	ee 1f       	adc	r30, r30
    1d24:	88 f7       	brcc	.-30     	; 0x1d08 <__divsf3_pse+0x90>
    1d26:	e0 95       	com	r30
    1d28:	08 95       	ret

00001d2a <__fixunssfsi>:
    1d2a:	7f d0       	rcall	.+254    	; 0x1e2a <__fp_splitA>
    1d2c:	88 f0       	brcs	.+34     	; 0x1d50 <__fixunssfsi+0x26>
    1d2e:	9f 57       	subi	r25, 0x7F	; 127
    1d30:	90 f0       	brcs	.+36     	; 0x1d56 <__fixunssfsi+0x2c>
    1d32:	b9 2f       	mov	r27, r25
    1d34:	99 27       	eor	r25, r25
    1d36:	b7 51       	subi	r27, 0x17	; 23
    1d38:	a0 f0       	brcs	.+40     	; 0x1d62 <__fixunssfsi+0x38>
    1d3a:	d1 f0       	breq	.+52     	; 0x1d70 <__fixunssfsi+0x46>
    1d3c:	66 0f       	add	r22, r22
    1d3e:	77 1f       	adc	r23, r23
    1d40:	88 1f       	adc	r24, r24
    1d42:	99 1f       	adc	r25, r25
    1d44:	1a f0       	brmi	.+6      	; 0x1d4c <__fixunssfsi+0x22>
    1d46:	ba 95       	dec	r27
    1d48:	c9 f7       	brne	.-14     	; 0x1d3c <__fixunssfsi+0x12>
    1d4a:	12 c0       	rjmp	.+36     	; 0x1d70 <__fixunssfsi+0x46>
    1d4c:	b1 30       	cpi	r27, 0x01	; 1
    1d4e:	81 f0       	breq	.+32     	; 0x1d70 <__fixunssfsi+0x46>
    1d50:	86 d0       	rcall	.+268    	; 0x1e5e <__fp_zero>
    1d52:	b1 e0       	ldi	r27, 0x01	; 1
    1d54:	08 95       	ret
    1d56:	83 c0       	rjmp	.+262    	; 0x1e5e <__fp_zero>
    1d58:	67 2f       	mov	r22, r23
    1d5a:	78 2f       	mov	r23, r24
    1d5c:	88 27       	eor	r24, r24
    1d5e:	b8 5f       	subi	r27, 0xF8	; 248
    1d60:	39 f0       	breq	.+14     	; 0x1d70 <__fixunssfsi+0x46>
    1d62:	b9 3f       	cpi	r27, 0xF9	; 249
    1d64:	cc f3       	brlt	.-14     	; 0x1d58 <__fixunssfsi+0x2e>
    1d66:	86 95       	lsr	r24
    1d68:	77 95       	ror	r23
    1d6a:	67 95       	ror	r22
    1d6c:	b3 95       	inc	r27
    1d6e:	d9 f7       	brne	.-10     	; 0x1d66 <__fixunssfsi+0x3c>
    1d70:	3e f4       	brtc	.+14     	; 0x1d80 <__fixunssfsi+0x56>
    1d72:	90 95       	com	r25
    1d74:	80 95       	com	r24
    1d76:	70 95       	com	r23
    1d78:	61 95       	neg	r22
    1d7a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d7c:	8f 4f       	sbci	r24, 0xFF	; 255
    1d7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d80:	08 95       	ret

00001d82 <__fp_cmp>:
    1d82:	99 0f       	add	r25, r25
    1d84:	00 08       	sbc	r0, r0
    1d86:	55 0f       	add	r21, r21
    1d88:	aa 0b       	sbc	r26, r26
    1d8a:	e0 e8       	ldi	r30, 0x80	; 128
    1d8c:	fe ef       	ldi	r31, 0xFE	; 254
    1d8e:	16 16       	cp	r1, r22
    1d90:	17 06       	cpc	r1, r23
    1d92:	e8 07       	cpc	r30, r24
    1d94:	f9 07       	cpc	r31, r25
    1d96:	c0 f0       	brcs	.+48     	; 0x1dc8 <__fp_cmp+0x46>
    1d98:	12 16       	cp	r1, r18
    1d9a:	13 06       	cpc	r1, r19
    1d9c:	e4 07       	cpc	r30, r20
    1d9e:	f5 07       	cpc	r31, r21
    1da0:	98 f0       	brcs	.+38     	; 0x1dc8 <__fp_cmp+0x46>
    1da2:	62 1b       	sub	r22, r18
    1da4:	73 0b       	sbc	r23, r19
    1da6:	84 0b       	sbc	r24, r20
    1da8:	95 0b       	sbc	r25, r21
    1daa:	39 f4       	brne	.+14     	; 0x1dba <__fp_cmp+0x38>
    1dac:	0a 26       	eor	r0, r26
    1dae:	61 f0       	breq	.+24     	; 0x1dc8 <__fp_cmp+0x46>
    1db0:	23 2b       	or	r18, r19
    1db2:	24 2b       	or	r18, r20
    1db4:	25 2b       	or	r18, r21
    1db6:	21 f4       	brne	.+8      	; 0x1dc0 <__fp_cmp+0x3e>
    1db8:	08 95       	ret
    1dba:	0a 26       	eor	r0, r26
    1dbc:	09 f4       	brne	.+2      	; 0x1dc0 <__fp_cmp+0x3e>
    1dbe:	a1 40       	sbci	r26, 0x01	; 1
    1dc0:	a6 95       	lsr	r26
    1dc2:	8f ef       	ldi	r24, 0xFF	; 255
    1dc4:	81 1d       	adc	r24, r1
    1dc6:	81 1d       	adc	r24, r1
    1dc8:	08 95       	ret

00001dca <__fp_inf>:
    1dca:	97 f9       	bld	r25, 7
    1dcc:	9f 67       	ori	r25, 0x7F	; 127
    1dce:	80 e8       	ldi	r24, 0x80	; 128
    1dd0:	70 e0       	ldi	r23, 0x00	; 0
    1dd2:	60 e0       	ldi	r22, 0x00	; 0
    1dd4:	08 95       	ret

00001dd6 <__fp_nan>:
    1dd6:	9f ef       	ldi	r25, 0xFF	; 255
    1dd8:	80 ec       	ldi	r24, 0xC0	; 192
    1dda:	08 95       	ret

00001ddc <__fp_pscA>:
    1ddc:	00 24       	eor	r0, r0
    1dde:	0a 94       	dec	r0
    1de0:	16 16       	cp	r1, r22
    1de2:	17 06       	cpc	r1, r23
    1de4:	18 06       	cpc	r1, r24
    1de6:	09 06       	cpc	r0, r25
    1de8:	08 95       	ret

00001dea <__fp_pscB>:
    1dea:	00 24       	eor	r0, r0
    1dec:	0a 94       	dec	r0
    1dee:	12 16       	cp	r1, r18
    1df0:	13 06       	cpc	r1, r19
    1df2:	14 06       	cpc	r1, r20
    1df4:	05 06       	cpc	r0, r21
    1df6:	08 95       	ret

00001df8 <__fp_round>:
    1df8:	09 2e       	mov	r0, r25
    1dfa:	03 94       	inc	r0
    1dfc:	00 0c       	add	r0, r0
    1dfe:	11 f4       	brne	.+4      	; 0x1e04 <__fp_round+0xc>
    1e00:	88 23       	and	r24, r24
    1e02:	52 f0       	brmi	.+20     	; 0x1e18 <__fp_round+0x20>
    1e04:	bb 0f       	add	r27, r27
    1e06:	40 f4       	brcc	.+16     	; 0x1e18 <__fp_round+0x20>
    1e08:	bf 2b       	or	r27, r31
    1e0a:	11 f4       	brne	.+4      	; 0x1e10 <__fp_round+0x18>
    1e0c:	60 ff       	sbrs	r22, 0
    1e0e:	04 c0       	rjmp	.+8      	; 0x1e18 <__fp_round+0x20>
    1e10:	6f 5f       	subi	r22, 0xFF	; 255
    1e12:	7f 4f       	sbci	r23, 0xFF	; 255
    1e14:	8f 4f       	sbci	r24, 0xFF	; 255
    1e16:	9f 4f       	sbci	r25, 0xFF	; 255
    1e18:	08 95       	ret

00001e1a <__fp_split3>:
    1e1a:	57 fd       	sbrc	r21, 7
    1e1c:	90 58       	subi	r25, 0x80	; 128
    1e1e:	44 0f       	add	r20, r20
    1e20:	55 1f       	adc	r21, r21
    1e22:	59 f0       	breq	.+22     	; 0x1e3a <__fp_splitA+0x10>
    1e24:	5f 3f       	cpi	r21, 0xFF	; 255
    1e26:	71 f0       	breq	.+28     	; 0x1e44 <__fp_splitA+0x1a>
    1e28:	47 95       	ror	r20

00001e2a <__fp_splitA>:
    1e2a:	88 0f       	add	r24, r24
    1e2c:	97 fb       	bst	r25, 7
    1e2e:	99 1f       	adc	r25, r25
    1e30:	61 f0       	breq	.+24     	; 0x1e4a <__fp_splitA+0x20>
    1e32:	9f 3f       	cpi	r25, 0xFF	; 255
    1e34:	79 f0       	breq	.+30     	; 0x1e54 <__fp_splitA+0x2a>
    1e36:	87 95       	ror	r24
    1e38:	08 95       	ret
    1e3a:	12 16       	cp	r1, r18
    1e3c:	13 06       	cpc	r1, r19
    1e3e:	14 06       	cpc	r1, r20
    1e40:	55 1f       	adc	r21, r21
    1e42:	f2 cf       	rjmp	.-28     	; 0x1e28 <__fp_split3+0xe>
    1e44:	46 95       	lsr	r20
    1e46:	f1 df       	rcall	.-30     	; 0x1e2a <__fp_splitA>
    1e48:	08 c0       	rjmp	.+16     	; 0x1e5a <__fp_splitA+0x30>
    1e4a:	16 16       	cp	r1, r22
    1e4c:	17 06       	cpc	r1, r23
    1e4e:	18 06       	cpc	r1, r24
    1e50:	99 1f       	adc	r25, r25
    1e52:	f1 cf       	rjmp	.-30     	; 0x1e36 <__fp_splitA+0xc>
    1e54:	86 95       	lsr	r24
    1e56:	71 05       	cpc	r23, r1
    1e58:	61 05       	cpc	r22, r1
    1e5a:	08 94       	sec
    1e5c:	08 95       	ret

00001e5e <__fp_zero>:
    1e5e:	e8 94       	clt

00001e60 <__fp_szero>:
    1e60:	bb 27       	eor	r27, r27
    1e62:	66 27       	eor	r22, r22
    1e64:	77 27       	eor	r23, r23
    1e66:	cb 01       	movw	r24, r22
    1e68:	97 f9       	bld	r25, 7
    1e6a:	08 95       	ret

00001e6c <__gesf2>:
    1e6c:	8a df       	rcall	.-236    	; 0x1d82 <__fp_cmp>
    1e6e:	08 f4       	brcc	.+2      	; 0x1e72 <__gesf2+0x6>
    1e70:	8f ef       	ldi	r24, 0xFF	; 255
    1e72:	08 95       	ret

00001e74 <__mulsf3>:
    1e74:	0b d0       	rcall	.+22     	; 0x1e8c <__mulsf3x>
    1e76:	c0 cf       	rjmp	.-128    	; 0x1df8 <__fp_round>
    1e78:	b1 df       	rcall	.-158    	; 0x1ddc <__fp_pscA>
    1e7a:	28 f0       	brcs	.+10     	; 0x1e86 <__mulsf3+0x12>
    1e7c:	b6 df       	rcall	.-148    	; 0x1dea <__fp_pscB>
    1e7e:	18 f0       	brcs	.+6      	; 0x1e86 <__mulsf3+0x12>
    1e80:	95 23       	and	r25, r21
    1e82:	09 f0       	breq	.+2      	; 0x1e86 <__mulsf3+0x12>
    1e84:	a2 cf       	rjmp	.-188    	; 0x1dca <__fp_inf>
    1e86:	a7 cf       	rjmp	.-178    	; 0x1dd6 <__fp_nan>
    1e88:	11 24       	eor	r1, r1
    1e8a:	ea cf       	rjmp	.-44     	; 0x1e60 <__fp_szero>

00001e8c <__mulsf3x>:
    1e8c:	c6 df       	rcall	.-116    	; 0x1e1a <__fp_split3>
    1e8e:	a0 f3       	brcs	.-24     	; 0x1e78 <__mulsf3+0x4>

00001e90 <__mulsf3_pse>:
    1e90:	95 9f       	mul	r25, r21
    1e92:	d1 f3       	breq	.-12     	; 0x1e88 <__mulsf3+0x14>
    1e94:	95 0f       	add	r25, r21
    1e96:	50 e0       	ldi	r21, 0x00	; 0
    1e98:	55 1f       	adc	r21, r21
    1e9a:	62 9f       	mul	r22, r18
    1e9c:	f0 01       	movw	r30, r0
    1e9e:	72 9f       	mul	r23, r18
    1ea0:	bb 27       	eor	r27, r27
    1ea2:	f0 0d       	add	r31, r0
    1ea4:	b1 1d       	adc	r27, r1
    1ea6:	63 9f       	mul	r22, r19
    1ea8:	aa 27       	eor	r26, r26
    1eaa:	f0 0d       	add	r31, r0
    1eac:	b1 1d       	adc	r27, r1
    1eae:	aa 1f       	adc	r26, r26
    1eb0:	64 9f       	mul	r22, r20
    1eb2:	66 27       	eor	r22, r22
    1eb4:	b0 0d       	add	r27, r0
    1eb6:	a1 1d       	adc	r26, r1
    1eb8:	66 1f       	adc	r22, r22
    1eba:	82 9f       	mul	r24, r18
    1ebc:	22 27       	eor	r18, r18
    1ebe:	b0 0d       	add	r27, r0
    1ec0:	a1 1d       	adc	r26, r1
    1ec2:	62 1f       	adc	r22, r18
    1ec4:	73 9f       	mul	r23, r19
    1ec6:	b0 0d       	add	r27, r0
    1ec8:	a1 1d       	adc	r26, r1
    1eca:	62 1f       	adc	r22, r18
    1ecc:	83 9f       	mul	r24, r19
    1ece:	a0 0d       	add	r26, r0
    1ed0:	61 1d       	adc	r22, r1
    1ed2:	22 1f       	adc	r18, r18
    1ed4:	74 9f       	mul	r23, r20
    1ed6:	33 27       	eor	r19, r19
    1ed8:	a0 0d       	add	r26, r0
    1eda:	61 1d       	adc	r22, r1
    1edc:	23 1f       	adc	r18, r19
    1ede:	84 9f       	mul	r24, r20
    1ee0:	60 0d       	add	r22, r0
    1ee2:	21 1d       	adc	r18, r1
    1ee4:	82 2f       	mov	r24, r18
    1ee6:	76 2f       	mov	r23, r22
    1ee8:	6a 2f       	mov	r22, r26
    1eea:	11 24       	eor	r1, r1
    1eec:	9f 57       	subi	r25, 0x7F	; 127
    1eee:	50 40       	sbci	r21, 0x00	; 0
    1ef0:	8a f0       	brmi	.+34     	; 0x1f14 <__mulsf3_pse+0x84>
    1ef2:	e1 f0       	breq	.+56     	; 0x1f2c <__mulsf3_pse+0x9c>
    1ef4:	88 23       	and	r24, r24
    1ef6:	4a f0       	brmi	.+18     	; 0x1f0a <__mulsf3_pse+0x7a>
    1ef8:	ee 0f       	add	r30, r30
    1efa:	ff 1f       	adc	r31, r31
    1efc:	bb 1f       	adc	r27, r27
    1efe:	66 1f       	adc	r22, r22
    1f00:	77 1f       	adc	r23, r23
    1f02:	88 1f       	adc	r24, r24
    1f04:	91 50       	subi	r25, 0x01	; 1
    1f06:	50 40       	sbci	r21, 0x00	; 0
    1f08:	a9 f7       	brne	.-22     	; 0x1ef4 <__mulsf3_pse+0x64>
    1f0a:	9e 3f       	cpi	r25, 0xFE	; 254
    1f0c:	51 05       	cpc	r21, r1
    1f0e:	70 f0       	brcs	.+28     	; 0x1f2c <__mulsf3_pse+0x9c>
    1f10:	5c cf       	rjmp	.-328    	; 0x1dca <__fp_inf>
    1f12:	a6 cf       	rjmp	.-180    	; 0x1e60 <__fp_szero>
    1f14:	5f 3f       	cpi	r21, 0xFF	; 255
    1f16:	ec f3       	brlt	.-6      	; 0x1f12 <__mulsf3_pse+0x82>
    1f18:	98 3e       	cpi	r25, 0xE8	; 232
    1f1a:	dc f3       	brlt	.-10     	; 0x1f12 <__mulsf3_pse+0x82>
    1f1c:	86 95       	lsr	r24
    1f1e:	77 95       	ror	r23
    1f20:	67 95       	ror	r22
    1f22:	b7 95       	ror	r27
    1f24:	f7 95       	ror	r31
    1f26:	e7 95       	ror	r30
    1f28:	9f 5f       	subi	r25, 0xFF	; 255
    1f2a:	c1 f7       	brne	.-16     	; 0x1f1c <__mulsf3_pse+0x8c>
    1f2c:	fe 2b       	or	r31, r30
    1f2e:	88 0f       	add	r24, r24
    1f30:	91 1d       	adc	r25, r1
    1f32:	96 95       	lsr	r25
    1f34:	87 95       	ror	r24
    1f36:	97 f9       	bld	r25, 7
    1f38:	08 95       	ret

00001f3a <_exit>:
    1f3a:	f8 94       	cli

00001f3c <__stop_program>:
    1f3c:	ff cf       	rjmp	.-2      	; 0x1f3c <__stop_program>
