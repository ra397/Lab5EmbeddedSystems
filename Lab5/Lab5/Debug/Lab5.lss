
Lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00001e60  00001ef4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e60  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800120  00800120  00001f14  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001f14  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001f70  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00001fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001341  00000000  00000000  00002010  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a64  00000000  00000000  00003351  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b52  00000000  00000000  00003db5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000274  00000000  00000000  00004908  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005da  00000000  00000000  00004b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004af  00000000  00000000  00005156  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00005605  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 69 08 	jmp	0x10d2	; 0x10d2 <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e0 e6       	ldi	r30, 0x60	; 96
      7c:	fe e1       	ldi	r31, 0x1E	; 30
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a0 32       	cpi	r26, 0x20	; 32
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a0 e2       	ldi	r26, 0x20	; 32
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a8 32       	cpi	r26, 0x28	; 40
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 b6 08 	call	0x116c	; 0x116c <main>
      9e:	0c 94 2e 0f 	jmp	0x1e5c	; 0x1e5c <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <hd44780_outnibble>:
/*
 * Send one nibble out to the LCD controller.
 */
static void
hd44780_outnibble(uint8_t n, uint8_t rs)
{
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	cd b7       	in	r28, 0x3d	; 61
      ac:	de b7       	in	r29, 0x3e	; 62
      ae:	a4 97       	sbiw	r28, 0x24	; 36
      b0:	0f b6       	in	r0, 0x3f	; 63
      b2:	f8 94       	cli
      b4:	de bf       	out	0x3e, r29	; 62
      b6:	0f be       	out	0x3f, r0	; 63
      b8:	cd bf       	out	0x3d, r28	; 61
      ba:	8b a3       	std	Y+35, r24	; 0x23
      bc:	6c a3       	std	Y+36, r22	; 0x24
  CLR(PORT, HD44780_RW);
      be:	85 e2       	ldi	r24, 0x25	; 37
      c0:	90 e0       	ldi	r25, 0x00	; 0
      c2:	25 e2       	ldi	r18, 0x25	; 37
      c4:	30 e0       	ldi	r19, 0x00	; 0
      c6:	f9 01       	movw	r30, r18
      c8:	20 81       	ld	r18, Z
      ca:	2f 7e       	andi	r18, 0xEF	; 239
      cc:	fc 01       	movw	r30, r24
      ce:	20 83       	st	Z, r18
  if (rs)
      d0:	8c a1       	ldd	r24, Y+36	; 0x24
      d2:	88 23       	and	r24, r24
      d4:	51 f0       	breq	.+20     	; 0xea <hd44780_outnibble+0x44>
    SET(PORT, HD44780_RS);
      d6:	85 e2       	ldi	r24, 0x25	; 37
      d8:	90 e0       	ldi	r25, 0x00	; 0
      da:	25 e2       	ldi	r18, 0x25	; 37
      dc:	30 e0       	ldi	r19, 0x00	; 0
      de:	f9 01       	movw	r30, r18
      e0:	20 81       	ld	r18, Z
      e2:	20 62       	ori	r18, 0x20	; 32
      e4:	fc 01       	movw	r30, r24
      e6:	20 83       	st	Z, r18
      e8:	09 c0       	rjmp	.+18     	; 0xfc <hd44780_outnibble+0x56>
  else
    CLR(PORT, HD44780_RS);
      ea:	85 e2       	ldi	r24, 0x25	; 37
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	25 e2       	ldi	r18, 0x25	; 37
      f0:	30 e0       	ldi	r19, 0x00	; 0
      f2:	f9 01       	movw	r30, r18
      f4:	20 81       	ld	r18, Z
      f6:	2f 7d       	andi	r18, 0xDF	; 223
      f8:	fc 01       	movw	r30, r24
      fa:	20 83       	st	Z, r18
  ASSIGN(PORT, HD44780_D4, n);
      fc:	88 e2       	ldi	r24, 0x28	; 40
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	28 e2       	ldi	r18, 0x28	; 40
     102:	30 e0       	ldi	r19, 0x00	; 0
     104:	f9 01       	movw	r30, r18
     106:	20 81       	ld	r18, Z
     108:	32 2f       	mov	r19, r18
     10a:	30 7f       	andi	r19, 0xF0	; 240
     10c:	2b a1       	ldd	r18, Y+35	; 0x23
     10e:	23 2b       	or	r18, r19
     110:	fc 01       	movw	r30, r24
     112:	20 83       	st	Z, r18
     114:	19 82       	std	Y+1, r1	; 0x01
static inline uint8_t
hd44780_pulse_e(bool readback)
{
  uint8_t x;

  SET(PORT, HD44780_E);
     116:	85 e2       	ldi	r24, 0x25	; 37
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	25 e2       	ldi	r18, 0x25	; 37
     11c:	30 e0       	ldi	r19, 0x00	; 0
     11e:	f9 01       	movw	r30, r18
     120:	20 81       	ld	r18, Z
     122:	28 60       	ori	r18, 0x08	; 8
     124:	fc 01       	movw	r30, r24
     126:	20 83       	st	Z, r18
     128:	80 e0       	ldi	r24, 0x00	; 0
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	a0 e0       	ldi	r26, 0x00	; 0
     12e:	bf e3       	ldi	r27, 0x3F	; 63
     130:	8a 83       	std	Y+2, r24	; 0x02
     132:	9b 83       	std	Y+3, r25	; 0x03
     134:	ac 83       	std	Y+4, r26	; 0x04
     136:	bd 83       	std	Y+5, r27	; 0x05
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     138:	2b ea       	ldi	r18, 0xAB	; 171
     13a:	3a ea       	ldi	r19, 0xAA	; 170
     13c:	4a e2       	ldi	r20, 0x2A	; 42
     13e:	50 e4       	ldi	r21, 0x40	; 64
     140:	6a 81       	ldd	r22, Y+2	; 0x02
     142:	7b 81       	ldd	r23, Y+3	; 0x03
     144:	8c 81       	ldd	r24, Y+4	; 0x04
     146:	9d 81       	ldd	r25, Y+5	; 0x05
     148:	0e 94 91 0b 	call	0x1722	; 0x1722 <__mulsf3>
     14c:	dc 01       	movw	r26, r24
     14e:	cb 01       	movw	r24, r22
     150:	8e 83       	std	Y+6, r24	; 0x06
     152:	9f 83       	std	Y+7, r25	; 0x07
     154:	a8 87       	std	Y+8, r26	; 0x08
     156:	b9 87       	std	Y+9, r27	; 0x09
	__tmp2 = ((F_CPU) / 4e6) * __us;
     158:	8a 81       	ldd	r24, Y+2	; 0x02
     15a:	9b 81       	ldd	r25, Y+3	; 0x03
     15c:	ac 81       	ldd	r26, Y+4	; 0x04
     15e:	bd 81       	ldd	r27, Y+5	; 0x05
     160:	9c 01       	movw	r18, r24
     162:	ad 01       	movw	r20, r26
     164:	bc 01       	movw	r22, r24
     166:	cd 01       	movw	r24, r26
     168:	0e 94 c1 09 	call	0x1382	; 0x1382 <__addsf3>
     16c:	dc 01       	movw	r26, r24
     16e:	cb 01       	movw	r24, r22
     170:	8a 87       	std	Y+10, r24	; 0x0a
     172:	9b 87       	std	Y+11, r25	; 0x0b
     174:	ac 87       	std	Y+12, r26	; 0x0c
     176:	bd 87       	std	Y+13, r27	; 0x0d
	if (__tmp < 1.0)
     178:	20 e0       	ldi	r18, 0x00	; 0
     17a:	30 e0       	ldi	r19, 0x00	; 0
     17c:	40 e8       	ldi	r20, 0x80	; 128
     17e:	5f e3       	ldi	r21, 0x3F	; 63
     180:	6e 81       	ldd	r22, Y+6	; 0x06
     182:	7f 81       	ldd	r23, Y+7	; 0x07
     184:	88 85       	ldd	r24, Y+8	; 0x08
     186:	99 85       	ldd	r25, Y+9	; 0x09
     188:	0e 94 2d 0a 	call	0x145a	; 0x145a <__cmpsf2>
     18c:	88 23       	and	r24, r24
     18e:	1c f4       	brge	.+6      	; 0x196 <hd44780_outnibble+0xf0>
		__ticks = 1;
     190:	81 e0       	ldi	r24, 0x01	; 1
     192:	8e 87       	std	Y+14, r24	; 0x0e
     194:	b2 c0       	rjmp	.+356    	; 0x2fa <hd44780_outnibble+0x254>
	else if (__tmp2 > 65535)
     196:	20 e0       	ldi	r18, 0x00	; 0
     198:	3f ef       	ldi	r19, 0xFF	; 255
     19a:	4f e7       	ldi	r20, 0x7F	; 127
     19c:	57 e4       	ldi	r21, 0x47	; 71
     19e:	6a 85       	ldd	r22, Y+10	; 0x0a
     1a0:	7b 85       	ldd	r23, Y+11	; 0x0b
     1a2:	8c 85       	ldd	r24, Y+12	; 0x0c
     1a4:	9d 85       	ldd	r25, Y+13	; 0x0d
     1a6:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__gesf2>
     1aa:	18 16       	cp	r1, r24
     1ac:	0c f0       	brlt	.+2      	; 0x1b0 <hd44780_outnibble+0x10a>
     1ae:	7b c0       	rjmp	.+246    	; 0x2a6 <hd44780_outnibble+0x200>
	{
		_delay_ms(__us / 1000.0);
     1b0:	20 e0       	ldi	r18, 0x00	; 0
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	4a e7       	ldi	r20, 0x7A	; 122
     1b6:	54 e4       	ldi	r21, 0x44	; 68
     1b8:	6a 81       	ldd	r22, Y+2	; 0x02
     1ba:	7b 81       	ldd	r23, Y+3	; 0x03
     1bc:	8c 81       	ldd	r24, Y+4	; 0x04
     1be:	9d 81       	ldd	r25, Y+5	; 0x05
     1c0:	0e 94 32 0a 	call	0x1464	; 0x1464 <__divsf3>
     1c4:	dc 01       	movw	r26, r24
     1c6:	cb 01       	movw	r24, r22
     1c8:	8f 87       	std	Y+15, r24	; 0x0f
     1ca:	98 8b       	std	Y+16, r25	; 0x10
     1cc:	a9 8b       	std	Y+17, r26	; 0x11
     1ce:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     1d0:	20 e0       	ldi	r18, 0x00	; 0
     1d2:	30 e0       	ldi	r19, 0x00	; 0
     1d4:	4a ef       	ldi	r20, 0xFA	; 250
     1d6:	54 e4       	ldi	r21, 0x44	; 68
     1d8:	6f 85       	ldd	r22, Y+15	; 0x0f
     1da:	78 89       	ldd	r23, Y+16	; 0x10
     1dc:	89 89       	ldd	r24, Y+17	; 0x11
     1de:	9a 89       	ldd	r25, Y+18	; 0x12
     1e0:	0e 94 91 0b 	call	0x1722	; 0x1722 <__mulsf3>
     1e4:	dc 01       	movw	r26, r24
     1e6:	cb 01       	movw	r24, r22
     1e8:	8b 8b       	std	Y+19, r24	; 0x13
     1ea:	9c 8b       	std	Y+20, r25	; 0x14
     1ec:	ad 8b       	std	Y+21, r26	; 0x15
     1ee:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     1f0:	20 e0       	ldi	r18, 0x00	; 0
     1f2:	30 e0       	ldi	r19, 0x00	; 0
     1f4:	40 e8       	ldi	r20, 0x80	; 128
     1f6:	5f e3       	ldi	r21, 0x3F	; 63
     1f8:	6b 89       	ldd	r22, Y+19	; 0x13
     1fa:	7c 89       	ldd	r23, Y+20	; 0x14
     1fc:	8d 89       	ldd	r24, Y+21	; 0x15
     1fe:	9e 89       	ldd	r25, Y+22	; 0x16
     200:	0e 94 2d 0a 	call	0x145a	; 0x145a <__cmpsf2>
     204:	88 23       	and	r24, r24
     206:	2c f4       	brge	.+10     	; 0x212 <hd44780_outnibble+0x16c>
		__ticks = 1;
     208:	81 e0       	ldi	r24, 0x01	; 1
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	98 8f       	std	Y+24, r25	; 0x18
     20e:	8f 8b       	std	Y+23, r24	; 0x17
     210:	3f c0       	rjmp	.+126    	; 0x290 <hd44780_outnibble+0x1ea>
	else if (__tmp > 65535)
     212:	20 e0       	ldi	r18, 0x00	; 0
     214:	3f ef       	ldi	r19, 0xFF	; 255
     216:	4f e7       	ldi	r20, 0x7F	; 127
     218:	57 e4       	ldi	r21, 0x47	; 71
     21a:	6b 89       	ldd	r22, Y+19	; 0x13
     21c:	7c 89       	ldd	r23, Y+20	; 0x14
     21e:	8d 89       	ldd	r24, Y+21	; 0x15
     220:	9e 89       	ldd	r25, Y+22	; 0x16
     222:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__gesf2>
     226:	18 16       	cp	r1, r24
     228:	4c f5       	brge	.+82     	; 0x27c <hd44780_outnibble+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     22a:	20 e0       	ldi	r18, 0x00	; 0
     22c:	30 e0       	ldi	r19, 0x00	; 0
     22e:	40 e2       	ldi	r20, 0x20	; 32
     230:	51 e4       	ldi	r21, 0x41	; 65
     232:	6f 85       	ldd	r22, Y+15	; 0x0f
     234:	78 89       	ldd	r23, Y+16	; 0x10
     236:	89 89       	ldd	r24, Y+17	; 0x11
     238:	9a 89       	ldd	r25, Y+18	; 0x12
     23a:	0e 94 91 0b 	call	0x1722	; 0x1722 <__mulsf3>
     23e:	dc 01       	movw	r26, r24
     240:	cb 01       	movw	r24, r22
     242:	bc 01       	movw	r22, r24
     244:	cd 01       	movw	r24, r26
     246:	0e 94 ab 0a 	call	0x1556	; 0x1556 <__fixunssfsi>
     24a:	dc 01       	movw	r26, r24
     24c:	cb 01       	movw	r24, r22
     24e:	98 8f       	std	Y+24, r25	; 0x18
     250:	8f 8b       	std	Y+23, r24	; 0x17
     252:	0f c0       	rjmp	.+30     	; 0x272 <hd44780_outnibble+0x1cc>
     254:	88 ec       	ldi	r24, 0xC8	; 200
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	9a 8f       	std	Y+26, r25	; 0x1a
     25a:	89 8f       	std	Y+25, r24	; 0x19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     25c:	89 8d       	ldd	r24, Y+25	; 0x19
     25e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     260:	01 97       	sbiw	r24, 0x01	; 1
     262:	f1 f7       	brne	.-4      	; 0x260 <hd44780_outnibble+0x1ba>
     264:	9a 8f       	std	Y+26, r25	; 0x1a
     266:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     268:	8f 89       	ldd	r24, Y+23	; 0x17
     26a:	98 8d       	ldd	r25, Y+24	; 0x18
     26c:	01 97       	sbiw	r24, 0x01	; 1
     26e:	98 8f       	std	Y+24, r25	; 0x18
     270:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     272:	8f 89       	ldd	r24, Y+23	; 0x17
     274:	98 8d       	ldd	r25, Y+24	; 0x18
     276:	89 2b       	or	r24, r25
     278:	69 f7       	brne	.-38     	; 0x254 <hd44780_outnibble+0x1ae>
     27a:	3f c0       	rjmp	.+126    	; 0x2fa <hd44780_outnibble+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     27c:	6b 89       	ldd	r22, Y+19	; 0x13
     27e:	7c 89       	ldd	r23, Y+20	; 0x14
     280:	8d 89       	ldd	r24, Y+21	; 0x15
     282:	9e 89       	ldd	r25, Y+22	; 0x16
     284:	0e 94 ab 0a 	call	0x1556	; 0x1556 <__fixunssfsi>
     288:	dc 01       	movw	r26, r24
     28a:	cb 01       	movw	r24, r22
     28c:	98 8f       	std	Y+24, r25	; 0x18
     28e:	8f 8b       	std	Y+23, r24	; 0x17
     290:	8f 89       	ldd	r24, Y+23	; 0x17
     292:	98 8d       	ldd	r25, Y+24	; 0x18
     294:	9c 8f       	std	Y+28, r25	; 0x1c
     296:	8b 8f       	std	Y+27, r24	; 0x1b
     298:	8b 8d       	ldd	r24, Y+27	; 0x1b
     29a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     29c:	01 97       	sbiw	r24, 0x01	; 1
     29e:	f1 f7       	brne	.-4      	; 0x29c <hd44780_outnibble+0x1f6>
     2a0:	9c 8f       	std	Y+28, r25	; 0x1c
     2a2:	8b 8f       	std	Y+27, r24	; 0x1b
     2a4:	2a c0       	rjmp	.+84     	; 0x2fa <hd44780_outnibble+0x254>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     2a6:	20 e0       	ldi	r18, 0x00	; 0
     2a8:	30 e0       	ldi	r19, 0x00	; 0
     2aa:	4f e7       	ldi	r20, 0x7F	; 127
     2ac:	53 e4       	ldi	r21, 0x43	; 67
     2ae:	6e 81       	ldd	r22, Y+6	; 0x06
     2b0:	7f 81       	ldd	r23, Y+7	; 0x07
     2b2:	88 85       	ldd	r24, Y+8	; 0x08
     2b4:	99 85       	ldd	r25, Y+9	; 0x09
     2b6:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__gesf2>
     2ba:	18 16       	cp	r1, r24
     2bc:	ac f4       	brge	.+42     	; 0x2e8 <hd44780_outnibble+0x242>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     2be:	6a 85       	ldd	r22, Y+10	; 0x0a
     2c0:	7b 85       	ldd	r23, Y+11	; 0x0b
     2c2:	8c 85       	ldd	r24, Y+12	; 0x0c
     2c4:	9d 85       	ldd	r25, Y+13	; 0x0d
     2c6:	0e 94 ab 0a 	call	0x1556	; 0x1556 <__fixunssfsi>
     2ca:	dc 01       	movw	r26, r24
     2cc:	cb 01       	movw	r24, r22
     2ce:	9e 8f       	std	Y+30, r25	; 0x1e
     2d0:	8d 8f       	std	Y+29, r24	; 0x1d
     2d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     2d4:	9e 8d       	ldd	r25, Y+30	; 0x1e
     2d6:	98 a3       	std	Y+32, r25	; 0x20
     2d8:	8f 8f       	std	Y+31, r24	; 0x1f
     2da:	8f 8d       	ldd	r24, Y+31	; 0x1f
     2dc:	98 a1       	ldd	r25, Y+32	; 0x20
     2de:	01 97       	sbiw	r24, 0x01	; 1
     2e0:	f1 f7       	brne	.-4      	; 0x2de <hd44780_outnibble+0x238>
     2e2:	98 a3       	std	Y+32, r25	; 0x20
     2e4:	8f 8f       	std	Y+31, r24	; 0x1f
     2e6:	0f c0       	rjmp	.+30     	; 0x306 <hd44780_outnibble+0x260>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     2e8:	6e 81       	ldd	r22, Y+6	; 0x06
     2ea:	7f 81       	ldd	r23, Y+7	; 0x07
     2ec:	88 85       	ldd	r24, Y+8	; 0x08
     2ee:	99 85       	ldd	r25, Y+9	; 0x09
     2f0:	0e 94 ab 0a 	call	0x1556	; 0x1556 <__fixunssfsi>
     2f4:	dc 01       	movw	r26, r24
     2f6:	cb 01       	movw	r24, r22
     2f8:	8e 87       	std	Y+14, r24	; 0x0e
     2fa:	8e 85       	ldd	r24, Y+14	; 0x0e
     2fc:	89 a3       	std	Y+33, r24	; 0x21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2fe:	89 a1       	ldd	r24, Y+33	; 0x21
     300:	8a 95       	dec	r24
     302:	f1 f7       	brne	.-4      	; 0x300 <hd44780_outnibble+0x25a>
     304:	89 a3       	std	Y+33, r24	; 0x21
  __asm__ volatile("nop");
  __asm__ volatile("nop");
#    endif /* F_CPU > 2000000UL */
#  endif /* F_CPU > 1000000UL */
#endif
  if (readback)
     306:	89 81       	ldd	r24, Y+1	; 0x01
     308:	88 23       	and	r24, r24
     30a:	39 f0       	breq	.+14     	; 0x31a <hd44780_outnibble+0x274>
    x = READ(PIN, HD44780_D4);
     30c:	86 e2       	ldi	r24, 0x26	; 38
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	fc 01       	movw	r30, r24
     312:	80 81       	ld	r24, Z
     314:	8f 70       	andi	r24, 0x0F	; 15
     316:	8a a3       	std	Y+34, r24	; 0x22
     318:	01 c0       	rjmp	.+2      	; 0x31c <hd44780_outnibble+0x276>
  else
    x = 0;
     31a:	1a a2       	std	Y+34, r1	; 0x22
  CLR(PORT, HD44780_E);
     31c:	85 e2       	ldi	r24, 0x25	; 37
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	25 e2       	ldi	r18, 0x25	; 37
     322:	30 e0       	ldi	r19, 0x00	; 0
     324:	f9 01       	movw	r30, r18
     326:	20 81       	ld	r18, Z
     328:	27 7f       	andi	r18, 0xF7	; 247
     32a:	fc 01       	movw	r30, r24
     32c:	20 83       	st	Z, r18
    SET(PORT, HD44780_RS);
  else
    CLR(PORT, HD44780_RS);
  ASSIGN(PORT, HD44780_D4, n);
  (void)hd44780_pulse_e(false);
}
     32e:	00 00       	nop
     330:	a4 96       	adiw	r28, 0x24	; 36
     332:	0f b6       	in	r0, 0x3f	; 63
     334:	f8 94       	cli
     336:	de bf       	out	0x3e, r29	; 62
     338:	0f be       	out	0x3f, r0	; 63
     33a:	cd bf       	out	0x3d, r28	; 61
     33c:	df 91       	pop	r29
     33e:	cf 91       	pop	r28
     340:	08 95       	ret

00000342 <hd44780_outbyte>:
 * Send one byte to the LCD controller.  As we are in 4-bit mode, we
 * have to send two nibbles.
 */
void
hd44780_outbyte(uint8_t b, uint8_t rs)
{
     342:	cf 93       	push	r28
     344:	df 93       	push	r29
     346:	00 d0       	rcall	.+0      	; 0x348 <hd44780_outbyte+0x6>
     348:	cd b7       	in	r28, 0x3d	; 61
     34a:	de b7       	in	r29, 0x3e	; 62
     34c:	89 83       	std	Y+1, r24	; 0x01
     34e:	6a 83       	std	Y+2, r22	; 0x02
  hd44780_outnibble(b >> 4, rs);
     350:	89 81       	ldd	r24, Y+1	; 0x01
     352:	82 95       	swap	r24
     354:	8f 70       	andi	r24, 0x0F	; 15
     356:	6a 81       	ldd	r22, Y+2	; 0x02
     358:	0e 94 53 00 	call	0xa6	; 0xa6 <hd44780_outnibble>
  hd44780_outnibble(b & 0xf, rs);
     35c:	89 81       	ldd	r24, Y+1	; 0x01
     35e:	8f 70       	andi	r24, 0x0F	; 15
     360:	6a 81       	ldd	r22, Y+2	; 0x02
     362:	0e 94 53 00 	call	0xa6	; 0xa6 <hd44780_outnibble>
}
     366:	00 00       	nop
     368:	0f 90       	pop	r0
     36a:	0f 90       	pop	r0
     36c:	df 91       	pop	r29
     36e:	cf 91       	pop	r28
     370:	08 95       	ret

00000372 <hd44780_innibble>:
/*
 * Read one nibble from the LCD controller.
 */
static uint8_t
hd44780_innibble(uint8_t rs)
{
     372:	cf 93       	push	r28
     374:	df 93       	push	r29
     376:	cd b7       	in	r28, 0x3d	; 61
     378:	de b7       	in	r29, 0x3e	; 62
     37a:	a4 97       	sbiw	r28, 0x24	; 36
     37c:	0f b6       	in	r0, 0x3f	; 63
     37e:	f8 94       	cli
     380:	de bf       	out	0x3e, r29	; 62
     382:	0f be       	out	0x3f, r0	; 63
     384:	cd bf       	out	0x3d, r28	; 61
     386:	8c a3       	std	Y+36, r24	; 0x24
  uint8_t x;

  SET(PORT, HD44780_RW);
     388:	85 e2       	ldi	r24, 0x25	; 37
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	25 e2       	ldi	r18, 0x25	; 37
     38e:	30 e0       	ldi	r19, 0x00	; 0
     390:	f9 01       	movw	r30, r18
     392:	20 81       	ld	r18, Z
     394:	20 61       	ori	r18, 0x10	; 16
     396:	fc 01       	movw	r30, r24
     398:	20 83       	st	Z, r18
  ASSIGN(DDR, HD44780_D4, 0x00);
     39a:	87 e2       	ldi	r24, 0x27	; 39
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	27 e2       	ldi	r18, 0x27	; 39
     3a0:	30 e0       	ldi	r19, 0x00	; 0
     3a2:	f9 01       	movw	r30, r18
     3a4:	20 81       	ld	r18, Z
     3a6:	20 7f       	andi	r18, 0xF0	; 240
     3a8:	fc 01       	movw	r30, r24
     3aa:	20 83       	st	Z, r18
  if (rs)
     3ac:	8c a1       	ldd	r24, Y+36	; 0x24
     3ae:	88 23       	and	r24, r24
     3b0:	51 f0       	breq	.+20     	; 0x3c6 <hd44780_innibble+0x54>
    SET(PORT, HD44780_RS);
     3b2:	85 e2       	ldi	r24, 0x25	; 37
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	25 e2       	ldi	r18, 0x25	; 37
     3b8:	30 e0       	ldi	r19, 0x00	; 0
     3ba:	f9 01       	movw	r30, r18
     3bc:	20 81       	ld	r18, Z
     3be:	20 62       	ori	r18, 0x20	; 32
     3c0:	fc 01       	movw	r30, r24
     3c2:	20 83       	st	Z, r18
     3c4:	09 c0       	rjmp	.+18     	; 0x3d8 <hd44780_innibble+0x66>
  else
    CLR(PORT, HD44780_RS);
     3c6:	85 e2       	ldi	r24, 0x25	; 37
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	25 e2       	ldi	r18, 0x25	; 37
     3cc:	30 e0       	ldi	r19, 0x00	; 0
     3ce:	f9 01       	movw	r30, r18
     3d0:	20 81       	ld	r18, Z
     3d2:	2f 7d       	andi	r18, 0xDF	; 223
     3d4:	fc 01       	movw	r30, r24
     3d6:	20 83       	st	Z, r18
     3d8:	81 e0       	ldi	r24, 0x01	; 1
     3da:	8a 83       	std	Y+2, r24	; 0x02
static inline uint8_t
hd44780_pulse_e(bool readback)
{
  uint8_t x;

  SET(PORT, HD44780_E);
     3dc:	85 e2       	ldi	r24, 0x25	; 37
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	25 e2       	ldi	r18, 0x25	; 37
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	f9 01       	movw	r30, r18
     3e6:	20 81       	ld	r18, Z
     3e8:	28 60       	ori	r18, 0x08	; 8
     3ea:	fc 01       	movw	r30, r24
     3ec:	20 83       	st	Z, r18
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	a0 e0       	ldi	r26, 0x00	; 0
     3f4:	bf e3       	ldi	r27, 0x3F	; 63
     3f6:	8b 83       	std	Y+3, r24	; 0x03
     3f8:	9c 83       	std	Y+4, r25	; 0x04
     3fa:	ad 83       	std	Y+5, r26	; 0x05
     3fc:	be 83       	std	Y+6, r27	; 0x06
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     3fe:	2b ea       	ldi	r18, 0xAB	; 171
     400:	3a ea       	ldi	r19, 0xAA	; 170
     402:	4a e2       	ldi	r20, 0x2A	; 42
     404:	50 e4       	ldi	r21, 0x40	; 64
     406:	6b 81       	ldd	r22, Y+3	; 0x03
     408:	7c 81       	ldd	r23, Y+4	; 0x04
     40a:	8d 81       	ldd	r24, Y+5	; 0x05
     40c:	9e 81       	ldd	r25, Y+6	; 0x06
     40e:	0e 94 91 0b 	call	0x1722	; 0x1722 <__mulsf3>
     412:	dc 01       	movw	r26, r24
     414:	cb 01       	movw	r24, r22
     416:	8f 83       	std	Y+7, r24	; 0x07
     418:	98 87       	std	Y+8, r25	; 0x08
     41a:	a9 87       	std	Y+9, r26	; 0x09
     41c:	ba 87       	std	Y+10, r27	; 0x0a
	__tmp2 = ((F_CPU) / 4e6) * __us;
     41e:	8b 81       	ldd	r24, Y+3	; 0x03
     420:	9c 81       	ldd	r25, Y+4	; 0x04
     422:	ad 81       	ldd	r26, Y+5	; 0x05
     424:	be 81       	ldd	r27, Y+6	; 0x06
     426:	9c 01       	movw	r18, r24
     428:	ad 01       	movw	r20, r26
     42a:	bc 01       	movw	r22, r24
     42c:	cd 01       	movw	r24, r26
     42e:	0e 94 c1 09 	call	0x1382	; 0x1382 <__addsf3>
     432:	dc 01       	movw	r26, r24
     434:	cb 01       	movw	r24, r22
     436:	8b 87       	std	Y+11, r24	; 0x0b
     438:	9c 87       	std	Y+12, r25	; 0x0c
     43a:	ad 87       	std	Y+13, r26	; 0x0d
     43c:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
     43e:	20 e0       	ldi	r18, 0x00	; 0
     440:	30 e0       	ldi	r19, 0x00	; 0
     442:	40 e8       	ldi	r20, 0x80	; 128
     444:	5f e3       	ldi	r21, 0x3F	; 63
     446:	6f 81       	ldd	r22, Y+7	; 0x07
     448:	78 85       	ldd	r23, Y+8	; 0x08
     44a:	89 85       	ldd	r24, Y+9	; 0x09
     44c:	9a 85       	ldd	r25, Y+10	; 0x0a
     44e:	0e 94 2d 0a 	call	0x145a	; 0x145a <__cmpsf2>
     452:	88 23       	and	r24, r24
     454:	1c f4       	brge	.+6      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
		__ticks = 1;
     456:	81 e0       	ldi	r24, 0x01	; 1
     458:	8f 87       	std	Y+15, r24	; 0x0f
     45a:	b2 c0       	rjmp	.+356    	; 0x5c0 <__EEPROM_REGION_LENGTH__+0x1c0>
	else if (__tmp2 > 65535)
     45c:	20 e0       	ldi	r18, 0x00	; 0
     45e:	3f ef       	ldi	r19, 0xFF	; 255
     460:	4f e7       	ldi	r20, 0x7F	; 127
     462:	57 e4       	ldi	r21, 0x47	; 71
     464:	6b 85       	ldd	r22, Y+11	; 0x0b
     466:	7c 85       	ldd	r23, Y+12	; 0x0c
     468:	8d 85       	ldd	r24, Y+13	; 0x0d
     46a:	9e 85       	ldd	r25, Y+14	; 0x0e
     46c:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__gesf2>
     470:	18 16       	cp	r1, r24
     472:	0c f0       	brlt	.+2      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
     474:	7b c0       	rjmp	.+246    	; 0x56c <__EEPROM_REGION_LENGTH__+0x16c>
	{
		_delay_ms(__us / 1000.0);
     476:	20 e0       	ldi	r18, 0x00	; 0
     478:	30 e0       	ldi	r19, 0x00	; 0
     47a:	4a e7       	ldi	r20, 0x7A	; 122
     47c:	54 e4       	ldi	r21, 0x44	; 68
     47e:	6b 81       	ldd	r22, Y+3	; 0x03
     480:	7c 81       	ldd	r23, Y+4	; 0x04
     482:	8d 81       	ldd	r24, Y+5	; 0x05
     484:	9e 81       	ldd	r25, Y+6	; 0x06
     486:	0e 94 32 0a 	call	0x1464	; 0x1464 <__divsf3>
     48a:	dc 01       	movw	r26, r24
     48c:	cb 01       	movw	r24, r22
     48e:	88 8b       	std	Y+16, r24	; 0x10
     490:	99 8b       	std	Y+17, r25	; 0x11
     492:	aa 8b       	std	Y+18, r26	; 0x12
     494:	bb 8b       	std	Y+19, r27	; 0x13

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     496:	20 e0       	ldi	r18, 0x00	; 0
     498:	30 e0       	ldi	r19, 0x00	; 0
     49a:	4a ef       	ldi	r20, 0xFA	; 250
     49c:	54 e4       	ldi	r21, 0x44	; 68
     49e:	68 89       	ldd	r22, Y+16	; 0x10
     4a0:	79 89       	ldd	r23, Y+17	; 0x11
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	9b 89       	ldd	r25, Y+19	; 0x13
     4a6:	0e 94 91 0b 	call	0x1722	; 0x1722 <__mulsf3>
     4aa:	dc 01       	movw	r26, r24
     4ac:	cb 01       	movw	r24, r22
     4ae:	8c 8b       	std	Y+20, r24	; 0x14
     4b0:	9d 8b       	std	Y+21, r25	; 0x15
     4b2:	ae 8b       	std	Y+22, r26	; 0x16
     4b4:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
     4b6:	20 e0       	ldi	r18, 0x00	; 0
     4b8:	30 e0       	ldi	r19, 0x00	; 0
     4ba:	40 e8       	ldi	r20, 0x80	; 128
     4bc:	5f e3       	ldi	r21, 0x3F	; 63
     4be:	6c 89       	ldd	r22, Y+20	; 0x14
     4c0:	7d 89       	ldd	r23, Y+21	; 0x15
     4c2:	8e 89       	ldd	r24, Y+22	; 0x16
     4c4:	9f 89       	ldd	r25, Y+23	; 0x17
     4c6:	0e 94 2d 0a 	call	0x145a	; 0x145a <__cmpsf2>
     4ca:	88 23       	and	r24, r24
     4cc:	2c f4       	brge	.+10     	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
		__ticks = 1;
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	99 8f       	std	Y+25, r25	; 0x19
     4d4:	88 8f       	std	Y+24, r24	; 0x18
     4d6:	3f c0       	rjmp	.+126    	; 0x556 <__EEPROM_REGION_LENGTH__+0x156>
	else if (__tmp > 65535)
     4d8:	20 e0       	ldi	r18, 0x00	; 0
     4da:	3f ef       	ldi	r19, 0xFF	; 255
     4dc:	4f e7       	ldi	r20, 0x7F	; 127
     4de:	57 e4       	ldi	r21, 0x47	; 71
     4e0:	6c 89       	ldd	r22, Y+20	; 0x14
     4e2:	7d 89       	ldd	r23, Y+21	; 0x15
     4e4:	8e 89       	ldd	r24, Y+22	; 0x16
     4e6:	9f 89       	ldd	r25, Y+23	; 0x17
     4e8:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__gesf2>
     4ec:	18 16       	cp	r1, r24
     4ee:	4c f5       	brge	.+82     	; 0x542 <__EEPROM_REGION_LENGTH__+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4f0:	20 e0       	ldi	r18, 0x00	; 0
     4f2:	30 e0       	ldi	r19, 0x00	; 0
     4f4:	40 e2       	ldi	r20, 0x20	; 32
     4f6:	51 e4       	ldi	r21, 0x41	; 65
     4f8:	68 89       	ldd	r22, Y+16	; 0x10
     4fa:	79 89       	ldd	r23, Y+17	; 0x11
     4fc:	8a 89       	ldd	r24, Y+18	; 0x12
     4fe:	9b 89       	ldd	r25, Y+19	; 0x13
     500:	0e 94 91 0b 	call	0x1722	; 0x1722 <__mulsf3>
     504:	dc 01       	movw	r26, r24
     506:	cb 01       	movw	r24, r22
     508:	bc 01       	movw	r22, r24
     50a:	cd 01       	movw	r24, r26
     50c:	0e 94 ab 0a 	call	0x1556	; 0x1556 <__fixunssfsi>
     510:	dc 01       	movw	r26, r24
     512:	cb 01       	movw	r24, r22
     514:	99 8f       	std	Y+25, r25	; 0x19
     516:	88 8f       	std	Y+24, r24	; 0x18
     518:	0f c0       	rjmp	.+30     	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
     51a:	88 ec       	ldi	r24, 0xC8	; 200
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	9b 8f       	std	Y+27, r25	; 0x1b
     520:	8a 8f       	std	Y+26, r24	; 0x1a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     522:	8a 8d       	ldd	r24, Y+26	; 0x1a
     524:	9b 8d       	ldd	r25, Y+27	; 0x1b
     526:	01 97       	sbiw	r24, 0x01	; 1
     528:	f1 f7       	brne	.-4      	; 0x526 <__EEPROM_REGION_LENGTH__+0x126>
     52a:	9b 8f       	std	Y+27, r25	; 0x1b
     52c:	8a 8f       	std	Y+26, r24	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     52e:	88 8d       	ldd	r24, Y+24	; 0x18
     530:	99 8d       	ldd	r25, Y+25	; 0x19
     532:	01 97       	sbiw	r24, 0x01	; 1
     534:	99 8f       	std	Y+25, r25	; 0x19
     536:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     538:	88 8d       	ldd	r24, Y+24	; 0x18
     53a:	99 8d       	ldd	r25, Y+25	; 0x19
     53c:	89 2b       	or	r24, r25
     53e:	69 f7       	brne	.-38     	; 0x51a <__EEPROM_REGION_LENGTH__+0x11a>
     540:	3f c0       	rjmp	.+126    	; 0x5c0 <__EEPROM_REGION_LENGTH__+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     542:	6c 89       	ldd	r22, Y+20	; 0x14
     544:	7d 89       	ldd	r23, Y+21	; 0x15
     546:	8e 89       	ldd	r24, Y+22	; 0x16
     548:	9f 89       	ldd	r25, Y+23	; 0x17
     54a:	0e 94 ab 0a 	call	0x1556	; 0x1556 <__fixunssfsi>
     54e:	dc 01       	movw	r26, r24
     550:	cb 01       	movw	r24, r22
     552:	99 8f       	std	Y+25, r25	; 0x19
     554:	88 8f       	std	Y+24, r24	; 0x18
     556:	88 8d       	ldd	r24, Y+24	; 0x18
     558:	99 8d       	ldd	r25, Y+25	; 0x19
     55a:	9d 8f       	std	Y+29, r25	; 0x1d
     55c:	8c 8f       	std	Y+28, r24	; 0x1c
     55e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     560:	9d 8d       	ldd	r25, Y+29	; 0x1d
     562:	01 97       	sbiw	r24, 0x01	; 1
     564:	f1 f7       	brne	.-4      	; 0x562 <__EEPROM_REGION_LENGTH__+0x162>
     566:	9d 8f       	std	Y+29, r25	; 0x1d
     568:	8c 8f       	std	Y+28, r24	; 0x1c
     56a:	2a c0       	rjmp	.+84     	; 0x5c0 <__EEPROM_REGION_LENGTH__+0x1c0>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     56c:	20 e0       	ldi	r18, 0x00	; 0
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	4f e7       	ldi	r20, 0x7F	; 127
     572:	53 e4       	ldi	r21, 0x43	; 67
     574:	6f 81       	ldd	r22, Y+7	; 0x07
     576:	78 85       	ldd	r23, Y+8	; 0x08
     578:	89 85       	ldd	r24, Y+9	; 0x09
     57a:	9a 85       	ldd	r25, Y+10	; 0x0a
     57c:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__gesf2>
     580:	18 16       	cp	r1, r24
     582:	ac f4       	brge	.+42     	; 0x5ae <__EEPROM_REGION_LENGTH__+0x1ae>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     584:	6b 85       	ldd	r22, Y+11	; 0x0b
     586:	7c 85       	ldd	r23, Y+12	; 0x0c
     588:	8d 85       	ldd	r24, Y+13	; 0x0d
     58a:	9e 85       	ldd	r25, Y+14	; 0x0e
     58c:	0e 94 ab 0a 	call	0x1556	; 0x1556 <__fixunssfsi>
     590:	dc 01       	movw	r26, r24
     592:	cb 01       	movw	r24, r22
     594:	9f 8f       	std	Y+31, r25	; 0x1f
     596:	8e 8f       	std	Y+30, r24	; 0x1e
     598:	8e 8d       	ldd	r24, Y+30	; 0x1e
     59a:	9f 8d       	ldd	r25, Y+31	; 0x1f
     59c:	99 a3       	std	Y+33, r25	; 0x21
     59e:	88 a3       	std	Y+32, r24	; 0x20
     5a0:	88 a1       	ldd	r24, Y+32	; 0x20
     5a2:	99 a1       	ldd	r25, Y+33	; 0x21
     5a4:	01 97       	sbiw	r24, 0x01	; 1
     5a6:	f1 f7       	brne	.-4      	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
     5a8:	99 a3       	std	Y+33, r25	; 0x21
     5aa:	88 a3       	std	Y+32, r24	; 0x20
     5ac:	0f c0       	rjmp	.+30     	; 0x5cc <__EEPROM_REGION_LENGTH__+0x1cc>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     5ae:	6f 81       	ldd	r22, Y+7	; 0x07
     5b0:	78 85       	ldd	r23, Y+8	; 0x08
     5b2:	89 85       	ldd	r24, Y+9	; 0x09
     5b4:	9a 85       	ldd	r25, Y+10	; 0x0a
     5b6:	0e 94 ab 0a 	call	0x1556	; 0x1556 <__fixunssfsi>
     5ba:	dc 01       	movw	r26, r24
     5bc:	cb 01       	movw	r24, r22
     5be:	8f 87       	std	Y+15, r24	; 0x0f
     5c0:	8f 85       	ldd	r24, Y+15	; 0x0f
     5c2:	8a a3       	std	Y+34, r24	; 0x22
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     5c4:	8a a1       	ldd	r24, Y+34	; 0x22
     5c6:	8a 95       	dec	r24
     5c8:	f1 f7       	brne	.-4      	; 0x5c6 <__EEPROM_REGION_LENGTH__+0x1c6>
     5ca:	8a a3       	std	Y+34, r24	; 0x22
  __asm__ volatile("nop");
  __asm__ volatile("nop");
#    endif /* F_CPU > 2000000UL */
#  endif /* F_CPU > 1000000UL */
#endif
  if (readback)
     5cc:	8a 81       	ldd	r24, Y+2	; 0x02
     5ce:	88 23       	and	r24, r24
     5d0:	39 f0       	breq	.+14     	; 0x5e0 <__EEPROM_REGION_LENGTH__+0x1e0>
    x = READ(PIN, HD44780_D4);
     5d2:	86 e2       	ldi	r24, 0x26	; 38
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	fc 01       	movw	r30, r24
     5d8:	80 81       	ld	r24, Z
     5da:	8f 70       	andi	r24, 0x0F	; 15
     5dc:	8b a3       	std	Y+35, r24	; 0x23
     5de:	01 c0       	rjmp	.+2      	; 0x5e2 <__EEPROM_REGION_LENGTH__+0x1e2>
  else
    x = 0;
     5e0:	1b a2       	std	Y+35, r1	; 0x23
  CLR(PORT, HD44780_E);
     5e2:	85 e2       	ldi	r24, 0x25	; 37
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	25 e2       	ldi	r18, 0x25	; 37
     5e8:	30 e0       	ldi	r19, 0x00	; 0
     5ea:	f9 01       	movw	r30, r18
     5ec:	20 81       	ld	r18, Z
     5ee:	27 7f       	andi	r18, 0xF7	; 247
     5f0:	fc 01       	movw	r30, r24
     5f2:	20 83       	st	Z, r18

  return x;
     5f4:	8b a1       	ldd	r24, Y+35	; 0x23
  ASSIGN(DDR, HD44780_D4, 0x00);
  if (rs)
    SET(PORT, HD44780_RS);
  else
    CLR(PORT, HD44780_RS);
  x = hd44780_pulse_e(true);
     5f6:	89 83       	std	Y+1, r24	; 0x01
  ASSIGN(DDR, HD44780_D4, 0x0F);
     5f8:	87 e2       	ldi	r24, 0x27	; 39
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	27 e2       	ldi	r18, 0x27	; 39
     5fe:	30 e0       	ldi	r19, 0x00	; 0
     600:	f9 01       	movw	r30, r18
     602:	20 81       	ld	r18, Z
     604:	2f 60       	ori	r18, 0x0F	; 15
     606:	fc 01       	movw	r30, r24
     608:	20 83       	st	Z, r18
  CLR(PORT, HD44780_RW);
     60a:	85 e2       	ldi	r24, 0x25	; 37
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	25 e2       	ldi	r18, 0x25	; 37
     610:	30 e0       	ldi	r19, 0x00	; 0
     612:	f9 01       	movw	r30, r18
     614:	20 81       	ld	r18, Z
     616:	2f 7e       	andi	r18, 0xEF	; 239
     618:	fc 01       	movw	r30, r24
     61a:	20 83       	st	Z, r18

  return x;
     61c:	89 81       	ldd	r24, Y+1	; 0x01
}
     61e:	a4 96       	adiw	r28, 0x24	; 36
     620:	0f b6       	in	r0, 0x3f	; 63
     622:	f8 94       	cli
     624:	de bf       	out	0x3e, r29	; 62
     626:	0f be       	out	0x3f, r0	; 63
     628:	cd bf       	out	0x3d, r28	; 61
     62a:	df 91       	pop	r29
     62c:	cf 91       	pop	r28
     62e:	08 95       	ret

00000630 <hd44780_inbyte>:
/*
 * Read one byte (i.e. two nibbles) from the LCD controller.
 */
uint8_t
hd44780_inbyte(uint8_t rs)
{
     630:	cf 93       	push	r28
     632:	df 93       	push	r29
     634:	00 d0       	rcall	.+0      	; 0x636 <hd44780_inbyte+0x6>
     636:	cd b7       	in	r28, 0x3d	; 61
     638:	de b7       	in	r29, 0x3e	; 62
     63a:	8a 83       	std	Y+2, r24	; 0x02
  uint8_t x;

  x = hd44780_innibble(rs) << 4;
     63c:	8a 81       	ldd	r24, Y+2	; 0x02
     63e:	0e 94 b9 01 	call	0x372	; 0x372 <hd44780_innibble>
     642:	82 95       	swap	r24
     644:	80 7f       	andi	r24, 0xF0	; 240
     646:	89 83       	std	Y+1, r24	; 0x01
  x |= hd44780_innibble(rs);
     648:	8a 81       	ldd	r24, Y+2	; 0x02
     64a:	0e 94 b9 01 	call	0x372	; 0x372 <hd44780_innibble>
     64e:	98 2f       	mov	r25, r24
     650:	89 81       	ldd	r24, Y+1	; 0x01
     652:	89 2b       	or	r24, r25
     654:	89 83       	std	Y+1, r24	; 0x01

  return x;
     656:	89 81       	ldd	r24, Y+1	; 0x01
}
     658:	0f 90       	pop	r0
     65a:	0f 90       	pop	r0
     65c:	df 91       	pop	r29
     65e:	cf 91       	pop	r28
     660:	08 95       	ret

00000662 <hd44780_wait_ready>:
/*
 * Wait until the busy flag is cleared.
 */
void
hd44780_wait_ready(bool longwait)
{
     662:	cf 93       	push	r28
     664:	df 93       	push	r29
     666:	cd b7       	in	r28, 0x3d	; 61
     668:	de b7       	in	r29, 0x3e	; 62
     66a:	af 97       	sbiw	r28, 0x2f	; 47
     66c:	0f b6       	in	r0, 0x3f	; 63
     66e:	f8 94       	cli
     670:	de bf       	out	0x3e, r29	; 62
     672:	0f be       	out	0x3f, r0	; 63
     674:	cd bf       	out	0x3d, r28	; 61
     676:	8f a7       	std	Y+47, r24	; 0x2f
#if USE_BUSY_BIT
  while (hd44780_incmd() & HD44780_BUSYFLAG) ;
#else
  if (longwait)
     678:	8f a5       	ldd	r24, Y+47	; 0x2f
     67a:	88 23       	and	r24, r24
     67c:	09 f4       	brne	.+2      	; 0x680 <hd44780_wait_ready+0x1e>
     67e:	73 c0       	rjmp	.+230    	; 0x766 <hd44780_wait_ready+0x104>
     680:	8c e5       	ldi	r24, 0x5C	; 92
     682:	9f e8       	ldi	r25, 0x8F	; 143
     684:	a2 ec       	ldi	r26, 0xC2	; 194
     686:	bf e3       	ldi	r27, 0x3F	; 63
     688:	8d 83       	std	Y+5, r24	; 0x05
     68a:	9e 83       	std	Y+6, r25	; 0x06
     68c:	af 83       	std	Y+7, r26	; 0x07
     68e:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     690:	20 e0       	ldi	r18, 0x00	; 0
     692:	30 e0       	ldi	r19, 0x00	; 0
     694:	4a ef       	ldi	r20, 0xFA	; 250
     696:	54 e4       	ldi	r21, 0x44	; 68
     698:	6d 81       	ldd	r22, Y+5	; 0x05
     69a:	7e 81       	ldd	r23, Y+6	; 0x06
     69c:	8f 81       	ldd	r24, Y+7	; 0x07
     69e:	98 85       	ldd	r25, Y+8	; 0x08
     6a0:	0e 94 91 0b 	call	0x1722	; 0x1722 <__mulsf3>
     6a4:	dc 01       	movw	r26, r24
     6a6:	cb 01       	movw	r24, r22
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	9a 87       	std	Y+10, r25	; 0x0a
     6ac:	ab 87       	std	Y+11, r26	; 0x0b
     6ae:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     6b0:	20 e0       	ldi	r18, 0x00	; 0
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	40 e8       	ldi	r20, 0x80	; 128
     6b6:	5f e3       	ldi	r21, 0x3F	; 63
     6b8:	69 85       	ldd	r22, Y+9	; 0x09
     6ba:	7a 85       	ldd	r23, Y+10	; 0x0a
     6bc:	8b 85       	ldd	r24, Y+11	; 0x0b
     6be:	9c 85       	ldd	r25, Y+12	; 0x0c
     6c0:	0e 94 2d 0a 	call	0x145a	; 0x145a <__cmpsf2>
     6c4:	88 23       	and	r24, r24
     6c6:	2c f4       	brge	.+10     	; 0x6d2 <hd44780_wait_ready+0x70>
		__ticks = 1;
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	9e 87       	std	Y+14, r25	; 0x0e
     6ce:	8d 87       	std	Y+13, r24	; 0x0d
     6d0:	3f c0       	rjmp	.+126    	; 0x750 <hd44780_wait_ready+0xee>
	else if (__tmp > 65535)
     6d2:	20 e0       	ldi	r18, 0x00	; 0
     6d4:	3f ef       	ldi	r19, 0xFF	; 255
     6d6:	4f e7       	ldi	r20, 0x7F	; 127
     6d8:	57 e4       	ldi	r21, 0x47	; 71
     6da:	69 85       	ldd	r22, Y+9	; 0x09
     6dc:	7a 85       	ldd	r23, Y+10	; 0x0a
     6de:	8b 85       	ldd	r24, Y+11	; 0x0b
     6e0:	9c 85       	ldd	r25, Y+12	; 0x0c
     6e2:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__gesf2>
     6e6:	18 16       	cp	r1, r24
     6e8:	4c f5       	brge	.+82     	; 0x73c <hd44780_wait_ready+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6ea:	20 e0       	ldi	r18, 0x00	; 0
     6ec:	30 e0       	ldi	r19, 0x00	; 0
     6ee:	40 e2       	ldi	r20, 0x20	; 32
     6f0:	51 e4       	ldi	r21, 0x41	; 65
     6f2:	6d 81       	ldd	r22, Y+5	; 0x05
     6f4:	7e 81       	ldd	r23, Y+6	; 0x06
     6f6:	8f 81       	ldd	r24, Y+7	; 0x07
     6f8:	98 85       	ldd	r25, Y+8	; 0x08
     6fa:	0e 94 91 0b 	call	0x1722	; 0x1722 <__mulsf3>
     6fe:	dc 01       	movw	r26, r24
     700:	cb 01       	movw	r24, r22
     702:	bc 01       	movw	r22, r24
     704:	cd 01       	movw	r24, r26
     706:	0e 94 ab 0a 	call	0x1556	; 0x1556 <__fixunssfsi>
     70a:	dc 01       	movw	r26, r24
     70c:	cb 01       	movw	r24, r22
     70e:	9e 87       	std	Y+14, r25	; 0x0e
     710:	8d 87       	std	Y+13, r24	; 0x0d
     712:	0f c0       	rjmp	.+30     	; 0x732 <hd44780_wait_ready+0xd0>
     714:	88 ec       	ldi	r24, 0xC8	; 200
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	98 8b       	std	Y+16, r25	; 0x10
     71a:	8f 87       	std	Y+15, r24	; 0x0f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     71c:	8f 85       	ldd	r24, Y+15	; 0x0f
     71e:	98 89       	ldd	r25, Y+16	; 0x10
     720:	01 97       	sbiw	r24, 0x01	; 1
     722:	f1 f7       	brne	.-4      	; 0x720 <hd44780_wait_ready+0xbe>
     724:	98 8b       	std	Y+16, r25	; 0x10
     726:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     728:	8d 85       	ldd	r24, Y+13	; 0x0d
     72a:	9e 85       	ldd	r25, Y+14	; 0x0e
     72c:	01 97       	sbiw	r24, 0x01	; 1
     72e:	9e 87       	std	Y+14, r25	; 0x0e
     730:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     732:	8d 85       	ldd	r24, Y+13	; 0x0d
     734:	9e 85       	ldd	r25, Y+14	; 0x0e
     736:	89 2b       	or	r24, r25
     738:	69 f7       	brne	.-38     	; 0x714 <hd44780_wait_ready+0xb2>
    _delay_ms(1.52);
  else
    _delay_us(37);
#endif
}
     73a:	04 c1       	rjmp	.+520    	; 0x944 <__stack+0x45>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     73c:	69 85       	ldd	r22, Y+9	; 0x09
     73e:	7a 85       	ldd	r23, Y+10	; 0x0a
     740:	8b 85       	ldd	r24, Y+11	; 0x0b
     742:	9c 85       	ldd	r25, Y+12	; 0x0c
     744:	0e 94 ab 0a 	call	0x1556	; 0x1556 <__fixunssfsi>
     748:	dc 01       	movw	r26, r24
     74a:	cb 01       	movw	r24, r22
     74c:	9e 87       	std	Y+14, r25	; 0x0e
     74e:	8d 87       	std	Y+13, r24	; 0x0d
     750:	8d 85       	ldd	r24, Y+13	; 0x0d
     752:	9e 85       	ldd	r25, Y+14	; 0x0e
     754:	9a 8b       	std	Y+18, r25	; 0x12
     756:	89 8b       	std	Y+17, r24	; 0x11
     758:	89 89       	ldd	r24, Y+17	; 0x11
     75a:	9a 89       	ldd	r25, Y+18	; 0x12
     75c:	01 97       	sbiw	r24, 0x01	; 1
     75e:	f1 f7       	brne	.-4      	; 0x75c <hd44780_wait_ready+0xfa>
     760:	9a 8b       	std	Y+18, r25	; 0x12
     762:	89 8b       	std	Y+17, r24	; 0x11
     764:	ef c0       	rjmp	.+478    	; 0x944 <__stack+0x45>
     766:	80 e0       	ldi	r24, 0x00	; 0
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	a4 e1       	ldi	r26, 0x14	; 20
     76c:	b2 e4       	ldi	r27, 0x42	; 66
     76e:	89 83       	std	Y+1, r24	; 0x01
     770:	9a 83       	std	Y+2, r25	; 0x02
     772:	ab 83       	std	Y+3, r26	; 0x03
     774:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     776:	2b ea       	ldi	r18, 0xAB	; 171
     778:	3a ea       	ldi	r19, 0xAA	; 170
     77a:	4a e2       	ldi	r20, 0x2A	; 42
     77c:	50 e4       	ldi	r21, 0x40	; 64
     77e:	69 81       	ldd	r22, Y+1	; 0x01
     780:	7a 81       	ldd	r23, Y+2	; 0x02
     782:	8b 81       	ldd	r24, Y+3	; 0x03
     784:	9c 81       	ldd	r25, Y+4	; 0x04
     786:	0e 94 91 0b 	call	0x1722	; 0x1722 <__mulsf3>
     78a:	dc 01       	movw	r26, r24
     78c:	cb 01       	movw	r24, r22
     78e:	8b 8b       	std	Y+19, r24	; 0x13
     790:	9c 8b       	std	Y+20, r25	; 0x14
     792:	ad 8b       	std	Y+21, r26	; 0x15
     794:	be 8b       	std	Y+22, r27	; 0x16
	__tmp2 = ((F_CPU) / 4e6) * __us;
     796:	89 81       	ldd	r24, Y+1	; 0x01
     798:	9a 81       	ldd	r25, Y+2	; 0x02
     79a:	ab 81       	ldd	r26, Y+3	; 0x03
     79c:	bc 81       	ldd	r27, Y+4	; 0x04
     79e:	9c 01       	movw	r18, r24
     7a0:	ad 01       	movw	r20, r26
     7a2:	bc 01       	movw	r22, r24
     7a4:	cd 01       	movw	r24, r26
     7a6:	0e 94 c1 09 	call	0x1382	; 0x1382 <__addsf3>
     7aa:	dc 01       	movw	r26, r24
     7ac:	cb 01       	movw	r24, r22
     7ae:	8f 8b       	std	Y+23, r24	; 0x17
     7b0:	98 8f       	std	Y+24, r25	; 0x18
     7b2:	a9 8f       	std	Y+25, r26	; 0x19
     7b4:	ba 8f       	std	Y+26, r27	; 0x1a
	if (__tmp < 1.0)
     7b6:	20 e0       	ldi	r18, 0x00	; 0
     7b8:	30 e0       	ldi	r19, 0x00	; 0
     7ba:	40 e8       	ldi	r20, 0x80	; 128
     7bc:	5f e3       	ldi	r21, 0x3F	; 63
     7be:	6b 89       	ldd	r22, Y+19	; 0x13
     7c0:	7c 89       	ldd	r23, Y+20	; 0x14
     7c2:	8d 89       	ldd	r24, Y+21	; 0x15
     7c4:	9e 89       	ldd	r25, Y+22	; 0x16
     7c6:	0e 94 2d 0a 	call	0x145a	; 0x145a <__cmpsf2>
     7ca:	88 23       	and	r24, r24
     7cc:	1c f4       	brge	.+6      	; 0x7d4 <hd44780_wait_ready+0x172>
		__ticks = 1;
     7ce:	81 e0       	ldi	r24, 0x01	; 1
     7d0:	8b 8f       	std	Y+27, r24	; 0x1b
     7d2:	b2 c0       	rjmp	.+356    	; 0x938 <__stack+0x39>
	else if (__tmp2 > 65535)
     7d4:	20 e0       	ldi	r18, 0x00	; 0
     7d6:	3f ef       	ldi	r19, 0xFF	; 255
     7d8:	4f e7       	ldi	r20, 0x7F	; 127
     7da:	57 e4       	ldi	r21, 0x47	; 71
     7dc:	6f 89       	ldd	r22, Y+23	; 0x17
     7de:	78 8d       	ldd	r23, Y+24	; 0x18
     7e0:	89 8d       	ldd	r24, Y+25	; 0x19
     7e2:	9a 8d       	ldd	r25, Y+26	; 0x1a
     7e4:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__gesf2>
     7e8:	18 16       	cp	r1, r24
     7ea:	0c f0       	brlt	.+2      	; 0x7ee <hd44780_wait_ready+0x18c>
     7ec:	7b c0       	rjmp	.+246    	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
	{
		_delay_ms(__us / 1000.0);
     7ee:	20 e0       	ldi	r18, 0x00	; 0
     7f0:	30 e0       	ldi	r19, 0x00	; 0
     7f2:	4a e7       	ldi	r20, 0x7A	; 122
     7f4:	54 e4       	ldi	r21, 0x44	; 68
     7f6:	69 81       	ldd	r22, Y+1	; 0x01
     7f8:	7a 81       	ldd	r23, Y+2	; 0x02
     7fa:	8b 81       	ldd	r24, Y+3	; 0x03
     7fc:	9c 81       	ldd	r25, Y+4	; 0x04
     7fe:	0e 94 32 0a 	call	0x1464	; 0x1464 <__divsf3>
     802:	dc 01       	movw	r26, r24
     804:	cb 01       	movw	r24, r22
     806:	8c 8f       	std	Y+28, r24	; 0x1c
     808:	9d 8f       	std	Y+29, r25	; 0x1d
     80a:	ae 8f       	std	Y+30, r26	; 0x1e
     80c:	bf 8f       	std	Y+31, r27	; 0x1f

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     80e:	20 e0       	ldi	r18, 0x00	; 0
     810:	30 e0       	ldi	r19, 0x00	; 0
     812:	4a ef       	ldi	r20, 0xFA	; 250
     814:	54 e4       	ldi	r21, 0x44	; 68
     816:	6c 8d       	ldd	r22, Y+28	; 0x1c
     818:	7d 8d       	ldd	r23, Y+29	; 0x1d
     81a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     81c:	9f 8d       	ldd	r25, Y+31	; 0x1f
     81e:	0e 94 91 0b 	call	0x1722	; 0x1722 <__mulsf3>
     822:	dc 01       	movw	r26, r24
     824:	cb 01       	movw	r24, r22
     826:	88 a3       	std	Y+32, r24	; 0x20
     828:	99 a3       	std	Y+33, r25	; 0x21
     82a:	aa a3       	std	Y+34, r26	; 0x22
     82c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
     82e:	20 e0       	ldi	r18, 0x00	; 0
     830:	30 e0       	ldi	r19, 0x00	; 0
     832:	40 e8       	ldi	r20, 0x80	; 128
     834:	5f e3       	ldi	r21, 0x3F	; 63
     836:	68 a1       	ldd	r22, Y+32	; 0x20
     838:	79 a1       	ldd	r23, Y+33	; 0x21
     83a:	8a a1       	ldd	r24, Y+34	; 0x22
     83c:	9b a1       	ldd	r25, Y+35	; 0x23
     83e:	0e 94 2d 0a 	call	0x145a	; 0x145a <__cmpsf2>
     842:	88 23       	and	r24, r24
     844:	2c f4       	brge	.+10     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
		__ticks = 1;
     846:	81 e0       	ldi	r24, 0x01	; 1
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	9d a3       	std	Y+37, r25	; 0x25
     84c:	8c a3       	std	Y+36, r24	; 0x24
     84e:	3f c0       	rjmp	.+126    	; 0x8ce <__DATA_REGION_LENGTH__+0xce>
	else if (__tmp > 65535)
     850:	20 e0       	ldi	r18, 0x00	; 0
     852:	3f ef       	ldi	r19, 0xFF	; 255
     854:	4f e7       	ldi	r20, 0x7F	; 127
     856:	57 e4       	ldi	r21, 0x47	; 71
     858:	68 a1       	ldd	r22, Y+32	; 0x20
     85a:	79 a1       	ldd	r23, Y+33	; 0x21
     85c:	8a a1       	ldd	r24, Y+34	; 0x22
     85e:	9b a1       	ldd	r25, Y+35	; 0x23
     860:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__gesf2>
     864:	18 16       	cp	r1, r24
     866:	4c f5       	brge	.+82     	; 0x8ba <__DATA_REGION_LENGTH__+0xba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     868:	20 e0       	ldi	r18, 0x00	; 0
     86a:	30 e0       	ldi	r19, 0x00	; 0
     86c:	40 e2       	ldi	r20, 0x20	; 32
     86e:	51 e4       	ldi	r21, 0x41	; 65
     870:	6c 8d       	ldd	r22, Y+28	; 0x1c
     872:	7d 8d       	ldd	r23, Y+29	; 0x1d
     874:	8e 8d       	ldd	r24, Y+30	; 0x1e
     876:	9f 8d       	ldd	r25, Y+31	; 0x1f
     878:	0e 94 91 0b 	call	0x1722	; 0x1722 <__mulsf3>
     87c:	dc 01       	movw	r26, r24
     87e:	cb 01       	movw	r24, r22
     880:	bc 01       	movw	r22, r24
     882:	cd 01       	movw	r24, r26
     884:	0e 94 ab 0a 	call	0x1556	; 0x1556 <__fixunssfsi>
     888:	dc 01       	movw	r26, r24
     88a:	cb 01       	movw	r24, r22
     88c:	9d a3       	std	Y+37, r25	; 0x25
     88e:	8c a3       	std	Y+36, r24	; 0x24
     890:	0f c0       	rjmp	.+30     	; 0x8b0 <__DATA_REGION_LENGTH__+0xb0>
     892:	88 ec       	ldi	r24, 0xC8	; 200
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	9f a3       	std	Y+39, r25	; 0x27
     898:	8e a3       	std	Y+38, r24	; 0x26
     89a:	8e a1       	ldd	r24, Y+38	; 0x26
     89c:	9f a1       	ldd	r25, Y+39	; 0x27
     89e:	01 97       	sbiw	r24, 0x01	; 1
     8a0:	f1 f7       	brne	.-4      	; 0x89e <__DATA_REGION_LENGTH__+0x9e>
     8a2:	9f a3       	std	Y+39, r25	; 0x27
     8a4:	8e a3       	std	Y+38, r24	; 0x26
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8a6:	8c a1       	ldd	r24, Y+36	; 0x24
     8a8:	9d a1       	ldd	r25, Y+37	; 0x25
     8aa:	01 97       	sbiw	r24, 0x01	; 1
     8ac:	9d a3       	std	Y+37, r25	; 0x25
     8ae:	8c a3       	std	Y+36, r24	; 0x24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8b0:	8c a1       	ldd	r24, Y+36	; 0x24
     8b2:	9d a1       	ldd	r25, Y+37	; 0x25
     8b4:	89 2b       	or	r24, r25
     8b6:	69 f7       	brne	.-38     	; 0x892 <__DATA_REGION_LENGTH__+0x92>
     8b8:	3f c0       	rjmp	.+126    	; 0x938 <__stack+0x39>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8ba:	68 a1       	ldd	r22, Y+32	; 0x20
     8bc:	79 a1       	ldd	r23, Y+33	; 0x21
     8be:	8a a1       	ldd	r24, Y+34	; 0x22
     8c0:	9b a1       	ldd	r25, Y+35	; 0x23
     8c2:	0e 94 ab 0a 	call	0x1556	; 0x1556 <__fixunssfsi>
     8c6:	dc 01       	movw	r26, r24
     8c8:	cb 01       	movw	r24, r22
     8ca:	9d a3       	std	Y+37, r25	; 0x25
     8cc:	8c a3       	std	Y+36, r24	; 0x24
     8ce:	8c a1       	ldd	r24, Y+36	; 0x24
     8d0:	9d a1       	ldd	r25, Y+37	; 0x25
     8d2:	99 a7       	std	Y+41, r25	; 0x29
     8d4:	88 a7       	std	Y+40, r24	; 0x28
     8d6:	88 a5       	ldd	r24, Y+40	; 0x28
     8d8:	99 a5       	ldd	r25, Y+41	; 0x29
     8da:	01 97       	sbiw	r24, 0x01	; 1
     8dc:	f1 f7       	brne	.-4      	; 0x8da <__DATA_REGION_LENGTH__+0xda>
     8de:	99 a7       	std	Y+41, r25	; 0x29
     8e0:	88 a7       	std	Y+40, r24	; 0x28
     8e2:	2a c0       	rjmp	.+84     	; 0x938 <__stack+0x39>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     8e4:	20 e0       	ldi	r18, 0x00	; 0
     8e6:	30 e0       	ldi	r19, 0x00	; 0
     8e8:	4f e7       	ldi	r20, 0x7F	; 127
     8ea:	53 e4       	ldi	r21, 0x43	; 67
     8ec:	6b 89       	ldd	r22, Y+19	; 0x13
     8ee:	7c 89       	ldd	r23, Y+20	; 0x14
     8f0:	8d 89       	ldd	r24, Y+21	; 0x15
     8f2:	9e 89       	ldd	r25, Y+22	; 0x16
     8f4:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__gesf2>
     8f8:	18 16       	cp	r1, r24
     8fa:	ac f4       	brge	.+42     	; 0x926 <__stack+0x27>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     8fc:	6f 89       	ldd	r22, Y+23	; 0x17
     8fe:	78 8d       	ldd	r23, Y+24	; 0x18
     900:	89 8d       	ldd	r24, Y+25	; 0x19
     902:	9a 8d       	ldd	r25, Y+26	; 0x1a
     904:	0e 94 ab 0a 	call	0x1556	; 0x1556 <__fixunssfsi>
     908:	dc 01       	movw	r26, r24
     90a:	cb 01       	movw	r24, r22
     90c:	9b a7       	std	Y+43, r25	; 0x2b
     90e:	8a a7       	std	Y+42, r24	; 0x2a
     910:	8a a5       	ldd	r24, Y+42	; 0x2a
     912:	9b a5       	ldd	r25, Y+43	; 0x2b
     914:	9d a7       	std	Y+45, r25	; 0x2d
     916:	8c a7       	std	Y+44, r24	; 0x2c
     918:	8c a5       	ldd	r24, Y+44	; 0x2c
     91a:	9d a5       	ldd	r25, Y+45	; 0x2d
     91c:	01 97       	sbiw	r24, 0x01	; 1
     91e:	f1 f7       	brne	.-4      	; 0x91c <__stack+0x1d>
     920:	9d a7       	std	Y+45, r25	; 0x2d
     922:	8c a7       	std	Y+44, r24	; 0x2c
     924:	0f c0       	rjmp	.+30     	; 0x944 <__stack+0x45>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     926:	6b 89       	ldd	r22, Y+19	; 0x13
     928:	7c 89       	ldd	r23, Y+20	; 0x14
     92a:	8d 89       	ldd	r24, Y+21	; 0x15
     92c:	9e 89       	ldd	r25, Y+22	; 0x16
     92e:	0e 94 ab 0a 	call	0x1556	; 0x1556 <__fixunssfsi>
     932:	dc 01       	movw	r26, r24
     934:	cb 01       	movw	r24, r22
     936:	8b 8f       	std	Y+27, r24	; 0x1b
     938:	8b 8d       	ldd	r24, Y+27	; 0x1b
     93a:	8e a7       	std	Y+46, r24	; 0x2e
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     93c:	8e a5       	ldd	r24, Y+46	; 0x2e
     93e:	8a 95       	dec	r24
     940:	f1 f7       	brne	.-4      	; 0x93e <__stack+0x3f>
     942:	8e a7       	std	Y+46, r24	; 0x2e
     944:	00 00       	nop
     946:	af 96       	adiw	r28, 0x2f	; 47
     948:	0f b6       	in	r0, 0x3f	; 63
     94a:	f8 94       	cli
     94c:	de bf       	out	0x3e, r29	; 62
     94e:	0f be       	out	0x3f, r0	; 63
     950:	cd bf       	out	0x3d, r28	; 61
     952:	df 91       	pop	r29
     954:	cf 91       	pop	r28
     956:	08 95       	ret

00000958 <hd44780_init>:
 * This is the only area where timed waits are really needed as
 * the busy flag cannot be probed initially.
 */
void
hd44780_init(void)
{
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	cf 93       	push	r28
     95e:	df 93       	push	r29
     960:	cd b7       	in	r28, 0x3d	; 61
     962:	de b7       	in	r29, 0x3e	; 62
     964:	ca 54       	subi	r28, 0x4A	; 74
     966:	d1 09       	sbc	r29, r1
     968:	0f b6       	in	r0, 0x3f	; 63
     96a:	f8 94       	cli
     96c:	de bf       	out	0x3e, r29	; 62
     96e:	0f be       	out	0x3f, r0	; 63
     970:	cd bf       	out	0x3d, r28	; 61
  SET(DDR, HD44780_RS);
     972:	84 e2       	ldi	r24, 0x24	; 36
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	24 e2       	ldi	r18, 0x24	; 36
     978:	30 e0       	ldi	r19, 0x00	; 0
     97a:	f9 01       	movw	r30, r18
     97c:	20 81       	ld	r18, Z
     97e:	20 62       	ori	r18, 0x20	; 32
     980:	fc 01       	movw	r30, r24
     982:	20 83       	st	Z, r18
  SET(DDR, HD44780_RW);
     984:	84 e2       	ldi	r24, 0x24	; 36
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	24 e2       	ldi	r18, 0x24	; 36
     98a:	30 e0       	ldi	r19, 0x00	; 0
     98c:	f9 01       	movw	r30, r18
     98e:	20 81       	ld	r18, Z
     990:	20 61       	ori	r18, 0x10	; 16
     992:	fc 01       	movw	r30, r24
     994:	20 83       	st	Z, r18
  SET(DDR, HD44780_E);
     996:	84 e2       	ldi	r24, 0x24	; 36
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	24 e2       	ldi	r18, 0x24	; 36
     99c:	30 e0       	ldi	r19, 0x00	; 0
     99e:	f9 01       	movw	r30, r18
     9a0:	20 81       	ld	r18, Z
     9a2:	28 60       	ori	r18, 0x08	; 8
     9a4:	fc 01       	movw	r30, r24
     9a6:	20 83       	st	Z, r18
  ASSIGN(DDR, HD44780_D4, 0x0F);
     9a8:	87 e2       	ldi	r24, 0x27	; 39
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	27 e2       	ldi	r18, 0x27	; 39
     9ae:	30 e0       	ldi	r19, 0x00	; 0
     9b0:	f9 01       	movw	r30, r18
     9b2:	20 81       	ld	r18, Z
     9b4:	2f 60       	ori	r18, 0x0F	; 15
     9b6:	fc 01       	movw	r30, r24
     9b8:	20 83       	st	Z, r18
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	a0 e7       	ldi	r26, 0x70	; 112
     9c0:	b1 e4       	ldi	r27, 0x41	; 65
     9c2:	89 83       	std	Y+1, r24	; 0x01
     9c4:	9a 83       	std	Y+2, r25	; 0x02
     9c6:	ab 83       	std	Y+3, r26	; 0x03
     9c8:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     9ca:	8e 01       	movw	r16, r28
     9cc:	0f 5b       	subi	r16, 0xBF	; 191
     9ce:	1f 4f       	sbci	r17, 0xFF	; 255
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	4a ef       	ldi	r20, 0xFA	; 250
     9d6:	54 e4       	ldi	r21, 0x44	; 68
     9d8:	69 81       	ldd	r22, Y+1	; 0x01
     9da:	7a 81       	ldd	r23, Y+2	; 0x02
     9dc:	8b 81       	ldd	r24, Y+3	; 0x03
     9de:	9c 81       	ldd	r25, Y+4	; 0x04
     9e0:	0e 94 91 0b 	call	0x1722	; 0x1722 <__mulsf3>
     9e4:	dc 01       	movw	r26, r24
     9e6:	cb 01       	movw	r24, r22
     9e8:	f8 01       	movw	r30, r16
     9ea:	80 83       	st	Z, r24
     9ec:	91 83       	std	Z+1, r25	; 0x01
     9ee:	a2 83       	std	Z+2, r26	; 0x02
     9f0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     9f2:	ce 01       	movw	r24, r28
     9f4:	8f 5b       	subi	r24, 0xBF	; 191
     9f6:	9f 4f       	sbci	r25, 0xFF	; 255
     9f8:	20 e0       	ldi	r18, 0x00	; 0
     9fa:	30 e0       	ldi	r19, 0x00	; 0
     9fc:	40 e8       	ldi	r20, 0x80	; 128
     9fe:	5f e3       	ldi	r21, 0x3F	; 63
     a00:	fc 01       	movw	r30, r24
     a02:	60 81       	ld	r22, Z
     a04:	71 81       	ldd	r23, Z+1	; 0x01
     a06:	82 81       	ldd	r24, Z+2	; 0x02
     a08:	93 81       	ldd	r25, Z+3	; 0x03
     a0a:	0e 94 2d 0a 	call	0x145a	; 0x145a <__cmpsf2>
     a0e:	88 23       	and	r24, r24
     a10:	4c f4       	brge	.+18     	; 0xa24 <hd44780_init+0xcc>
		__ticks = 1;
     a12:	ce 01       	movw	r24, r28
     a14:	8b 5b       	subi	r24, 0xBB	; 187
     a16:	9f 4f       	sbci	r25, 0xFF	; 255
     a18:	21 e0       	ldi	r18, 0x01	; 1
     a1a:	30 e0       	ldi	r19, 0x00	; 0
     a1c:	fc 01       	movw	r30, r24
     a1e:	31 83       	std	Z+1, r19	; 0x01
     a20:	20 83       	st	Z, r18
     a22:	69 c0       	rjmp	.+210    	; 0xaf6 <hd44780_init+0x19e>
	else if (__tmp > 65535)
     a24:	ce 01       	movw	r24, r28
     a26:	8f 5b       	subi	r24, 0xBF	; 191
     a28:	9f 4f       	sbci	r25, 0xFF	; 255
     a2a:	20 e0       	ldi	r18, 0x00	; 0
     a2c:	3f ef       	ldi	r19, 0xFF	; 255
     a2e:	4f e7       	ldi	r20, 0x7F	; 127
     a30:	57 e4       	ldi	r21, 0x47	; 71
     a32:	fc 01       	movw	r30, r24
     a34:	60 81       	ld	r22, Z
     a36:	71 81       	ldd	r23, Z+1	; 0x01
     a38:	82 81       	ldd	r24, Z+2	; 0x02
     a3a:	93 81       	ldd	r25, Z+3	; 0x03
     a3c:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__gesf2>
     a40:	18 16       	cp	r1, r24
     a42:	0c f0       	brlt	.+2      	; 0xa46 <hd44780_init+0xee>
     a44:	46 c0       	rjmp	.+140    	; 0xad2 <hd44780_init+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e2       	ldi	r20, 0x20	; 32
     a4c:	51 e4       	ldi	r21, 0x41	; 65
     a4e:	69 81       	ldd	r22, Y+1	; 0x01
     a50:	7a 81       	ldd	r23, Y+2	; 0x02
     a52:	8b 81       	ldd	r24, Y+3	; 0x03
     a54:	9c 81       	ldd	r25, Y+4	; 0x04
     a56:	0e 94 91 0b 	call	0x1722	; 0x1722 <__mulsf3>
     a5a:	dc 01       	movw	r26, r24
     a5c:	cb 01       	movw	r24, r22
     a5e:	8e 01       	movw	r16, r28
     a60:	0b 5b       	subi	r16, 0xBB	; 187
     a62:	1f 4f       	sbci	r17, 0xFF	; 255
     a64:	bc 01       	movw	r22, r24
     a66:	cd 01       	movw	r24, r26
     a68:	0e 94 ab 0a 	call	0x1556	; 0x1556 <__fixunssfsi>
     a6c:	dc 01       	movw	r26, r24
     a6e:	cb 01       	movw	r24, r22
     a70:	f8 01       	movw	r30, r16
     a72:	91 83       	std	Z+1, r25	; 0x01
     a74:	80 83       	st	Z, r24
     a76:	24 c0       	rjmp	.+72     	; 0xac0 <hd44780_init+0x168>
     a78:	ce 01       	movw	r24, r28
     a7a:	89 5b       	subi	r24, 0xB9	; 185
     a7c:	9f 4f       	sbci	r25, 0xFF	; 255
     a7e:	28 ec       	ldi	r18, 0xC8	; 200
     a80:	30 e0       	ldi	r19, 0x00	; 0
     a82:	fc 01       	movw	r30, r24
     a84:	31 83       	std	Z+1, r19	; 0x01
     a86:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     a88:	ce 01       	movw	r24, r28
     a8a:	89 5b       	subi	r24, 0xB9	; 185
     a8c:	9f 4f       	sbci	r25, 0xFF	; 255
     a8e:	fc 01       	movw	r30, r24
     a90:	80 81       	ld	r24, Z
     a92:	91 81       	ldd	r25, Z+1	; 0x01
     a94:	01 97       	sbiw	r24, 0x01	; 1
     a96:	f1 f7       	brne	.-4      	; 0xa94 <hd44780_init+0x13c>
     a98:	9e 01       	movw	r18, r28
     a9a:	29 5b       	subi	r18, 0xB9	; 185
     a9c:	3f 4f       	sbci	r19, 0xFF	; 255
     a9e:	f9 01       	movw	r30, r18
     aa0:	91 83       	std	Z+1, r25	; 0x01
     aa2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     aa4:	ce 01       	movw	r24, r28
     aa6:	8b 5b       	subi	r24, 0xBB	; 187
     aa8:	9f 4f       	sbci	r25, 0xFF	; 255
     aaa:	9e 01       	movw	r18, r28
     aac:	2b 5b       	subi	r18, 0xBB	; 187
     aae:	3f 4f       	sbci	r19, 0xFF	; 255
     ab0:	f9 01       	movw	r30, r18
     ab2:	20 81       	ld	r18, Z
     ab4:	31 81       	ldd	r19, Z+1	; 0x01
     ab6:	21 50       	subi	r18, 0x01	; 1
     ab8:	31 09       	sbc	r19, r1
     aba:	fc 01       	movw	r30, r24
     abc:	31 83       	std	Z+1, r19	; 0x01
     abe:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ac0:	ce 01       	movw	r24, r28
     ac2:	8b 5b       	subi	r24, 0xBB	; 187
     ac4:	9f 4f       	sbci	r25, 0xFF	; 255
     ac6:	fc 01       	movw	r30, r24
     ac8:	80 81       	ld	r24, Z
     aca:	91 81       	ldd	r25, Z+1	; 0x01
     acc:	89 2b       	or	r24, r25
     ace:	a1 f6       	brne	.-88     	; 0xa78 <hd44780_init+0x120>
     ad0:	2c c0       	rjmp	.+88     	; 0xb2a <hd44780_init+0x1d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ad2:	8e 01       	movw	r16, r28
     ad4:	0b 5b       	subi	r16, 0xBB	; 187
     ad6:	1f 4f       	sbci	r17, 0xFF	; 255
     ad8:	ce 01       	movw	r24, r28
     ada:	8f 5b       	subi	r24, 0xBF	; 191
     adc:	9f 4f       	sbci	r25, 0xFF	; 255
     ade:	fc 01       	movw	r30, r24
     ae0:	60 81       	ld	r22, Z
     ae2:	71 81       	ldd	r23, Z+1	; 0x01
     ae4:	82 81       	ldd	r24, Z+2	; 0x02
     ae6:	93 81       	ldd	r25, Z+3	; 0x03
     ae8:	0e 94 ab 0a 	call	0x1556	; 0x1556 <__fixunssfsi>
     aec:	dc 01       	movw	r26, r24
     aee:	cb 01       	movw	r24, r22
     af0:	f8 01       	movw	r30, r16
     af2:	91 83       	std	Z+1, r25	; 0x01
     af4:	80 83       	st	Z, r24
     af6:	ce 01       	movw	r24, r28
     af8:	87 5b       	subi	r24, 0xB7	; 183
     afa:	9f 4f       	sbci	r25, 0xFF	; 255
     afc:	9e 01       	movw	r18, r28
     afe:	2b 5b       	subi	r18, 0xBB	; 187
     b00:	3f 4f       	sbci	r19, 0xFF	; 255
     b02:	f9 01       	movw	r30, r18
     b04:	20 81       	ld	r18, Z
     b06:	31 81       	ldd	r19, Z+1	; 0x01
     b08:	fc 01       	movw	r30, r24
     b0a:	31 83       	std	Z+1, r19	; 0x01
     b0c:	20 83       	st	Z, r18
     b0e:	ce 01       	movw	r24, r28
     b10:	87 5b       	subi	r24, 0xB7	; 183
     b12:	9f 4f       	sbci	r25, 0xFF	; 255
     b14:	fc 01       	movw	r30, r24
     b16:	80 81       	ld	r24, Z
     b18:	91 81       	ldd	r25, Z+1	; 0x01
     b1a:	01 97       	sbiw	r24, 0x01	; 1
     b1c:	f1 f7       	brne	.-4      	; 0xb1a <hd44780_init+0x1c2>
     b1e:	9e 01       	movw	r18, r28
     b20:	27 5b       	subi	r18, 0xB7	; 183
     b22:	3f 4f       	sbci	r19, 0xFF	; 255
     b24:	f9 01       	movw	r30, r18
     b26:	91 83       	std	Z+1, r25	; 0x01
     b28:	80 83       	st	Z, r24

  _delay_ms(15);		/* 40 ms needed for Vcc = 2.7 V */
  hd44780_outnibble(HD44780_FNSET(1, 0, 0) >> 4, 0);
     b2a:	60 e0       	ldi	r22, 0x00	; 0
     b2c:	83 e0       	ldi	r24, 0x03	; 3
     b2e:	0e 94 53 00 	call	0xa6	; 0xa6 <hd44780_outnibble>
     b32:	83 e3       	ldi	r24, 0x33	; 51
     b34:	93 e3       	ldi	r25, 0x33	; 51
     b36:	a3 e8       	ldi	r26, 0x83	; 131
     b38:	b0 e4       	ldi	r27, 0x40	; 64
     b3a:	8d 83       	std	Y+5, r24	; 0x05
     b3c:	9e 83       	std	Y+6, r25	; 0x06
     b3e:	af 83       	std	Y+7, r26	; 0x07
     b40:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     b42:	20 e0       	ldi	r18, 0x00	; 0
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	4a ef       	ldi	r20, 0xFA	; 250
     b48:	54 e4       	ldi	r21, 0x44	; 68
     b4a:	6d 81       	ldd	r22, Y+5	; 0x05
     b4c:	7e 81       	ldd	r23, Y+6	; 0x06
     b4e:	8f 81       	ldd	r24, Y+7	; 0x07
     b50:	98 85       	ldd	r25, Y+8	; 0x08
     b52:	0e 94 91 0b 	call	0x1722	; 0x1722 <__mulsf3>
     b56:	dc 01       	movw	r26, r24
     b58:	cb 01       	movw	r24, r22
     b5a:	8f ab       	std	Y+55, r24	; 0x37
     b5c:	98 af       	std	Y+56, r25	; 0x38
     b5e:	a9 af       	std	Y+57, r26	; 0x39
     b60:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
     b62:	20 e0       	ldi	r18, 0x00	; 0
     b64:	30 e0       	ldi	r19, 0x00	; 0
     b66:	40 e8       	ldi	r20, 0x80	; 128
     b68:	5f e3       	ldi	r21, 0x3F	; 63
     b6a:	6f a9       	ldd	r22, Y+55	; 0x37
     b6c:	78 ad       	ldd	r23, Y+56	; 0x38
     b6e:	89 ad       	ldd	r24, Y+57	; 0x39
     b70:	9a ad       	ldd	r25, Y+58	; 0x3a
     b72:	0e 94 2d 0a 	call	0x145a	; 0x145a <__cmpsf2>
     b76:	88 23       	and	r24, r24
     b78:	2c f4       	brge	.+10     	; 0xb84 <hd44780_init+0x22c>
		__ticks = 1;
     b7a:	81 e0       	ldi	r24, 0x01	; 1
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	9c af       	std	Y+60, r25	; 0x3c
     b80:	8b af       	std	Y+59, r24	; 0x3b
     b82:	3f c0       	rjmp	.+126    	; 0xc02 <hd44780_init+0x2aa>
	else if (__tmp > 65535)
     b84:	20 e0       	ldi	r18, 0x00	; 0
     b86:	3f ef       	ldi	r19, 0xFF	; 255
     b88:	4f e7       	ldi	r20, 0x7F	; 127
     b8a:	57 e4       	ldi	r21, 0x47	; 71
     b8c:	6f a9       	ldd	r22, Y+55	; 0x37
     b8e:	78 ad       	ldd	r23, Y+56	; 0x38
     b90:	89 ad       	ldd	r24, Y+57	; 0x39
     b92:	9a ad       	ldd	r25, Y+58	; 0x3a
     b94:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__gesf2>
     b98:	18 16       	cp	r1, r24
     b9a:	4c f5       	brge	.+82     	; 0xbee <hd44780_init+0x296>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b9c:	20 e0       	ldi	r18, 0x00	; 0
     b9e:	30 e0       	ldi	r19, 0x00	; 0
     ba0:	40 e2       	ldi	r20, 0x20	; 32
     ba2:	51 e4       	ldi	r21, 0x41	; 65
     ba4:	6d 81       	ldd	r22, Y+5	; 0x05
     ba6:	7e 81       	ldd	r23, Y+6	; 0x06
     ba8:	8f 81       	ldd	r24, Y+7	; 0x07
     baa:	98 85       	ldd	r25, Y+8	; 0x08
     bac:	0e 94 91 0b 	call	0x1722	; 0x1722 <__mulsf3>
     bb0:	dc 01       	movw	r26, r24
     bb2:	cb 01       	movw	r24, r22
     bb4:	bc 01       	movw	r22, r24
     bb6:	cd 01       	movw	r24, r26
     bb8:	0e 94 ab 0a 	call	0x1556	; 0x1556 <__fixunssfsi>
     bbc:	dc 01       	movw	r26, r24
     bbe:	cb 01       	movw	r24, r22
     bc0:	9c af       	std	Y+60, r25	; 0x3c
     bc2:	8b af       	std	Y+59, r24	; 0x3b
     bc4:	0f c0       	rjmp	.+30     	; 0xbe4 <hd44780_init+0x28c>
     bc6:	88 ec       	ldi	r24, 0xC8	; 200
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	9e af       	std	Y+62, r25	; 0x3e
     bcc:	8d af       	std	Y+61, r24	; 0x3d
     bce:	8d ad       	ldd	r24, Y+61	; 0x3d
     bd0:	9e ad       	ldd	r25, Y+62	; 0x3e
     bd2:	01 97       	sbiw	r24, 0x01	; 1
     bd4:	f1 f7       	brne	.-4      	; 0xbd2 <hd44780_init+0x27a>
     bd6:	9e af       	std	Y+62, r25	; 0x3e
     bd8:	8d af       	std	Y+61, r24	; 0x3d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bda:	8b ad       	ldd	r24, Y+59	; 0x3b
     bdc:	9c ad       	ldd	r25, Y+60	; 0x3c
     bde:	01 97       	sbiw	r24, 0x01	; 1
     be0:	9c af       	std	Y+60, r25	; 0x3c
     be2:	8b af       	std	Y+59, r24	; 0x3b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     be4:	8b ad       	ldd	r24, Y+59	; 0x3b
     be6:	9c ad       	ldd	r25, Y+60	; 0x3c
     be8:	89 2b       	or	r24, r25
     bea:	69 f7       	brne	.-38     	; 0xbc6 <hd44780_init+0x26e>
     bec:	1e c0       	rjmp	.+60     	; 0xc2a <hd44780_init+0x2d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bee:	6f a9       	ldd	r22, Y+55	; 0x37
     bf0:	78 ad       	ldd	r23, Y+56	; 0x38
     bf2:	89 ad       	ldd	r24, Y+57	; 0x39
     bf4:	9a ad       	ldd	r25, Y+58	; 0x3a
     bf6:	0e 94 ab 0a 	call	0x1556	; 0x1556 <__fixunssfsi>
     bfa:	dc 01       	movw	r26, r24
     bfc:	cb 01       	movw	r24, r22
     bfe:	9c af       	std	Y+60, r25	; 0x3c
     c00:	8b af       	std	Y+59, r24	; 0x3b
     c02:	2b ad       	ldd	r18, Y+59	; 0x3b
     c04:	3c ad       	ldd	r19, Y+60	; 0x3c
     c06:	ce 01       	movw	r24, r28
     c08:	cf 96       	adiw	r24, 0x3f	; 63
     c0a:	fc 01       	movw	r30, r24
     c0c:	31 83       	std	Z+1, r19	; 0x01
     c0e:	20 83       	st	Z, r18
     c10:	ce 01       	movw	r24, r28
     c12:	cf 96       	adiw	r24, 0x3f	; 63
     c14:	fc 01       	movw	r30, r24
     c16:	80 81       	ld	r24, Z
     c18:	91 81       	ldd	r25, Z+1	; 0x01
     c1a:	01 97       	sbiw	r24, 0x01	; 1
     c1c:	f1 f7       	brne	.-4      	; 0xc1a <hd44780_init+0x2c2>
     c1e:	9e 01       	movw	r18, r28
     c20:	21 5c       	subi	r18, 0xC1	; 193
     c22:	3f 4f       	sbci	r19, 0xFF	; 255
     c24:	f9 01       	movw	r30, r18
     c26:	91 83       	std	Z+1, r25	; 0x01
     c28:	80 83       	st	Z, r24
  _delay_ms(4.1);
  hd44780_outnibble(HD44780_FNSET(1, 0, 0) >> 4, 0);
     c2a:	60 e0       	ldi	r22, 0x00	; 0
     c2c:	83 e0       	ldi	r24, 0x03	; 3
     c2e:	0e 94 53 00 	call	0xa6	; 0xa6 <hd44780_outnibble>
     c32:	8d ec       	ldi	r24, 0xCD	; 205
     c34:	9c ec       	ldi	r25, 0xCC	; 204
     c36:	ac ec       	ldi	r26, 0xCC	; 204
     c38:	bd e3       	ldi	r27, 0x3D	; 61
     c3a:	89 87       	std	Y+9, r24	; 0x09
     c3c:	9a 87       	std	Y+10, r25	; 0x0a
     c3e:	ab 87       	std	Y+11, r26	; 0x0b
     c40:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     c42:	20 e0       	ldi	r18, 0x00	; 0
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	4a ef       	ldi	r20, 0xFA	; 250
     c48:	54 e4       	ldi	r21, 0x44	; 68
     c4a:	69 85       	ldd	r22, Y+9	; 0x09
     c4c:	7a 85       	ldd	r23, Y+10	; 0x0a
     c4e:	8b 85       	ldd	r24, Y+11	; 0x0b
     c50:	9c 85       	ldd	r25, Y+12	; 0x0c
     c52:	0e 94 91 0b 	call	0x1722	; 0x1722 <__mulsf3>
     c56:	dc 01       	movw	r26, r24
     c58:	cb 01       	movw	r24, r22
     c5a:	8d a7       	std	Y+45, r24	; 0x2d
     c5c:	9e a7       	std	Y+46, r25	; 0x2e
     c5e:	af a7       	std	Y+47, r26	; 0x2f
     c60:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
     c62:	20 e0       	ldi	r18, 0x00	; 0
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	40 e8       	ldi	r20, 0x80	; 128
     c68:	5f e3       	ldi	r21, 0x3F	; 63
     c6a:	6d a5       	ldd	r22, Y+45	; 0x2d
     c6c:	7e a5       	ldd	r23, Y+46	; 0x2e
     c6e:	8f a5       	ldd	r24, Y+47	; 0x2f
     c70:	98 a9       	ldd	r25, Y+48	; 0x30
     c72:	0e 94 2d 0a 	call	0x145a	; 0x145a <__cmpsf2>
     c76:	88 23       	and	r24, r24
     c78:	2c f4       	brge	.+10     	; 0xc84 <hd44780_init+0x32c>
		__ticks = 1;
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	9a ab       	std	Y+50, r25	; 0x32
     c80:	89 ab       	std	Y+49, r24	; 0x31
     c82:	3f c0       	rjmp	.+126    	; 0xd02 <hd44780_init+0x3aa>
	else if (__tmp > 65535)
     c84:	20 e0       	ldi	r18, 0x00	; 0
     c86:	3f ef       	ldi	r19, 0xFF	; 255
     c88:	4f e7       	ldi	r20, 0x7F	; 127
     c8a:	57 e4       	ldi	r21, 0x47	; 71
     c8c:	6d a5       	ldd	r22, Y+45	; 0x2d
     c8e:	7e a5       	ldd	r23, Y+46	; 0x2e
     c90:	8f a5       	ldd	r24, Y+47	; 0x2f
     c92:	98 a9       	ldd	r25, Y+48	; 0x30
     c94:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__gesf2>
     c98:	18 16       	cp	r1, r24
     c9a:	4c f5       	brge	.+82     	; 0xcee <hd44780_init+0x396>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c9c:	20 e0       	ldi	r18, 0x00	; 0
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	40 e2       	ldi	r20, 0x20	; 32
     ca2:	51 e4       	ldi	r21, 0x41	; 65
     ca4:	69 85       	ldd	r22, Y+9	; 0x09
     ca6:	7a 85       	ldd	r23, Y+10	; 0x0a
     ca8:	8b 85       	ldd	r24, Y+11	; 0x0b
     caa:	9c 85       	ldd	r25, Y+12	; 0x0c
     cac:	0e 94 91 0b 	call	0x1722	; 0x1722 <__mulsf3>
     cb0:	dc 01       	movw	r26, r24
     cb2:	cb 01       	movw	r24, r22
     cb4:	bc 01       	movw	r22, r24
     cb6:	cd 01       	movw	r24, r26
     cb8:	0e 94 ab 0a 	call	0x1556	; 0x1556 <__fixunssfsi>
     cbc:	dc 01       	movw	r26, r24
     cbe:	cb 01       	movw	r24, r22
     cc0:	9a ab       	std	Y+50, r25	; 0x32
     cc2:	89 ab       	std	Y+49, r24	; 0x31
     cc4:	0f c0       	rjmp	.+30     	; 0xce4 <hd44780_init+0x38c>
     cc6:	88 ec       	ldi	r24, 0xC8	; 200
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	9c ab       	std	Y+52, r25	; 0x34
     ccc:	8b ab       	std	Y+51, r24	; 0x33
     cce:	8b a9       	ldd	r24, Y+51	; 0x33
     cd0:	9c a9       	ldd	r25, Y+52	; 0x34
     cd2:	01 97       	sbiw	r24, 0x01	; 1
     cd4:	f1 f7       	brne	.-4      	; 0xcd2 <hd44780_init+0x37a>
     cd6:	9c ab       	std	Y+52, r25	; 0x34
     cd8:	8b ab       	std	Y+51, r24	; 0x33
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cda:	89 a9       	ldd	r24, Y+49	; 0x31
     cdc:	9a a9       	ldd	r25, Y+50	; 0x32
     cde:	01 97       	sbiw	r24, 0x01	; 1
     ce0:	9a ab       	std	Y+50, r25	; 0x32
     ce2:	89 ab       	std	Y+49, r24	; 0x31
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ce4:	89 a9       	ldd	r24, Y+49	; 0x31
     ce6:	9a a9       	ldd	r25, Y+50	; 0x32
     ce8:	89 2b       	or	r24, r25
     cea:	69 f7       	brne	.-38     	; 0xcc6 <hd44780_init+0x36e>
     cec:	14 c0       	rjmp	.+40     	; 0xd16 <hd44780_init+0x3be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cee:	6d a5       	ldd	r22, Y+45	; 0x2d
     cf0:	7e a5       	ldd	r23, Y+46	; 0x2e
     cf2:	8f a5       	ldd	r24, Y+47	; 0x2f
     cf4:	98 a9       	ldd	r25, Y+48	; 0x30
     cf6:	0e 94 ab 0a 	call	0x1556	; 0x1556 <__fixunssfsi>
     cfa:	dc 01       	movw	r26, r24
     cfc:	cb 01       	movw	r24, r22
     cfe:	9a ab       	std	Y+50, r25	; 0x32
     d00:	89 ab       	std	Y+49, r24	; 0x31
     d02:	89 a9       	ldd	r24, Y+49	; 0x31
     d04:	9a a9       	ldd	r25, Y+50	; 0x32
     d06:	9e ab       	std	Y+54, r25	; 0x36
     d08:	8d ab       	std	Y+53, r24	; 0x35
     d0a:	8d a9       	ldd	r24, Y+53	; 0x35
     d0c:	9e a9       	ldd	r25, Y+54	; 0x36
     d0e:	01 97       	sbiw	r24, 0x01	; 1
     d10:	f1 f7       	brne	.-4      	; 0xd0e <hd44780_init+0x3b6>
     d12:	9e ab       	std	Y+54, r25	; 0x36
     d14:	8d ab       	std	Y+53, r24	; 0x35
  _delay_ms(0.1);
  hd44780_outnibble(HD44780_FNSET(1, 0, 0) >> 4, 0);
     d16:	60 e0       	ldi	r22, 0x00	; 0
     d18:	83 e0       	ldi	r24, 0x03	; 3
     d1a:	0e 94 53 00 	call	0xa6	; 0xa6 <hd44780_outnibble>
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	a4 e1       	ldi	r26, 0x14	; 20
     d24:	b2 e4       	ldi	r27, 0x42	; 66
     d26:	8d 87       	std	Y+13, r24	; 0x0d
     d28:	9e 87       	std	Y+14, r25	; 0x0e
     d2a:	af 87       	std	Y+15, r26	; 0x0f
     d2c:	b8 8b       	std	Y+16, r27	; 0x10
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     d2e:	2b ea       	ldi	r18, 0xAB	; 171
     d30:	3a ea       	ldi	r19, 0xAA	; 170
     d32:	4a e2       	ldi	r20, 0x2A	; 42
     d34:	50 e4       	ldi	r21, 0x40	; 64
     d36:	6d 85       	ldd	r22, Y+13	; 0x0d
     d38:	7e 85       	ldd	r23, Y+14	; 0x0e
     d3a:	8f 85       	ldd	r24, Y+15	; 0x0f
     d3c:	98 89       	ldd	r25, Y+16	; 0x10
     d3e:	0e 94 91 0b 	call	0x1722	; 0x1722 <__mulsf3>
     d42:	dc 01       	movw	r26, r24
     d44:	cb 01       	movw	r24, r22
     d46:	89 8b       	std	Y+17, r24	; 0x11
     d48:	9a 8b       	std	Y+18, r25	; 0x12
     d4a:	ab 8b       	std	Y+19, r26	; 0x13
     d4c:	bc 8b       	std	Y+20, r27	; 0x14
	__tmp2 = ((F_CPU) / 4e6) * __us;
     d4e:	8d 85       	ldd	r24, Y+13	; 0x0d
     d50:	9e 85       	ldd	r25, Y+14	; 0x0e
     d52:	af 85       	ldd	r26, Y+15	; 0x0f
     d54:	b8 89       	ldd	r27, Y+16	; 0x10
     d56:	9c 01       	movw	r18, r24
     d58:	ad 01       	movw	r20, r26
     d5a:	bc 01       	movw	r22, r24
     d5c:	cd 01       	movw	r24, r26
     d5e:	0e 94 c1 09 	call	0x1382	; 0x1382 <__addsf3>
     d62:	dc 01       	movw	r26, r24
     d64:	cb 01       	movw	r24, r22
     d66:	8d 8b       	std	Y+21, r24	; 0x15
     d68:	9e 8b       	std	Y+22, r25	; 0x16
     d6a:	af 8b       	std	Y+23, r26	; 0x17
     d6c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d6e:	20 e0       	ldi	r18, 0x00	; 0
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	40 e8       	ldi	r20, 0x80	; 128
     d74:	5f e3       	ldi	r21, 0x3F	; 63
     d76:	69 89       	ldd	r22, Y+17	; 0x11
     d78:	7a 89       	ldd	r23, Y+18	; 0x12
     d7a:	8b 89       	ldd	r24, Y+19	; 0x13
     d7c:	9c 89       	ldd	r25, Y+20	; 0x14
     d7e:	0e 94 2d 0a 	call	0x145a	; 0x145a <__cmpsf2>
     d82:	88 23       	and	r24, r24
     d84:	1c f4       	brge	.+6      	; 0xd8c <hd44780_init+0x434>
		__ticks = 1;
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	89 8f       	std	Y+25, r24	; 0x19
     d8a:	b2 c0       	rjmp	.+356    	; 0xef0 <hd44780_init+0x598>
	else if (__tmp2 > 65535)
     d8c:	20 e0       	ldi	r18, 0x00	; 0
     d8e:	3f ef       	ldi	r19, 0xFF	; 255
     d90:	4f e7       	ldi	r20, 0x7F	; 127
     d92:	57 e4       	ldi	r21, 0x47	; 71
     d94:	6d 89       	ldd	r22, Y+21	; 0x15
     d96:	7e 89       	ldd	r23, Y+22	; 0x16
     d98:	8f 89       	ldd	r24, Y+23	; 0x17
     d9a:	98 8d       	ldd	r25, Y+24	; 0x18
     d9c:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__gesf2>
     da0:	18 16       	cp	r1, r24
     da2:	0c f0       	brlt	.+2      	; 0xda6 <hd44780_init+0x44e>
     da4:	7b c0       	rjmp	.+246    	; 0xe9c <hd44780_init+0x544>
	{
		_delay_ms(__us / 1000.0);
     da6:	20 e0       	ldi	r18, 0x00	; 0
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	4a e7       	ldi	r20, 0x7A	; 122
     dac:	54 e4       	ldi	r21, 0x44	; 68
     dae:	6d 85       	ldd	r22, Y+13	; 0x0d
     db0:	7e 85       	ldd	r23, Y+14	; 0x0e
     db2:	8f 85       	ldd	r24, Y+15	; 0x0f
     db4:	98 89       	ldd	r25, Y+16	; 0x10
     db6:	0e 94 32 0a 	call	0x1464	; 0x1464 <__divsf3>
     dba:	dc 01       	movw	r26, r24
     dbc:	cb 01       	movw	r24, r22
     dbe:	8a 8f       	std	Y+26, r24	; 0x1a
     dc0:	9b 8f       	std	Y+27, r25	; 0x1b
     dc2:	ac 8f       	std	Y+28, r26	; 0x1c
     dc4:	bd 8f       	std	Y+29, r27	; 0x1d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     dc6:	20 e0       	ldi	r18, 0x00	; 0
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	4a ef       	ldi	r20, 0xFA	; 250
     dcc:	54 e4       	ldi	r21, 0x44	; 68
     dce:	6a 8d       	ldd	r22, Y+26	; 0x1a
     dd0:	7b 8d       	ldd	r23, Y+27	; 0x1b
     dd2:	8c 8d       	ldd	r24, Y+28	; 0x1c
     dd4:	9d 8d       	ldd	r25, Y+29	; 0x1d
     dd6:	0e 94 91 0b 	call	0x1722	; 0x1722 <__mulsf3>
     dda:	dc 01       	movw	r26, r24
     ddc:	cb 01       	movw	r24, r22
     dde:	8e 8f       	std	Y+30, r24	; 0x1e
     de0:	9f 8f       	std	Y+31, r25	; 0x1f
     de2:	a8 a3       	std	Y+32, r26	; 0x20
     de4:	b9 a3       	std	Y+33, r27	; 0x21
	if (__tmp < 1.0)
     de6:	20 e0       	ldi	r18, 0x00	; 0
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	40 e8       	ldi	r20, 0x80	; 128
     dec:	5f e3       	ldi	r21, 0x3F	; 63
     dee:	6e 8d       	ldd	r22, Y+30	; 0x1e
     df0:	7f 8d       	ldd	r23, Y+31	; 0x1f
     df2:	88 a1       	ldd	r24, Y+32	; 0x20
     df4:	99 a1       	ldd	r25, Y+33	; 0x21
     df6:	0e 94 2d 0a 	call	0x145a	; 0x145a <__cmpsf2>
     dfa:	88 23       	and	r24, r24
     dfc:	2c f4       	brge	.+10     	; 0xe08 <hd44780_init+0x4b0>
		__ticks = 1;
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	9b a3       	std	Y+35, r25	; 0x23
     e04:	8a a3       	std	Y+34, r24	; 0x22
     e06:	3f c0       	rjmp	.+126    	; 0xe86 <hd44780_init+0x52e>
	else if (__tmp > 65535)
     e08:	20 e0       	ldi	r18, 0x00	; 0
     e0a:	3f ef       	ldi	r19, 0xFF	; 255
     e0c:	4f e7       	ldi	r20, 0x7F	; 127
     e0e:	57 e4       	ldi	r21, 0x47	; 71
     e10:	6e 8d       	ldd	r22, Y+30	; 0x1e
     e12:	7f 8d       	ldd	r23, Y+31	; 0x1f
     e14:	88 a1       	ldd	r24, Y+32	; 0x20
     e16:	99 a1       	ldd	r25, Y+33	; 0x21
     e18:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__gesf2>
     e1c:	18 16       	cp	r1, r24
     e1e:	4c f5       	brge	.+82     	; 0xe72 <hd44780_init+0x51a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e20:	20 e0       	ldi	r18, 0x00	; 0
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	40 e2       	ldi	r20, 0x20	; 32
     e26:	51 e4       	ldi	r21, 0x41	; 65
     e28:	6a 8d       	ldd	r22, Y+26	; 0x1a
     e2a:	7b 8d       	ldd	r23, Y+27	; 0x1b
     e2c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     e2e:	9d 8d       	ldd	r25, Y+29	; 0x1d
     e30:	0e 94 91 0b 	call	0x1722	; 0x1722 <__mulsf3>
     e34:	dc 01       	movw	r26, r24
     e36:	cb 01       	movw	r24, r22
     e38:	bc 01       	movw	r22, r24
     e3a:	cd 01       	movw	r24, r26
     e3c:	0e 94 ab 0a 	call	0x1556	; 0x1556 <__fixunssfsi>
     e40:	dc 01       	movw	r26, r24
     e42:	cb 01       	movw	r24, r22
     e44:	9b a3       	std	Y+35, r25	; 0x23
     e46:	8a a3       	std	Y+34, r24	; 0x22
     e48:	0f c0       	rjmp	.+30     	; 0xe68 <hd44780_init+0x510>
     e4a:	88 ec       	ldi	r24, 0xC8	; 200
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	9d a3       	std	Y+37, r25	; 0x25
     e50:	8c a3       	std	Y+36, r24	; 0x24
     e52:	8c a1       	ldd	r24, Y+36	; 0x24
     e54:	9d a1       	ldd	r25, Y+37	; 0x25
     e56:	01 97       	sbiw	r24, 0x01	; 1
     e58:	f1 f7       	brne	.-4      	; 0xe56 <hd44780_init+0x4fe>
     e5a:	9d a3       	std	Y+37, r25	; 0x25
     e5c:	8c a3       	std	Y+36, r24	; 0x24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e5e:	8a a1       	ldd	r24, Y+34	; 0x22
     e60:	9b a1       	ldd	r25, Y+35	; 0x23
     e62:	01 97       	sbiw	r24, 0x01	; 1
     e64:	9b a3       	std	Y+35, r25	; 0x23
     e66:	8a a3       	std	Y+34, r24	; 0x22
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e68:	8a a1       	ldd	r24, Y+34	; 0x22
     e6a:	9b a1       	ldd	r25, Y+35	; 0x23
     e6c:	89 2b       	or	r24, r25
     e6e:	69 f7       	brne	.-38     	; 0xe4a <hd44780_init+0x4f2>
     e70:	3f c0       	rjmp	.+126    	; 0xef0 <hd44780_init+0x598>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e72:	6e 8d       	ldd	r22, Y+30	; 0x1e
     e74:	7f 8d       	ldd	r23, Y+31	; 0x1f
     e76:	88 a1       	ldd	r24, Y+32	; 0x20
     e78:	99 a1       	ldd	r25, Y+33	; 0x21
     e7a:	0e 94 ab 0a 	call	0x1556	; 0x1556 <__fixunssfsi>
     e7e:	dc 01       	movw	r26, r24
     e80:	cb 01       	movw	r24, r22
     e82:	9b a3       	std	Y+35, r25	; 0x23
     e84:	8a a3       	std	Y+34, r24	; 0x22
     e86:	8a a1       	ldd	r24, Y+34	; 0x22
     e88:	9b a1       	ldd	r25, Y+35	; 0x23
     e8a:	9f a3       	std	Y+39, r25	; 0x27
     e8c:	8e a3       	std	Y+38, r24	; 0x26
     e8e:	8e a1       	ldd	r24, Y+38	; 0x26
     e90:	9f a1       	ldd	r25, Y+39	; 0x27
     e92:	01 97       	sbiw	r24, 0x01	; 1
     e94:	f1 f7       	brne	.-4      	; 0xe92 <hd44780_init+0x53a>
     e96:	9f a3       	std	Y+39, r25	; 0x27
     e98:	8e a3       	std	Y+38, r24	; 0x26
     e9a:	2a c0       	rjmp	.+84     	; 0xef0 <hd44780_init+0x598>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     e9c:	20 e0       	ldi	r18, 0x00	; 0
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	4f e7       	ldi	r20, 0x7F	; 127
     ea2:	53 e4       	ldi	r21, 0x43	; 67
     ea4:	69 89       	ldd	r22, Y+17	; 0x11
     ea6:	7a 89       	ldd	r23, Y+18	; 0x12
     ea8:	8b 89       	ldd	r24, Y+19	; 0x13
     eaa:	9c 89       	ldd	r25, Y+20	; 0x14
     eac:	0e 94 8c 0b 	call	0x1718	; 0x1718 <__gesf2>
     eb0:	18 16       	cp	r1, r24
     eb2:	ac f4       	brge	.+42     	; 0xede <hd44780_init+0x586>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     eb4:	6d 89       	ldd	r22, Y+21	; 0x15
     eb6:	7e 89       	ldd	r23, Y+22	; 0x16
     eb8:	8f 89       	ldd	r24, Y+23	; 0x17
     eba:	98 8d       	ldd	r25, Y+24	; 0x18
     ebc:	0e 94 ab 0a 	call	0x1556	; 0x1556 <__fixunssfsi>
     ec0:	dc 01       	movw	r26, r24
     ec2:	cb 01       	movw	r24, r22
     ec4:	99 a7       	std	Y+41, r25	; 0x29
     ec6:	88 a7       	std	Y+40, r24	; 0x28
     ec8:	88 a5       	ldd	r24, Y+40	; 0x28
     eca:	99 a5       	ldd	r25, Y+41	; 0x29
     ecc:	9b a7       	std	Y+43, r25	; 0x2b
     ece:	8a a7       	std	Y+42, r24	; 0x2a
     ed0:	8a a5       	ldd	r24, Y+42	; 0x2a
     ed2:	9b a5       	ldd	r25, Y+43	; 0x2b
     ed4:	01 97       	sbiw	r24, 0x01	; 1
     ed6:	f1 f7       	brne	.-4      	; 0xed4 <hd44780_init+0x57c>
     ed8:	9b a7       	std	Y+43, r25	; 0x2b
     eda:	8a a7       	std	Y+42, r24	; 0x2a
     edc:	0f c0       	rjmp	.+30     	; 0xefc <hd44780_init+0x5a4>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     ede:	69 89       	ldd	r22, Y+17	; 0x11
     ee0:	7a 89       	ldd	r23, Y+18	; 0x12
     ee2:	8b 89       	ldd	r24, Y+19	; 0x13
     ee4:	9c 89       	ldd	r25, Y+20	; 0x14
     ee6:	0e 94 ab 0a 	call	0x1556	; 0x1556 <__fixunssfsi>
     eea:	dc 01       	movw	r26, r24
     eec:	cb 01       	movw	r24, r22
     eee:	89 8f       	std	Y+25, r24	; 0x19
     ef0:	89 8d       	ldd	r24, Y+25	; 0x19
     ef2:	8c a7       	std	Y+44, r24	; 0x2c
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     ef4:	8c a5       	ldd	r24, Y+44	; 0x2c
     ef6:	8a 95       	dec	r24
     ef8:	f1 f7       	brne	.-4      	; 0xef6 <hd44780_init+0x59e>
     efa:	8c a7       	std	Y+44, r24	; 0x2c
  _delay_us(37);

  hd44780_outnibble(HD44780_FNSET(0, 1, 0) >> 4, 0);
     efc:	60 e0       	ldi	r22, 0x00	; 0
     efe:	82 e0       	ldi	r24, 0x02	; 2
     f00:	0e 94 53 00 	call	0xa6	; 0xa6 <hd44780_outnibble>
  hd44780_wait_ready(false);
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	0e 94 31 03 	call	0x662	; 0x662 <hd44780_wait_ready>
  hd44780_outcmd(HD44780_FNSET(0, 1, 0));
     f0a:	60 e0       	ldi	r22, 0x00	; 0
     f0c:	88 e2       	ldi	r24, 0x28	; 40
     f0e:	0e 94 a1 01 	call	0x342	; 0x342 <hd44780_outbyte>
  hd44780_wait_ready(false);
     f12:	80 e0       	ldi	r24, 0x00	; 0
     f14:	0e 94 31 03 	call	0x662	; 0x662 <hd44780_wait_ready>
  hd44780_outcmd(HD44780_DISPCTL(0, 0, 0));
     f18:	60 e0       	ldi	r22, 0x00	; 0
     f1a:	88 e0       	ldi	r24, 0x08	; 8
     f1c:	0e 94 a1 01 	call	0x342	; 0x342 <hd44780_outbyte>
  hd44780_wait_ready(false);
     f20:	80 e0       	ldi	r24, 0x00	; 0
     f22:	0e 94 31 03 	call	0x662	; 0x662 <hd44780_wait_ready>
}
     f26:	00 00       	nop
     f28:	c6 5b       	subi	r28, 0xB6	; 182
     f2a:	df 4f       	sbci	r29, 0xFF	; 255
     f2c:	0f b6       	in	r0, 0x3f	; 63
     f2e:	f8 94       	cli
     f30:	de bf       	out	0x3e, r29	; 62
     f32:	0f be       	out	0x3f, r0	; 63
     f34:	cd bf       	out	0x3d, r28	; 61
     f36:	df 91       	pop	r29
     f38:	cf 91       	pop	r28
     f3a:	1f 91       	pop	r17
     f3c:	0f 91       	pop	r16
     f3e:	08 95       	ret

00000f40 <hd44780_powerdown>:
/*
 * Prepare the LCD controller pins for powerdown.
 */
void
hd44780_powerdown(void)
{
     f40:	cf 93       	push	r28
     f42:	df 93       	push	r29
     f44:	cd b7       	in	r28, 0x3d	; 61
     f46:	de b7       	in	r29, 0x3e	; 62
  ASSIGN(PORT, HD44780_D4, 0);
     f48:	88 e2       	ldi	r24, 0x28	; 40
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	28 e2       	ldi	r18, 0x28	; 40
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	f9 01       	movw	r30, r18
     f52:	20 81       	ld	r18, Z
     f54:	20 7f       	andi	r18, 0xF0	; 240
     f56:	fc 01       	movw	r30, r24
     f58:	20 83       	st	Z, r18
  CLR(PORT, HD44780_RS);
     f5a:	85 e2       	ldi	r24, 0x25	; 37
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	25 e2       	ldi	r18, 0x25	; 37
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	f9 01       	movw	r30, r18
     f64:	20 81       	ld	r18, Z
     f66:	2f 7d       	andi	r18, 0xDF	; 223
     f68:	fc 01       	movw	r30, r24
     f6a:	20 83       	st	Z, r18
  CLR(PORT, HD44780_RW);
     f6c:	85 e2       	ldi	r24, 0x25	; 37
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	25 e2       	ldi	r18, 0x25	; 37
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	f9 01       	movw	r30, r18
     f76:	20 81       	ld	r18, Z
     f78:	2f 7e       	andi	r18, 0xEF	; 239
     f7a:	fc 01       	movw	r30, r24
     f7c:	20 83       	st	Z, r18
  CLR(PORT, HD44780_E);
     f7e:	85 e2       	ldi	r24, 0x25	; 37
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	25 e2       	ldi	r18, 0x25	; 37
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	f9 01       	movw	r30, r18
     f88:	20 81       	ld	r18, Z
     f8a:	27 7f       	andi	r18, 0xF7	; 247
     f8c:	fc 01       	movw	r30, r24
     f8e:	20 83       	st	Z, r18
}
     f90:	00 00       	nop
     f92:	df 91       	pop	r29
     f94:	cf 91       	pop	r28
     f96:	08 95       	ret

00000f98 <lcd_init>:
 * Setup the LCD controller.  First, call the hardware initialization
 * function, then adjust the display attributes we want.
 */
void
lcd_init(void)
{
     f98:	cf 93       	push	r28
     f9a:	df 93       	push	r29
     f9c:	cd b7       	in	r28, 0x3d	; 61
     f9e:	de b7       	in	r29, 0x3e	; 62

  hd44780_init();
     fa0:	0e 94 ac 04 	call	0x958	; 0x958 <hd44780_init>

  /*
   * Clear the display.
   */
  hd44780_outcmd(HD44780_CLR);
     fa4:	60 e0       	ldi	r22, 0x00	; 0
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	0e 94 a1 01 	call	0x342	; 0x342 <hd44780_outbyte>
  hd44780_wait_ready(true);
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	0e 94 31 03 	call	0x662	; 0x662 <hd44780_wait_ready>

  /*
   * Entry mode: auto-increment address counter, no display shift in
   * effect.
   */
  hd44780_outcmd(HD44780_ENTMODE(1, 0));
     fb2:	60 e0       	ldi	r22, 0x00	; 0
     fb4:	86 e0       	ldi	r24, 0x06	; 6
     fb6:	0e 94 a1 01 	call	0x342	; 0x342 <hd44780_outbyte>
  hd44780_wait_ready(false);
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	0e 94 31 03 	call	0x662	; 0x662 <hd44780_wait_ready>

  /*
   * Enable display, activate non-blinking cursor.
   */
  hd44780_outcmd(HD44780_DISPCTL(1, 1, 0));
     fc0:	60 e0       	ldi	r22, 0x00	; 0
     fc2:	8e e0       	ldi	r24, 0x0E	; 14
     fc4:	0e 94 a1 01 	call	0x342	; 0x342 <hd44780_outbyte>
  hd44780_wait_ready(false);
     fc8:	80 e0       	ldi	r24, 0x00	; 0
     fca:	0e 94 31 03 	call	0x662	; 0x662 <hd44780_wait_ready>
}
     fce:	00 00       	nop
     fd0:	df 91       	pop	r29
     fd2:	cf 91       	pop	r28
     fd4:	08 95       	ret

00000fd6 <lcd_putchar>:
 * Send character c to the LCD display.  After a '\n' has been seen,
 * the next character will first clear the display.
 */
int
lcd_putchar(char c, FILE *unused)
{
     fd6:	cf 93       	push	r28
     fd8:	df 93       	push	r29
     fda:	00 d0       	rcall	.+0      	; 0xfdc <lcd_putchar+0x6>
     fdc:	1f 92       	push	r1
     fde:	cd b7       	in	r28, 0x3d	; 61
     fe0:	de b7       	in	r29, 0x3e	; 62
     fe2:	89 83       	std	Y+1, r24	; 0x01
     fe4:	7b 83       	std	Y+3, r23	; 0x03
     fe6:	6a 83       	std	Y+2, r22	; 0x02
  static bool nl_seen = 0;

  if (nl_seen >= 2 && c != '\n')
     fe8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
     fec:	88 2f       	mov	r24, r24
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	02 97       	sbiw	r24, 0x02	; 2
     ff2:	d4 f0       	brlt	.+52     	; 0x1028 <lcd_putchar+0x52>
     ff4:	89 81       	ldd	r24, Y+1	; 0x01
     ff6:	8a 30       	cpi	r24, 0x0A	; 10
     ff8:	b9 f0       	breq	.+46     	; 0x1028 <lcd_putchar+0x52>
    {
      /*
       * First character after newline, clear display and home cursor.
       */
      hd44780_wait_ready(false);
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	0e 94 31 03 	call	0x662	; 0x662 <hd44780_wait_ready>
      hd44780_outcmd(HD44780_CLR);
    1000:	60 e0       	ldi	r22, 0x00	; 0
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	0e 94 a1 01 	call	0x342	; 0x342 <hd44780_outbyte>
      hd44780_wait_ready(false);
    1008:	80 e0       	ldi	r24, 0x00	; 0
    100a:	0e 94 31 03 	call	0x662	; 0x662 <hd44780_wait_ready>
      hd44780_outcmd(HD44780_HOME);
    100e:	60 e0       	ldi	r22, 0x00	; 0
    1010:	82 e0       	ldi	r24, 0x02	; 2
    1012:	0e 94 a1 01 	call	0x342	; 0x342 <hd44780_outbyte>
      hd44780_wait_ready(true);
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	0e 94 31 03 	call	0x662	; 0x662 <hd44780_wait_ready>
      hd44780_outcmd(HD44780_DDADDR(0));
    101c:	60 e0       	ldi	r22, 0x00	; 0
    101e:	80 e8       	ldi	r24, 0x80	; 128
    1020:	0e 94 a1 01 	call	0x342	; 0x342 <hd44780_outbyte>

      nl_seen = 0;
    1024:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__data_end>
    }
  if (c == '\n')
    1028:	89 81       	ldd	r24, Y+1	; 0x01
    102a:	8a 30       	cpi	r24, 0x0A	; 10
    102c:	79 f4       	brne	.+30     	; 0x104c <lcd_putchar+0x76>
    {
      ++nl_seen;
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
      if (nl_seen == 1){
    1034:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
    1038:	88 23       	and	r24, r24
    103a:	79 f0       	breq	.+30     	; 0x105a <lcd_putchar+0x84>
		    hd44780_wait_ready(true);
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	0e 94 31 03 	call	0x662	; 0x662 <hd44780_wait_ready>
		    hd44780_outcmd(HD44780_DDADDR(0x40));
    1042:	60 e0       	ldi	r22, 0x00	; 0
    1044:	80 ec       	ldi	r24, 0xC0	; 192
    1046:	0e 94 a1 01 	call	0x342	; 0x342 <hd44780_outbyte>
    104a:	07 c0       	rjmp	.+14     	; 0x105a <lcd_putchar+0x84>
		  }
    }
  else
    {
      hd44780_wait_ready(false);
    104c:	80 e0       	ldi	r24, 0x00	; 0
    104e:	0e 94 31 03 	call	0x662	; 0x662 <hd44780_wait_ready>
      hd44780_outdata(c);
    1052:	61 e0       	ldi	r22, 0x01	; 1
    1054:	89 81       	ldd	r24, Y+1	; 0x01
    1056:	0e 94 a1 01 	call	0x342	; 0x342 <hd44780_outbyte>
    }

  return 0;
    105a:	80 e0       	ldi	r24, 0x00	; 0
    105c:	90 e0       	ldi	r25, 0x00	; 0
}
    105e:	0f 90       	pop	r0
    1060:	0f 90       	pop	r0
    1062:	0f 90       	pop	r0
    1064:	df 91       	pop	r29
    1066:	cf 91       	pop	r28
    1068:	08 95       	ret

0000106a <home>:

/*
Returns the cursor to the first row first cell of the LCD
*/
void home(void){
    106a:	cf 93       	push	r28
    106c:	df 93       	push	r29
    106e:	cd b7       	in	r28, 0x3d	; 61
    1070:	de b7       	in	r29, 0x3e	; 62
  hd44780_wait_ready(true);
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	0e 94 31 03 	call	0x662	; 0x662 <hd44780_wait_ready>
	hd44780_outcmd(HD44780_DDADDR(0x00));
    1078:	60 e0       	ldi	r22, 0x00	; 0
    107a:	80 e8       	ldi	r24, 0x80	; 128
    107c:	0e 94 a1 01 	call	0x342	; 0x342 <hd44780_outbyte>
}
    1080:	00 00       	nop
    1082:	df 91       	pop	r29
    1084:	cf 91       	pop	r28
    1086:	08 95       	ret

00001088 <clear>:

/*
Clears the screen of the LCD and returns home
*/
void clear(void){
    1088:	cf 93       	push	r28
    108a:	df 93       	push	r29
    108c:	cd b7       	in	r28, 0x3d	; 61
    108e:	de b7       	in	r29, 0x3e	; 62
	hd44780_wait_ready(false);
    1090:	80 e0       	ldi	r24, 0x00	; 0
    1092:	0e 94 31 03 	call	0x662	; 0x662 <hd44780_wait_ready>
	hd44780_outcmd(HD44780_CLR);
    1096:	60 e0       	ldi	r22, 0x00	; 0
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	0e 94 a1 01 	call	0x342	; 0x342 <hd44780_outbyte>
	hd44780_wait_ready(true);
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	0e 94 31 03 	call	0x662	; 0x662 <hd44780_wait_ready>
	hd44780_outcmd(HD44780_DDADDR(0));
    10a4:	60 e0       	ldi	r22, 0x00	; 0
    10a6:	80 e8       	ldi	r24, 0x80	; 128
    10a8:	0e 94 a1 01 	call	0x342	; 0x342 <hd44780_outbyte>
}
    10ac:	00 00       	nop
    10ae:	df 91       	pop	r29
    10b0:	cf 91       	pop	r28
    10b2:	08 95       	ret

000010b4 <row2>:

/*
Puts the cursor at the start of the second row
*/
void row2(void){
    10b4:	cf 93       	push	r28
    10b6:	df 93       	push	r29
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
	hd44780_wait_ready(true);
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	0e 94 31 03 	call	0x662	; 0x662 <hd44780_wait_ready>
	hd44780_outcmd(HD44780_DDADDR(0x40));
    10c2:	60 e0       	ldi	r22, 0x00	; 0
    10c4:	80 ec       	ldi	r24, 0xC0	; 192
    10c6:	0e 94 a1 01 	call	0x342	; 0x342 <hd44780_outbyte>
}
    10ca:	00 00       	nop
    10cc:	df 91       	pop	r29
    10ce:	cf 91       	pop	r28
    10d0:	08 95       	ret

000010d2 <__vector_14>:

void timer0_init();
void frequencyToString(double frequency, char* str_freq, size_t max_len);

ISR(TIMER0_COMPA_vect)
{
    10d2:	1f 92       	push	r1
    10d4:	0f 92       	push	r0
    10d6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    10da:	0f 92       	push	r0
    10dc:	11 24       	eor	r1, r1
    10de:	2f 93       	push	r18
    10e0:	3f 93       	push	r19
    10e2:	4f 93       	push	r20
    10e4:	8f 93       	push	r24
    10e6:	9f 93       	push	r25
    10e8:	ef 93       	push	r30
    10ea:	ff 93       	push	r31
    10ec:	cf 93       	push	r28
    10ee:	df 93       	push	r29
    10f0:	cd b7       	in	r28, 0x3d	; 61
    10f2:	de b7       	in	r29, 0x3e	; 62
	static uint8_t is_high = 0;

	if (is_high) {
    10f4:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <is_high.2264>
    10f8:	88 23       	and	r24, r24
    10fa:	b1 f0       	breq	.+44     	; 0x1128 <__vector_14+0x56>
		// If the pin was high, set it low and adjust OCR0A for the remainder of the period
		PORTD &= ~(1 << 5);
    10fc:	8b e2       	ldi	r24, 0x2B	; 43
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	2b e2       	ldi	r18, 0x2B	; 43
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	f9 01       	movw	r30, r18
    1106:	20 81       	ld	r18, Z
    1108:	2f 7d       	andi	r18, 0xDF	; 223
    110a:	fc 01       	movw	r30, r24
    110c:	20 83       	st	Z, r18
		OCR0A = PWM_PERIOD - on_time;
    110e:	87 e4       	ldi	r24, 0x47	; 71
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <on_time>
    1116:	34 e6       	ldi	r19, 0x64	; 100
    1118:	f3 2f       	mov	r31, r19
    111a:	f2 1b       	sub	r31, r18
    111c:	2f 2f       	mov	r18, r31
    111e:	fc 01       	movw	r30, r24
    1120:	20 83       	st	Z, r18
		is_high = 0;
    1122:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <is_high.2264>
		// If the pin was low, set it high and adjust OCR0A for the on_time
		PORTD |= (1 << 5);
		OCR0A = on_time;
		is_high = 1;
	}
}
    1126:	12 c0       	rjmp	.+36     	; 0x114c <__vector_14+0x7a>
		PORTD &= ~(1 << 5);
		OCR0A = PWM_PERIOD - on_time;
		is_high = 0;
		} else {
		// If the pin was low, set it high and adjust OCR0A for the on_time
		PORTD |= (1 << 5);
    1128:	8b e2       	ldi	r24, 0x2B	; 43
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	2b e2       	ldi	r18, 0x2B	; 43
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	f9 01       	movw	r30, r18
    1132:	20 81       	ld	r18, Z
    1134:	20 62       	ori	r18, 0x20	; 32
    1136:	fc 01       	movw	r30, r24
    1138:	20 83       	st	Z, r18
		OCR0A = on_time;
    113a:	87 e4       	ldi	r24, 0x47	; 71
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <on_time>
    1142:	fc 01       	movw	r30, r24
    1144:	20 83       	st	Z, r18
		is_high = 1;
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <is_high.2264>
	}
}
    114c:	00 00       	nop
    114e:	df 91       	pop	r29
    1150:	cf 91       	pop	r28
    1152:	ff 91       	pop	r31
    1154:	ef 91       	pop	r30
    1156:	9f 91       	pop	r25
    1158:	8f 91       	pop	r24
    115a:	4f 91       	pop	r20
    115c:	3f 91       	pop	r19
    115e:	2f 91       	pop	r18
    1160:	0f 90       	pop	r0
    1162:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1166:	0f 90       	pop	r0
    1168:	1f 90       	pop	r1
    116a:	18 95       	reti

0000116c <main>:

int main(void)
{
    116c:	cf 93       	push	r28
    116e:	df 93       	push	r29
    1170:	cd b7       	in	r28, 0x3d	; 61
    1172:	de b7       	in	r29, 0x3e	; 62
    1174:	6a 97       	sbiw	r28, 0x1a	; 26
    1176:	0f b6       	in	r0, 0x3f	; 63
    1178:	f8 94       	cli
    117a:	de bf       	out	0x3e, r29	; 62
    117c:	0f be       	out	0x3f, r0	; 63
    117e:	cd bf       	out	0x3d, r28	; 61
	stdout = &lcd_str; // redefines std output to output to LCD file output, that file is what writes to LCD
    1180:	80 e0       	ldi	r24, 0x00	; 0
    1182:	91 e0       	ldi	r25, 0x01	; 1
    1184:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <__iob+0x3>
    1188:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__iob+0x2>
    118c:	82 e0       	ldi	r24, 0x02	; 2
    118e:	8d 83       	std	Y+5, r24	; 0x05
\note For device with XTAL Divide Control Register (XDIV), \c x can actually range
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    1190:	80 e8       	ldi	r24, 0x80	; 128
    1192:	8e 83       	std	Y+6, r24	; 0x06
    __asm__ __volatile__ (
    1194:	8e 81       	ldd	r24, Y+6	; 0x06
    1196:	9d 81       	ldd	r25, Y+5	; 0x05
    1198:	0f b6       	in	r0, 0x3f	; 63
    119a:	f8 94       	cli
    119c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f8061>
    11a0:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f8061>
    11a4:	0f be       	out	0x3f, r0	; 63
	clock_prescale_set(2);

	lcd_init();
    11a6:	0e 94 cc 07 	call	0xf98	; 0xf98 <lcd_init>
	
	DDRD = DDRD | (1 << 5); // set PD5 as output
    11aa:	8a e2       	ldi	r24, 0x2A	; 42
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	2a e2       	ldi	r18, 0x2A	; 42
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	f9 01       	movw	r30, r18
    11b4:	20 81       	ld	r18, Z
    11b6:	20 62       	ori	r18, 0x20	; 32
    11b8:	fc 01       	movw	r30, r24
    11ba:	20 83       	st	Z, r18
	
	timer0_init();
    11bc:	0e 94 2c 09 	call	0x1258	; 0x1258 <timer0_init>
	
	double frequency = (double) (F_CPU / ((OCR0A + 1) * 4)) + 1 / 1000;
    11c0:	87 e4       	ldi	r24, 0x47	; 71
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	fc 01       	movw	r30, r24
    11c6:	80 81       	ld	r24, Z
    11c8:	88 2f       	mov	r24, r24
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	01 96       	adiw	r24, 0x01	; 1
    11ce:	88 0f       	add	r24, r24
    11d0:	99 1f       	adc	r25, r25
    11d2:	88 0f       	add	r24, r24
    11d4:	99 1f       	adc	r25, r25
    11d6:	9c 01       	movw	r18, r24
    11d8:	99 0f       	add	r25, r25
    11da:	44 0b       	sbc	r20, r20
    11dc:	55 0b       	sbc	r21, r21
    11de:	80 e0       	ldi	r24, 0x00	; 0
    11e0:	92 e1       	ldi	r25, 0x12	; 18
    11e2:	aa e7       	ldi	r26, 0x7A	; 122
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	bc 01       	movw	r22, r24
    11e8:	cd 01       	movw	r24, r26
    11ea:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__udivmodsi4>
    11ee:	da 01       	movw	r26, r20
    11f0:	c9 01       	movw	r24, r18
    11f2:	bc 01       	movw	r22, r24
    11f4:	cd 01       	movw	r24, r26
    11f6:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__floatunsisf>
    11fa:	dc 01       	movw	r26, r24
    11fc:	cb 01       	movw	r24, r22
    11fe:	20 e0       	ldi	r18, 0x00	; 0
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	a9 01       	movw	r20, r18
    1204:	bc 01       	movw	r22, r24
    1206:	cd 01       	movw	r24, r26
    1208:	0e 94 c1 09 	call	0x1382	; 0x1382 <__addsf3>
    120c:	dc 01       	movw	r26, r24
    120e:	cb 01       	movw	r24, r22
    1210:	89 83       	std	Y+1, r24	; 0x01
    1212:	9a 83       	std	Y+2, r25	; 0x02
    1214:	ab 83       	std	Y+3, r26	; 0x03
    1216:	bc 83       	std	Y+4, r27	; 0x04
	char str_freq[20];
	frequencyToString(frequency, str_freq, sizeof(str_freq));
    1218:	ae 01       	movw	r20, r28
    121a:	49 5f       	subi	r20, 0xF9	; 249
    121c:	5f 4f       	sbci	r21, 0xFF	; 255
    121e:	89 81       	ldd	r24, Y+1	; 0x01
    1220:	9a 81       	ldd	r25, Y+2	; 0x02
    1222:	ab 81       	ldd	r26, Y+3	; 0x03
    1224:	bc 81       	ldd	r27, Y+4	; 0x04
    1226:	24 e1       	ldi	r18, 0x14	; 20
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	bc 01       	movw	r22, r24
    122c:	cd 01       	movw	r24, r26
    122e:	0e 94 51 09 	call	0x12a2	; 0x12a2 <frequencyToString>
	printf("Freq: %s", str_freq);
    1232:	ce 01       	movw	r24, r28
    1234:	07 96       	adiw	r24, 0x07	; 7
    1236:	29 2f       	mov	r18, r25
    1238:	2f 93       	push	r18
    123a:	8f 93       	push	r24
    123c:	8f e0       	ldi	r24, 0x0F	; 15
    123e:	91 e0       	ldi	r25, 0x01	; 1
    1240:	89 2f       	mov	r24, r25
    1242:	8f 93       	push	r24
    1244:	8f e0       	ldi	r24, 0x0F	; 15
    1246:	91 e0       	ldi	r25, 0x01	; 1
    1248:	8f 93       	push	r24
    124a:	0e 94 20 0c 	call	0x1840	; 0x1840 <printf>
    124e:	0f 90       	pop	r0
    1250:	0f 90       	pop	r0
    1252:	0f 90       	pop	r0
    1254:	0f 90       	pop	r0
	
	
    while (1) {

    }
    1256:	ff cf       	rjmp	.-2      	; 0x1256 <main+0xea>

00001258 <timer0_init>:
	
}

void timer0_init() {
    1258:	cf 93       	push	r28
    125a:	df 93       	push	r29
    125c:	cd b7       	in	r28, 0x3d	; 61
    125e:	de b7       	in	r29, 0x3e	; 62
	// Set the timer to CTC mode (Clear Timer on Compare Match) (WGM01 = 1, WGM00 = 0)
	TCCR0A |= (1 << WGM01);
    1260:	84 e4       	ldi	r24, 0x44	; 68
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	24 e4       	ldi	r18, 0x44	; 68
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	f9 01       	movw	r30, r18
    126a:	20 81       	ld	r18, Z
    126c:	22 60       	ori	r18, 0x02	; 2
    126e:	fc 01       	movw	r30, r24
    1270:	20 83       	st	Z, r18
	
	// Set the prescaler
	TCCR0B = (1 << CS00);
    1272:	85 e4       	ldi	r24, 0x45	; 69
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	21 e0       	ldi	r18, 0x01	; 1
    1278:	fc 01       	movw	r30, r24
    127a:	20 83       	st	Z, r18
	
	// Set OCR0A for the compare match value
	OCR0A = PWM_PERIOD;
    127c:	87 e4       	ldi	r24, 0x47	; 71
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	24 e6       	ldi	r18, 0x64	; 100
    1282:	fc 01       	movw	r30, r24
    1284:	20 83       	st	Z, r18

	// Enable Timer0 Output Compare Match A Interrupt
	TIMSK0 |= (1 << OCIE0A);
    1286:	8e e6       	ldi	r24, 0x6E	; 110
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	2e e6       	ldi	r18, 0x6E	; 110
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	f9 01       	movw	r30, r18
    1290:	20 81       	ld	r18, Z
    1292:	22 60       	ori	r18, 0x02	; 2
    1294:	fc 01       	movw	r30, r24
    1296:	20 83       	st	Z, r18
	
	// Enable global interrupts
	sei();
    1298:	78 94       	sei
}
    129a:	00 00       	nop
    129c:	df 91       	pop	r29
    129e:	cf 91       	pop	r28
    12a0:	08 95       	ret

000012a2 <frequencyToString>:

void frequencyToString(double frequency, char *str_freq, size_t max_len) {
    12a2:	cf 93       	push	r28
    12a4:	df 93       	push	r29
    12a6:	cd b7       	in	r28, 0x3d	; 61
    12a8:	de b7       	in	r29, 0x3e	; 62
    12aa:	2c 97       	sbiw	r28, 0x0c	; 12
    12ac:	0f b6       	in	r0, 0x3f	; 63
    12ae:	f8 94       	cli
    12b0:	de bf       	out	0x3e, r29	; 62
    12b2:	0f be       	out	0x3f, r0	; 63
    12b4:	cd bf       	out	0x3d, r28	; 61
    12b6:	6d 83       	std	Y+5, r22	; 0x05
    12b8:	7e 83       	std	Y+6, r23	; 0x06
    12ba:	8f 83       	std	Y+7, r24	; 0x07
    12bc:	98 87       	std	Y+8, r25	; 0x08
    12be:	5a 87       	std	Y+10, r21	; 0x0a
    12c0:	49 87       	std	Y+9, r20	; 0x09
    12c2:	3c 87       	std	Y+12, r19	; 0x0c
    12c4:	2b 87       	std	Y+11, r18	; 0x0b
	// Extract integer part
	int intPart = (int)frequency;
    12c6:	6d 81       	ldd	r22, Y+5	; 0x05
    12c8:	7e 81       	ldd	r23, Y+6	; 0x06
    12ca:	8f 81       	ldd	r24, Y+7	; 0x07
    12cc:	98 85       	ldd	r25, Y+8	; 0x08
    12ce:	0e 94 a4 0a 	call	0x1548	; 0x1548 <__fixsfsi>
    12d2:	dc 01       	movw	r26, r24
    12d4:	cb 01       	movw	r24, r22
    12d6:	9a 83       	std	Y+2, r25	; 0x02
    12d8:	89 83       	std	Y+1, r24	; 0x01
	
	// Extract fractional part
	int fracPart = (int)((frequency - intPart) * 100); // Considering two decimal places
    12da:	89 81       	ldd	r24, Y+1	; 0x01
    12dc:	9a 81       	ldd	r25, Y+2	; 0x02
    12de:	09 2e       	mov	r0, r25
    12e0:	00 0c       	add	r0, r0
    12e2:	aa 0b       	sbc	r26, r26
    12e4:	bb 0b       	sbc	r27, r27
    12e6:	bc 01       	movw	r22, r24
    12e8:	cd 01       	movw	r24, r26
    12ea:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <__floatsisf>
    12ee:	dc 01       	movw	r26, r24
    12f0:	cb 01       	movw	r24, r22
    12f2:	9c 01       	movw	r18, r24
    12f4:	ad 01       	movw	r20, r26
    12f6:	6d 81       	ldd	r22, Y+5	; 0x05
    12f8:	7e 81       	ldd	r23, Y+6	; 0x06
    12fa:	8f 81       	ldd	r24, Y+7	; 0x07
    12fc:	98 85       	ldd	r25, Y+8	; 0x08
    12fe:	0e 94 c0 09 	call	0x1380	; 0x1380 <__subsf3>
    1302:	dc 01       	movw	r26, r24
    1304:	cb 01       	movw	r24, r22
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	48 ec       	ldi	r20, 0xC8	; 200
    130c:	52 e4       	ldi	r21, 0x42	; 66
    130e:	bc 01       	movw	r22, r24
    1310:	cd 01       	movw	r24, r26
    1312:	0e 94 91 0b 	call	0x1722	; 0x1722 <__mulsf3>
    1316:	dc 01       	movw	r26, r24
    1318:	cb 01       	movw	r24, r22
    131a:	bc 01       	movw	r22, r24
    131c:	cd 01       	movw	r24, r26
    131e:	0e 94 a4 0a 	call	0x1548	; 0x1548 <__fixsfsi>
    1322:	dc 01       	movw	r26, r24
    1324:	cb 01       	movw	r24, r22
    1326:	9c 83       	std	Y+4, r25	; 0x04
    1328:	8b 83       	std	Y+3, r24	; 0x03

	// Convert to string
	snprintf(str_freq, max_len, "%d.%02d", intPart, fracPart);
    132a:	8c 81       	ldd	r24, Y+4	; 0x04
    132c:	8f 93       	push	r24
    132e:	8b 81       	ldd	r24, Y+3	; 0x03
    1330:	8f 93       	push	r24
    1332:	8a 81       	ldd	r24, Y+2	; 0x02
    1334:	8f 93       	push	r24
    1336:	89 81       	ldd	r24, Y+1	; 0x01
    1338:	8f 93       	push	r24
    133a:	88 e1       	ldi	r24, 0x18	; 24
    133c:	91 e0       	ldi	r25, 0x01	; 1
    133e:	89 2f       	mov	r24, r25
    1340:	8f 93       	push	r24
    1342:	88 e1       	ldi	r24, 0x18	; 24
    1344:	91 e0       	ldi	r25, 0x01	; 1
    1346:	8f 93       	push	r24
    1348:	8c 85       	ldd	r24, Y+12	; 0x0c
    134a:	8f 93       	push	r24
    134c:	8b 85       	ldd	r24, Y+11	; 0x0b
    134e:	8f 93       	push	r24
    1350:	8a 85       	ldd	r24, Y+10	; 0x0a
    1352:	8f 93       	push	r24
    1354:	89 85       	ldd	r24, Y+9	; 0x09
    1356:	8f 93       	push	r24
    1358:	0e 94 36 0c 	call	0x186c	; 0x186c <snprintf>
    135c:	8d b7       	in	r24, 0x3d	; 61
    135e:	9e b7       	in	r25, 0x3e	; 62
    1360:	0a 96       	adiw	r24, 0x0a	; 10
    1362:	0f b6       	in	r0, 0x3f	; 63
    1364:	f8 94       	cli
    1366:	de bf       	out	0x3e, r29	; 62
    1368:	0f be       	out	0x3f, r0	; 63
    136a:	cd bf       	out	0x3d, r28	; 61
}
    136c:	00 00       	nop
    136e:	2c 96       	adiw	r28, 0x0c	; 12
    1370:	0f b6       	in	r0, 0x3f	; 63
    1372:	f8 94       	cli
    1374:	de bf       	out	0x3e, r29	; 62
    1376:	0f be       	out	0x3f, r0	; 63
    1378:	cd bf       	out	0x3d, r28	; 61
    137a:	df 91       	pop	r29
    137c:	cf 91       	pop	r28
    137e:	08 95       	ret

00001380 <__subsf3>:
    1380:	50 58       	subi	r21, 0x80	; 128

00001382 <__addsf3>:
    1382:	bb 27       	eor	r27, r27
    1384:	aa 27       	eor	r26, r26
    1386:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <__addsf3x>
    138a:	0c 94 52 0b 	jmp	0x16a4	; 0x16a4 <__fp_round>
    138e:	0e 94 44 0b 	call	0x1688	; 0x1688 <__fp_pscA>
    1392:	38 f0       	brcs	.+14     	; 0x13a2 <__addsf3+0x20>
    1394:	0e 94 4b 0b 	call	0x1696	; 0x1696 <__fp_pscB>
    1398:	20 f0       	brcs	.+8      	; 0x13a2 <__addsf3+0x20>
    139a:	39 f4       	brne	.+14     	; 0x13aa <__addsf3+0x28>
    139c:	9f 3f       	cpi	r25, 0xFF	; 255
    139e:	19 f4       	brne	.+6      	; 0x13a6 <__addsf3+0x24>
    13a0:	26 f4       	brtc	.+8      	; 0x13aa <__addsf3+0x28>
    13a2:	0c 94 41 0b 	jmp	0x1682	; 0x1682 <__fp_nan>
    13a6:	0e f4       	brtc	.+2      	; 0x13aa <__addsf3+0x28>
    13a8:	e0 95       	com	r30
    13aa:	e7 fb       	bst	r30, 7
    13ac:	0c 94 3b 0b 	jmp	0x1676	; 0x1676 <__fp_inf>

000013b0 <__addsf3x>:
    13b0:	e9 2f       	mov	r30, r25
    13b2:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <__fp_split3>
    13b6:	58 f3       	brcs	.-42     	; 0x138e <__addsf3+0xc>
    13b8:	ba 17       	cp	r27, r26
    13ba:	62 07       	cpc	r22, r18
    13bc:	73 07       	cpc	r23, r19
    13be:	84 07       	cpc	r24, r20
    13c0:	95 07       	cpc	r25, r21
    13c2:	20 f0       	brcs	.+8      	; 0x13cc <__addsf3x+0x1c>
    13c4:	79 f4       	brne	.+30     	; 0x13e4 <__addsf3x+0x34>
    13c6:	a6 f5       	brtc	.+104    	; 0x1430 <__addsf3x+0x80>
    13c8:	0c 94 85 0b 	jmp	0x170a	; 0x170a <__fp_zero>
    13cc:	0e f4       	brtc	.+2      	; 0x13d0 <__addsf3x+0x20>
    13ce:	e0 95       	com	r30
    13d0:	0b 2e       	mov	r0, r27
    13d2:	ba 2f       	mov	r27, r26
    13d4:	a0 2d       	mov	r26, r0
    13d6:	0b 01       	movw	r0, r22
    13d8:	b9 01       	movw	r22, r18
    13da:	90 01       	movw	r18, r0
    13dc:	0c 01       	movw	r0, r24
    13de:	ca 01       	movw	r24, r20
    13e0:	a0 01       	movw	r20, r0
    13e2:	11 24       	eor	r1, r1
    13e4:	ff 27       	eor	r31, r31
    13e6:	59 1b       	sub	r21, r25
    13e8:	99 f0       	breq	.+38     	; 0x1410 <__addsf3x+0x60>
    13ea:	59 3f       	cpi	r21, 0xF9	; 249
    13ec:	50 f4       	brcc	.+20     	; 0x1402 <__addsf3x+0x52>
    13ee:	50 3e       	cpi	r21, 0xE0	; 224
    13f0:	68 f1       	brcs	.+90     	; 0x144c <__addsf3x+0x9c>
    13f2:	1a 16       	cp	r1, r26
    13f4:	f0 40       	sbci	r31, 0x00	; 0
    13f6:	a2 2f       	mov	r26, r18
    13f8:	23 2f       	mov	r18, r19
    13fa:	34 2f       	mov	r19, r20
    13fc:	44 27       	eor	r20, r20
    13fe:	58 5f       	subi	r21, 0xF8	; 248
    1400:	f3 cf       	rjmp	.-26     	; 0x13e8 <__addsf3x+0x38>
    1402:	46 95       	lsr	r20
    1404:	37 95       	ror	r19
    1406:	27 95       	ror	r18
    1408:	a7 95       	ror	r26
    140a:	f0 40       	sbci	r31, 0x00	; 0
    140c:	53 95       	inc	r21
    140e:	c9 f7       	brne	.-14     	; 0x1402 <__addsf3x+0x52>
    1410:	7e f4       	brtc	.+30     	; 0x1430 <__addsf3x+0x80>
    1412:	1f 16       	cp	r1, r31
    1414:	ba 0b       	sbc	r27, r26
    1416:	62 0b       	sbc	r22, r18
    1418:	73 0b       	sbc	r23, r19
    141a:	84 0b       	sbc	r24, r20
    141c:	ba f0       	brmi	.+46     	; 0x144c <__addsf3x+0x9c>
    141e:	91 50       	subi	r25, 0x01	; 1
    1420:	a1 f0       	breq	.+40     	; 0x144a <__addsf3x+0x9a>
    1422:	ff 0f       	add	r31, r31
    1424:	bb 1f       	adc	r27, r27
    1426:	66 1f       	adc	r22, r22
    1428:	77 1f       	adc	r23, r23
    142a:	88 1f       	adc	r24, r24
    142c:	c2 f7       	brpl	.-16     	; 0x141e <__addsf3x+0x6e>
    142e:	0e c0       	rjmp	.+28     	; 0x144c <__addsf3x+0x9c>
    1430:	ba 0f       	add	r27, r26
    1432:	62 1f       	adc	r22, r18
    1434:	73 1f       	adc	r23, r19
    1436:	84 1f       	adc	r24, r20
    1438:	48 f4       	brcc	.+18     	; 0x144c <__addsf3x+0x9c>
    143a:	87 95       	ror	r24
    143c:	77 95       	ror	r23
    143e:	67 95       	ror	r22
    1440:	b7 95       	ror	r27
    1442:	f7 95       	ror	r31
    1444:	9e 3f       	cpi	r25, 0xFE	; 254
    1446:	08 f0       	brcs	.+2      	; 0x144a <__addsf3x+0x9a>
    1448:	b0 cf       	rjmp	.-160    	; 0x13aa <__addsf3+0x28>
    144a:	93 95       	inc	r25
    144c:	88 0f       	add	r24, r24
    144e:	08 f0       	brcs	.+2      	; 0x1452 <__addsf3x+0xa2>
    1450:	99 27       	eor	r25, r25
    1452:	ee 0f       	add	r30, r30
    1454:	97 95       	ror	r25
    1456:	87 95       	ror	r24
    1458:	08 95       	ret

0000145a <__cmpsf2>:
    145a:	0e 94 17 0b 	call	0x162e	; 0x162e <__fp_cmp>
    145e:	08 f4       	brcc	.+2      	; 0x1462 <__cmpsf2+0x8>
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	08 95       	ret

00001464 <__divsf3>:
    1464:	0e 94 46 0a 	call	0x148c	; 0x148c <__divsf3x>
    1468:	0c 94 52 0b 	jmp	0x16a4	; 0x16a4 <__fp_round>
    146c:	0e 94 4b 0b 	call	0x1696	; 0x1696 <__fp_pscB>
    1470:	58 f0       	brcs	.+22     	; 0x1488 <__divsf3+0x24>
    1472:	0e 94 44 0b 	call	0x1688	; 0x1688 <__fp_pscA>
    1476:	40 f0       	brcs	.+16     	; 0x1488 <__divsf3+0x24>
    1478:	29 f4       	brne	.+10     	; 0x1484 <__divsf3+0x20>
    147a:	5f 3f       	cpi	r21, 0xFF	; 255
    147c:	29 f0       	breq	.+10     	; 0x1488 <__divsf3+0x24>
    147e:	0c 94 3b 0b 	jmp	0x1676	; 0x1676 <__fp_inf>
    1482:	51 11       	cpse	r21, r1
    1484:	0c 94 86 0b 	jmp	0x170c	; 0x170c <__fp_szero>
    1488:	0c 94 41 0b 	jmp	0x1682	; 0x1682 <__fp_nan>

0000148c <__divsf3x>:
    148c:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <__fp_split3>
    1490:	68 f3       	brcs	.-38     	; 0x146c <__divsf3+0x8>

00001492 <__divsf3_pse>:
    1492:	99 23       	and	r25, r25
    1494:	b1 f3       	breq	.-20     	; 0x1482 <__divsf3+0x1e>
    1496:	55 23       	and	r21, r21
    1498:	91 f3       	breq	.-28     	; 0x147e <__divsf3+0x1a>
    149a:	95 1b       	sub	r25, r21
    149c:	55 0b       	sbc	r21, r21
    149e:	bb 27       	eor	r27, r27
    14a0:	aa 27       	eor	r26, r26
    14a2:	62 17       	cp	r22, r18
    14a4:	73 07       	cpc	r23, r19
    14a6:	84 07       	cpc	r24, r20
    14a8:	38 f0       	brcs	.+14     	; 0x14b8 <__divsf3_pse+0x26>
    14aa:	9f 5f       	subi	r25, 0xFF	; 255
    14ac:	5f 4f       	sbci	r21, 0xFF	; 255
    14ae:	22 0f       	add	r18, r18
    14b0:	33 1f       	adc	r19, r19
    14b2:	44 1f       	adc	r20, r20
    14b4:	aa 1f       	adc	r26, r26
    14b6:	a9 f3       	breq	.-22     	; 0x14a2 <__divsf3_pse+0x10>
    14b8:	35 d0       	rcall	.+106    	; 0x1524 <__divsf3_pse+0x92>
    14ba:	0e 2e       	mov	r0, r30
    14bc:	3a f0       	brmi	.+14     	; 0x14cc <__divsf3_pse+0x3a>
    14be:	e0 e8       	ldi	r30, 0x80	; 128
    14c0:	32 d0       	rcall	.+100    	; 0x1526 <__divsf3_pse+0x94>
    14c2:	91 50       	subi	r25, 0x01	; 1
    14c4:	50 40       	sbci	r21, 0x00	; 0
    14c6:	e6 95       	lsr	r30
    14c8:	00 1c       	adc	r0, r0
    14ca:	ca f7       	brpl	.-14     	; 0x14be <__divsf3_pse+0x2c>
    14cc:	2b d0       	rcall	.+86     	; 0x1524 <__divsf3_pse+0x92>
    14ce:	fe 2f       	mov	r31, r30
    14d0:	29 d0       	rcall	.+82     	; 0x1524 <__divsf3_pse+0x92>
    14d2:	66 0f       	add	r22, r22
    14d4:	77 1f       	adc	r23, r23
    14d6:	88 1f       	adc	r24, r24
    14d8:	bb 1f       	adc	r27, r27
    14da:	26 17       	cp	r18, r22
    14dc:	37 07       	cpc	r19, r23
    14de:	48 07       	cpc	r20, r24
    14e0:	ab 07       	cpc	r26, r27
    14e2:	b0 e8       	ldi	r27, 0x80	; 128
    14e4:	09 f0       	breq	.+2      	; 0x14e8 <__divsf3_pse+0x56>
    14e6:	bb 0b       	sbc	r27, r27
    14e8:	80 2d       	mov	r24, r0
    14ea:	bf 01       	movw	r22, r30
    14ec:	ff 27       	eor	r31, r31
    14ee:	93 58       	subi	r25, 0x83	; 131
    14f0:	5f 4f       	sbci	r21, 0xFF	; 255
    14f2:	3a f0       	brmi	.+14     	; 0x1502 <__divsf3_pse+0x70>
    14f4:	9e 3f       	cpi	r25, 0xFE	; 254
    14f6:	51 05       	cpc	r21, r1
    14f8:	78 f0       	brcs	.+30     	; 0x1518 <__divsf3_pse+0x86>
    14fa:	0c 94 3b 0b 	jmp	0x1676	; 0x1676 <__fp_inf>
    14fe:	0c 94 86 0b 	jmp	0x170c	; 0x170c <__fp_szero>
    1502:	5f 3f       	cpi	r21, 0xFF	; 255
    1504:	e4 f3       	brlt	.-8      	; 0x14fe <__divsf3_pse+0x6c>
    1506:	98 3e       	cpi	r25, 0xE8	; 232
    1508:	d4 f3       	brlt	.-12     	; 0x14fe <__divsf3_pse+0x6c>
    150a:	86 95       	lsr	r24
    150c:	77 95       	ror	r23
    150e:	67 95       	ror	r22
    1510:	b7 95       	ror	r27
    1512:	f7 95       	ror	r31
    1514:	9f 5f       	subi	r25, 0xFF	; 255
    1516:	c9 f7       	brne	.-14     	; 0x150a <__divsf3_pse+0x78>
    1518:	88 0f       	add	r24, r24
    151a:	91 1d       	adc	r25, r1
    151c:	96 95       	lsr	r25
    151e:	87 95       	ror	r24
    1520:	97 f9       	bld	r25, 7
    1522:	08 95       	ret
    1524:	e1 e0       	ldi	r30, 0x01	; 1
    1526:	66 0f       	add	r22, r22
    1528:	77 1f       	adc	r23, r23
    152a:	88 1f       	adc	r24, r24
    152c:	bb 1f       	adc	r27, r27
    152e:	62 17       	cp	r22, r18
    1530:	73 07       	cpc	r23, r19
    1532:	84 07       	cpc	r24, r20
    1534:	ba 07       	cpc	r27, r26
    1536:	20 f0       	brcs	.+8      	; 0x1540 <__divsf3_pse+0xae>
    1538:	62 1b       	sub	r22, r18
    153a:	73 0b       	sbc	r23, r19
    153c:	84 0b       	sbc	r24, r20
    153e:	ba 0b       	sbc	r27, r26
    1540:	ee 1f       	adc	r30, r30
    1542:	88 f7       	brcc	.-30     	; 0x1526 <__divsf3_pse+0x94>
    1544:	e0 95       	com	r30
    1546:	08 95       	ret

00001548 <__fixsfsi>:
    1548:	0e 94 ab 0a 	call	0x1556	; 0x1556 <__fixunssfsi>
    154c:	68 94       	set
    154e:	b1 11       	cpse	r27, r1
    1550:	0c 94 86 0b 	jmp	0x170c	; 0x170c <__fp_szero>
    1554:	08 95       	ret

00001556 <__fixunssfsi>:
    1556:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <__fp_splitA>
    155a:	88 f0       	brcs	.+34     	; 0x157e <__fixunssfsi+0x28>
    155c:	9f 57       	subi	r25, 0x7F	; 127
    155e:	98 f0       	brcs	.+38     	; 0x1586 <__fixunssfsi+0x30>
    1560:	b9 2f       	mov	r27, r25
    1562:	99 27       	eor	r25, r25
    1564:	b7 51       	subi	r27, 0x17	; 23
    1566:	b0 f0       	brcs	.+44     	; 0x1594 <__fixunssfsi+0x3e>
    1568:	e1 f0       	breq	.+56     	; 0x15a2 <__fixunssfsi+0x4c>
    156a:	66 0f       	add	r22, r22
    156c:	77 1f       	adc	r23, r23
    156e:	88 1f       	adc	r24, r24
    1570:	99 1f       	adc	r25, r25
    1572:	1a f0       	brmi	.+6      	; 0x157a <__fixunssfsi+0x24>
    1574:	ba 95       	dec	r27
    1576:	c9 f7       	brne	.-14     	; 0x156a <__fixunssfsi+0x14>
    1578:	14 c0       	rjmp	.+40     	; 0x15a2 <__fixunssfsi+0x4c>
    157a:	b1 30       	cpi	r27, 0x01	; 1
    157c:	91 f0       	breq	.+36     	; 0x15a2 <__fixunssfsi+0x4c>
    157e:	0e 94 85 0b 	call	0x170a	; 0x170a <__fp_zero>
    1582:	b1 e0       	ldi	r27, 0x01	; 1
    1584:	08 95       	ret
    1586:	0c 94 85 0b 	jmp	0x170a	; 0x170a <__fp_zero>
    158a:	67 2f       	mov	r22, r23
    158c:	78 2f       	mov	r23, r24
    158e:	88 27       	eor	r24, r24
    1590:	b8 5f       	subi	r27, 0xF8	; 248
    1592:	39 f0       	breq	.+14     	; 0x15a2 <__fixunssfsi+0x4c>
    1594:	b9 3f       	cpi	r27, 0xF9	; 249
    1596:	cc f3       	brlt	.-14     	; 0x158a <__fixunssfsi+0x34>
    1598:	86 95       	lsr	r24
    159a:	77 95       	ror	r23
    159c:	67 95       	ror	r22
    159e:	b3 95       	inc	r27
    15a0:	d9 f7       	brne	.-10     	; 0x1598 <__fixunssfsi+0x42>
    15a2:	3e f4       	brtc	.+14     	; 0x15b2 <__fixunssfsi+0x5c>
    15a4:	90 95       	com	r25
    15a6:	80 95       	com	r24
    15a8:	70 95       	com	r23
    15aa:	61 95       	neg	r22
    15ac:	7f 4f       	sbci	r23, 0xFF	; 255
    15ae:	8f 4f       	sbci	r24, 0xFF	; 255
    15b0:	9f 4f       	sbci	r25, 0xFF	; 255
    15b2:	08 95       	ret

000015b4 <__floatunsisf>:
    15b4:	e8 94       	clt
    15b6:	09 c0       	rjmp	.+18     	; 0x15ca <__floatsisf+0x12>

000015b8 <__floatsisf>:
    15b8:	97 fb       	bst	r25, 7
    15ba:	3e f4       	brtc	.+14     	; 0x15ca <__floatsisf+0x12>
    15bc:	90 95       	com	r25
    15be:	80 95       	com	r24
    15c0:	70 95       	com	r23
    15c2:	61 95       	neg	r22
    15c4:	7f 4f       	sbci	r23, 0xFF	; 255
    15c6:	8f 4f       	sbci	r24, 0xFF	; 255
    15c8:	9f 4f       	sbci	r25, 0xFF	; 255
    15ca:	99 23       	and	r25, r25
    15cc:	a9 f0       	breq	.+42     	; 0x15f8 <__floatsisf+0x40>
    15ce:	f9 2f       	mov	r31, r25
    15d0:	96 e9       	ldi	r25, 0x96	; 150
    15d2:	bb 27       	eor	r27, r27
    15d4:	93 95       	inc	r25
    15d6:	f6 95       	lsr	r31
    15d8:	87 95       	ror	r24
    15da:	77 95       	ror	r23
    15dc:	67 95       	ror	r22
    15de:	b7 95       	ror	r27
    15e0:	f1 11       	cpse	r31, r1
    15e2:	f8 cf       	rjmp	.-16     	; 0x15d4 <__floatsisf+0x1c>
    15e4:	fa f4       	brpl	.+62     	; 0x1624 <__floatsisf+0x6c>
    15e6:	bb 0f       	add	r27, r27
    15e8:	11 f4       	brne	.+4      	; 0x15ee <__floatsisf+0x36>
    15ea:	60 ff       	sbrs	r22, 0
    15ec:	1b c0       	rjmp	.+54     	; 0x1624 <__floatsisf+0x6c>
    15ee:	6f 5f       	subi	r22, 0xFF	; 255
    15f0:	7f 4f       	sbci	r23, 0xFF	; 255
    15f2:	8f 4f       	sbci	r24, 0xFF	; 255
    15f4:	9f 4f       	sbci	r25, 0xFF	; 255
    15f6:	16 c0       	rjmp	.+44     	; 0x1624 <__floatsisf+0x6c>
    15f8:	88 23       	and	r24, r24
    15fa:	11 f0       	breq	.+4      	; 0x1600 <__floatsisf+0x48>
    15fc:	96 e9       	ldi	r25, 0x96	; 150
    15fe:	11 c0       	rjmp	.+34     	; 0x1622 <__floatsisf+0x6a>
    1600:	77 23       	and	r23, r23
    1602:	21 f0       	breq	.+8      	; 0x160c <__floatsisf+0x54>
    1604:	9e e8       	ldi	r25, 0x8E	; 142
    1606:	87 2f       	mov	r24, r23
    1608:	76 2f       	mov	r23, r22
    160a:	05 c0       	rjmp	.+10     	; 0x1616 <__floatsisf+0x5e>
    160c:	66 23       	and	r22, r22
    160e:	71 f0       	breq	.+28     	; 0x162c <__floatsisf+0x74>
    1610:	96 e8       	ldi	r25, 0x86	; 134
    1612:	86 2f       	mov	r24, r22
    1614:	70 e0       	ldi	r23, 0x00	; 0
    1616:	60 e0       	ldi	r22, 0x00	; 0
    1618:	2a f0       	brmi	.+10     	; 0x1624 <__floatsisf+0x6c>
    161a:	9a 95       	dec	r25
    161c:	66 0f       	add	r22, r22
    161e:	77 1f       	adc	r23, r23
    1620:	88 1f       	adc	r24, r24
    1622:	da f7       	brpl	.-10     	; 0x161a <__floatsisf+0x62>
    1624:	88 0f       	add	r24, r24
    1626:	96 95       	lsr	r25
    1628:	87 95       	ror	r24
    162a:	97 f9       	bld	r25, 7
    162c:	08 95       	ret

0000162e <__fp_cmp>:
    162e:	99 0f       	add	r25, r25
    1630:	00 08       	sbc	r0, r0
    1632:	55 0f       	add	r21, r21
    1634:	aa 0b       	sbc	r26, r26
    1636:	e0 e8       	ldi	r30, 0x80	; 128
    1638:	fe ef       	ldi	r31, 0xFE	; 254
    163a:	16 16       	cp	r1, r22
    163c:	17 06       	cpc	r1, r23
    163e:	e8 07       	cpc	r30, r24
    1640:	f9 07       	cpc	r31, r25
    1642:	c0 f0       	brcs	.+48     	; 0x1674 <__fp_cmp+0x46>
    1644:	12 16       	cp	r1, r18
    1646:	13 06       	cpc	r1, r19
    1648:	e4 07       	cpc	r30, r20
    164a:	f5 07       	cpc	r31, r21
    164c:	98 f0       	brcs	.+38     	; 0x1674 <__fp_cmp+0x46>
    164e:	62 1b       	sub	r22, r18
    1650:	73 0b       	sbc	r23, r19
    1652:	84 0b       	sbc	r24, r20
    1654:	95 0b       	sbc	r25, r21
    1656:	39 f4       	brne	.+14     	; 0x1666 <__fp_cmp+0x38>
    1658:	0a 26       	eor	r0, r26
    165a:	61 f0       	breq	.+24     	; 0x1674 <__fp_cmp+0x46>
    165c:	23 2b       	or	r18, r19
    165e:	24 2b       	or	r18, r20
    1660:	25 2b       	or	r18, r21
    1662:	21 f4       	brne	.+8      	; 0x166c <__fp_cmp+0x3e>
    1664:	08 95       	ret
    1666:	0a 26       	eor	r0, r26
    1668:	09 f4       	brne	.+2      	; 0x166c <__fp_cmp+0x3e>
    166a:	a1 40       	sbci	r26, 0x01	; 1
    166c:	a6 95       	lsr	r26
    166e:	8f ef       	ldi	r24, 0xFF	; 255
    1670:	81 1d       	adc	r24, r1
    1672:	81 1d       	adc	r24, r1
    1674:	08 95       	ret

00001676 <__fp_inf>:
    1676:	97 f9       	bld	r25, 7
    1678:	9f 67       	ori	r25, 0x7F	; 127
    167a:	80 e8       	ldi	r24, 0x80	; 128
    167c:	70 e0       	ldi	r23, 0x00	; 0
    167e:	60 e0       	ldi	r22, 0x00	; 0
    1680:	08 95       	ret

00001682 <__fp_nan>:
    1682:	9f ef       	ldi	r25, 0xFF	; 255
    1684:	80 ec       	ldi	r24, 0xC0	; 192
    1686:	08 95       	ret

00001688 <__fp_pscA>:
    1688:	00 24       	eor	r0, r0
    168a:	0a 94       	dec	r0
    168c:	16 16       	cp	r1, r22
    168e:	17 06       	cpc	r1, r23
    1690:	18 06       	cpc	r1, r24
    1692:	09 06       	cpc	r0, r25
    1694:	08 95       	ret

00001696 <__fp_pscB>:
    1696:	00 24       	eor	r0, r0
    1698:	0a 94       	dec	r0
    169a:	12 16       	cp	r1, r18
    169c:	13 06       	cpc	r1, r19
    169e:	14 06       	cpc	r1, r20
    16a0:	05 06       	cpc	r0, r21
    16a2:	08 95       	ret

000016a4 <__fp_round>:
    16a4:	09 2e       	mov	r0, r25
    16a6:	03 94       	inc	r0
    16a8:	00 0c       	add	r0, r0
    16aa:	11 f4       	brne	.+4      	; 0x16b0 <__fp_round+0xc>
    16ac:	88 23       	and	r24, r24
    16ae:	52 f0       	brmi	.+20     	; 0x16c4 <__fp_round+0x20>
    16b0:	bb 0f       	add	r27, r27
    16b2:	40 f4       	brcc	.+16     	; 0x16c4 <__fp_round+0x20>
    16b4:	bf 2b       	or	r27, r31
    16b6:	11 f4       	brne	.+4      	; 0x16bc <__fp_round+0x18>
    16b8:	60 ff       	sbrs	r22, 0
    16ba:	04 c0       	rjmp	.+8      	; 0x16c4 <__fp_round+0x20>
    16bc:	6f 5f       	subi	r22, 0xFF	; 255
    16be:	7f 4f       	sbci	r23, 0xFF	; 255
    16c0:	8f 4f       	sbci	r24, 0xFF	; 255
    16c2:	9f 4f       	sbci	r25, 0xFF	; 255
    16c4:	08 95       	ret

000016c6 <__fp_split3>:
    16c6:	57 fd       	sbrc	r21, 7
    16c8:	90 58       	subi	r25, 0x80	; 128
    16ca:	44 0f       	add	r20, r20
    16cc:	55 1f       	adc	r21, r21
    16ce:	59 f0       	breq	.+22     	; 0x16e6 <__fp_splitA+0x10>
    16d0:	5f 3f       	cpi	r21, 0xFF	; 255
    16d2:	71 f0       	breq	.+28     	; 0x16f0 <__fp_splitA+0x1a>
    16d4:	47 95       	ror	r20

000016d6 <__fp_splitA>:
    16d6:	88 0f       	add	r24, r24
    16d8:	97 fb       	bst	r25, 7
    16da:	99 1f       	adc	r25, r25
    16dc:	61 f0       	breq	.+24     	; 0x16f6 <__fp_splitA+0x20>
    16de:	9f 3f       	cpi	r25, 0xFF	; 255
    16e0:	79 f0       	breq	.+30     	; 0x1700 <__fp_splitA+0x2a>
    16e2:	87 95       	ror	r24
    16e4:	08 95       	ret
    16e6:	12 16       	cp	r1, r18
    16e8:	13 06       	cpc	r1, r19
    16ea:	14 06       	cpc	r1, r20
    16ec:	55 1f       	adc	r21, r21
    16ee:	f2 cf       	rjmp	.-28     	; 0x16d4 <__fp_split3+0xe>
    16f0:	46 95       	lsr	r20
    16f2:	f1 df       	rcall	.-30     	; 0x16d6 <__fp_splitA>
    16f4:	08 c0       	rjmp	.+16     	; 0x1706 <__fp_splitA+0x30>
    16f6:	16 16       	cp	r1, r22
    16f8:	17 06       	cpc	r1, r23
    16fa:	18 06       	cpc	r1, r24
    16fc:	99 1f       	adc	r25, r25
    16fe:	f1 cf       	rjmp	.-30     	; 0x16e2 <__fp_splitA+0xc>
    1700:	86 95       	lsr	r24
    1702:	71 05       	cpc	r23, r1
    1704:	61 05       	cpc	r22, r1
    1706:	08 94       	sec
    1708:	08 95       	ret

0000170a <__fp_zero>:
    170a:	e8 94       	clt

0000170c <__fp_szero>:
    170c:	bb 27       	eor	r27, r27
    170e:	66 27       	eor	r22, r22
    1710:	77 27       	eor	r23, r23
    1712:	cb 01       	movw	r24, r22
    1714:	97 f9       	bld	r25, 7
    1716:	08 95       	ret

00001718 <__gesf2>:
    1718:	0e 94 17 0b 	call	0x162e	; 0x162e <__fp_cmp>
    171c:	08 f4       	brcc	.+2      	; 0x1720 <__gesf2+0x8>
    171e:	8f ef       	ldi	r24, 0xFF	; 255
    1720:	08 95       	ret

00001722 <__mulsf3>:
    1722:	0e 94 a4 0b 	call	0x1748	; 0x1748 <__mulsf3x>
    1726:	0c 94 52 0b 	jmp	0x16a4	; 0x16a4 <__fp_round>
    172a:	0e 94 44 0b 	call	0x1688	; 0x1688 <__fp_pscA>
    172e:	38 f0       	brcs	.+14     	; 0x173e <__mulsf3+0x1c>
    1730:	0e 94 4b 0b 	call	0x1696	; 0x1696 <__fp_pscB>
    1734:	20 f0       	brcs	.+8      	; 0x173e <__mulsf3+0x1c>
    1736:	95 23       	and	r25, r21
    1738:	11 f0       	breq	.+4      	; 0x173e <__mulsf3+0x1c>
    173a:	0c 94 3b 0b 	jmp	0x1676	; 0x1676 <__fp_inf>
    173e:	0c 94 41 0b 	jmp	0x1682	; 0x1682 <__fp_nan>
    1742:	11 24       	eor	r1, r1
    1744:	0c 94 86 0b 	jmp	0x170c	; 0x170c <__fp_szero>

00001748 <__mulsf3x>:
    1748:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <__fp_split3>
    174c:	70 f3       	brcs	.-36     	; 0x172a <__mulsf3+0x8>

0000174e <__mulsf3_pse>:
    174e:	95 9f       	mul	r25, r21
    1750:	c1 f3       	breq	.-16     	; 0x1742 <__mulsf3+0x20>
    1752:	95 0f       	add	r25, r21
    1754:	50 e0       	ldi	r21, 0x00	; 0
    1756:	55 1f       	adc	r21, r21
    1758:	62 9f       	mul	r22, r18
    175a:	f0 01       	movw	r30, r0
    175c:	72 9f       	mul	r23, r18
    175e:	bb 27       	eor	r27, r27
    1760:	f0 0d       	add	r31, r0
    1762:	b1 1d       	adc	r27, r1
    1764:	63 9f       	mul	r22, r19
    1766:	aa 27       	eor	r26, r26
    1768:	f0 0d       	add	r31, r0
    176a:	b1 1d       	adc	r27, r1
    176c:	aa 1f       	adc	r26, r26
    176e:	64 9f       	mul	r22, r20
    1770:	66 27       	eor	r22, r22
    1772:	b0 0d       	add	r27, r0
    1774:	a1 1d       	adc	r26, r1
    1776:	66 1f       	adc	r22, r22
    1778:	82 9f       	mul	r24, r18
    177a:	22 27       	eor	r18, r18
    177c:	b0 0d       	add	r27, r0
    177e:	a1 1d       	adc	r26, r1
    1780:	62 1f       	adc	r22, r18
    1782:	73 9f       	mul	r23, r19
    1784:	b0 0d       	add	r27, r0
    1786:	a1 1d       	adc	r26, r1
    1788:	62 1f       	adc	r22, r18
    178a:	83 9f       	mul	r24, r19
    178c:	a0 0d       	add	r26, r0
    178e:	61 1d       	adc	r22, r1
    1790:	22 1f       	adc	r18, r18
    1792:	74 9f       	mul	r23, r20
    1794:	33 27       	eor	r19, r19
    1796:	a0 0d       	add	r26, r0
    1798:	61 1d       	adc	r22, r1
    179a:	23 1f       	adc	r18, r19
    179c:	84 9f       	mul	r24, r20
    179e:	60 0d       	add	r22, r0
    17a0:	21 1d       	adc	r18, r1
    17a2:	82 2f       	mov	r24, r18
    17a4:	76 2f       	mov	r23, r22
    17a6:	6a 2f       	mov	r22, r26
    17a8:	11 24       	eor	r1, r1
    17aa:	9f 57       	subi	r25, 0x7F	; 127
    17ac:	50 40       	sbci	r21, 0x00	; 0
    17ae:	9a f0       	brmi	.+38     	; 0x17d6 <__mulsf3_pse+0x88>
    17b0:	f1 f0       	breq	.+60     	; 0x17ee <__mulsf3_pse+0xa0>
    17b2:	88 23       	and	r24, r24
    17b4:	4a f0       	brmi	.+18     	; 0x17c8 <__mulsf3_pse+0x7a>
    17b6:	ee 0f       	add	r30, r30
    17b8:	ff 1f       	adc	r31, r31
    17ba:	bb 1f       	adc	r27, r27
    17bc:	66 1f       	adc	r22, r22
    17be:	77 1f       	adc	r23, r23
    17c0:	88 1f       	adc	r24, r24
    17c2:	91 50       	subi	r25, 0x01	; 1
    17c4:	50 40       	sbci	r21, 0x00	; 0
    17c6:	a9 f7       	brne	.-22     	; 0x17b2 <__mulsf3_pse+0x64>
    17c8:	9e 3f       	cpi	r25, 0xFE	; 254
    17ca:	51 05       	cpc	r21, r1
    17cc:	80 f0       	brcs	.+32     	; 0x17ee <__mulsf3_pse+0xa0>
    17ce:	0c 94 3b 0b 	jmp	0x1676	; 0x1676 <__fp_inf>
    17d2:	0c 94 86 0b 	jmp	0x170c	; 0x170c <__fp_szero>
    17d6:	5f 3f       	cpi	r21, 0xFF	; 255
    17d8:	e4 f3       	brlt	.-8      	; 0x17d2 <__mulsf3_pse+0x84>
    17da:	98 3e       	cpi	r25, 0xE8	; 232
    17dc:	d4 f3       	brlt	.-12     	; 0x17d2 <__mulsf3_pse+0x84>
    17de:	86 95       	lsr	r24
    17e0:	77 95       	ror	r23
    17e2:	67 95       	ror	r22
    17e4:	b7 95       	ror	r27
    17e6:	f7 95       	ror	r31
    17e8:	e7 95       	ror	r30
    17ea:	9f 5f       	subi	r25, 0xFF	; 255
    17ec:	c1 f7       	brne	.-16     	; 0x17de <__mulsf3_pse+0x90>
    17ee:	fe 2b       	or	r31, r30
    17f0:	88 0f       	add	r24, r24
    17f2:	91 1d       	adc	r25, r1
    17f4:	96 95       	lsr	r25
    17f6:	87 95       	ror	r24
    17f8:	97 f9       	bld	r25, 7
    17fa:	08 95       	ret

000017fc <__udivmodsi4>:
    17fc:	a1 e2       	ldi	r26, 0x21	; 33
    17fe:	1a 2e       	mov	r1, r26
    1800:	aa 1b       	sub	r26, r26
    1802:	bb 1b       	sub	r27, r27
    1804:	fd 01       	movw	r30, r26
    1806:	0d c0       	rjmp	.+26     	; 0x1822 <__udivmodsi4_ep>

00001808 <__udivmodsi4_loop>:
    1808:	aa 1f       	adc	r26, r26
    180a:	bb 1f       	adc	r27, r27
    180c:	ee 1f       	adc	r30, r30
    180e:	ff 1f       	adc	r31, r31
    1810:	a2 17       	cp	r26, r18
    1812:	b3 07       	cpc	r27, r19
    1814:	e4 07       	cpc	r30, r20
    1816:	f5 07       	cpc	r31, r21
    1818:	20 f0       	brcs	.+8      	; 0x1822 <__udivmodsi4_ep>
    181a:	a2 1b       	sub	r26, r18
    181c:	b3 0b       	sbc	r27, r19
    181e:	e4 0b       	sbc	r30, r20
    1820:	f5 0b       	sbc	r31, r21

00001822 <__udivmodsi4_ep>:
    1822:	66 1f       	adc	r22, r22
    1824:	77 1f       	adc	r23, r23
    1826:	88 1f       	adc	r24, r24
    1828:	99 1f       	adc	r25, r25
    182a:	1a 94       	dec	r1
    182c:	69 f7       	brne	.-38     	; 0x1808 <__udivmodsi4_loop>
    182e:	60 95       	com	r22
    1830:	70 95       	com	r23
    1832:	80 95       	com	r24
    1834:	90 95       	com	r25
    1836:	9b 01       	movw	r18, r22
    1838:	ac 01       	movw	r20, r24
    183a:	bd 01       	movw	r22, r26
    183c:	cf 01       	movw	r24, r30
    183e:	08 95       	ret

00001840 <printf>:
    1840:	a0 e0       	ldi	r26, 0x00	; 0
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	e6 e2       	ldi	r30, 0x26	; 38
    1846:	fc e0       	ldi	r31, 0x0C	; 12
    1848:	0c 94 07 0f 	jmp	0x1e0e	; 0x1e0e <__prologue_saves__+0x20>
    184c:	ae 01       	movw	r20, r28
    184e:	4b 5f       	subi	r20, 0xFB	; 251
    1850:	5f 4f       	sbci	r21, 0xFF	; 255
    1852:	fa 01       	movw	r30, r20
    1854:	61 91       	ld	r22, Z+
    1856:	71 91       	ld	r23, Z+
    1858:	af 01       	movw	r20, r30
    185a:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__iob+0x2>
    185e:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <__iob+0x3>
    1862:	0e 94 66 0c 	call	0x18cc	; 0x18cc <vfprintf>
    1866:	e2 e0       	ldi	r30, 0x02	; 2
    1868:	0c 94 23 0f 	jmp	0x1e46	; 0x1e46 <__epilogue_restores__+0x20>

0000186c <snprintf>:
    186c:	ae e0       	ldi	r26, 0x0E	; 14
    186e:	b0 e0       	ldi	r27, 0x00	; 0
    1870:	ec e3       	ldi	r30, 0x3C	; 60
    1872:	fc e0       	ldi	r31, 0x0C	; 12
    1874:	0c 94 05 0f 	jmp	0x1e0a	; 0x1e0a <__prologue_saves__+0x1c>
    1878:	0d 89       	ldd	r16, Y+21	; 0x15
    187a:	1e 89       	ldd	r17, Y+22	; 0x16
    187c:	8f 89       	ldd	r24, Y+23	; 0x17
    187e:	98 8d       	ldd	r25, Y+24	; 0x18
    1880:	26 e0       	ldi	r18, 0x06	; 6
    1882:	2c 83       	std	Y+4, r18	; 0x04
    1884:	1a 83       	std	Y+2, r17	; 0x02
    1886:	09 83       	std	Y+1, r16	; 0x01
    1888:	97 ff       	sbrs	r25, 7
    188a:	02 c0       	rjmp	.+4      	; 0x1890 <snprintf+0x24>
    188c:	80 e0       	ldi	r24, 0x00	; 0
    188e:	90 e8       	ldi	r25, 0x80	; 128
    1890:	01 97       	sbiw	r24, 0x01	; 1
    1892:	9e 83       	std	Y+6, r25	; 0x06
    1894:	8d 83       	std	Y+5, r24	; 0x05
    1896:	ae 01       	movw	r20, r28
    1898:	45 5e       	subi	r20, 0xE5	; 229
    189a:	5f 4f       	sbci	r21, 0xFF	; 255
    189c:	69 8d       	ldd	r22, Y+25	; 0x19
    189e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18a0:	ce 01       	movw	r24, r28
    18a2:	01 96       	adiw	r24, 0x01	; 1
    18a4:	0e 94 66 0c 	call	0x18cc	; 0x18cc <vfprintf>
    18a8:	4d 81       	ldd	r20, Y+5	; 0x05
    18aa:	5e 81       	ldd	r21, Y+6	; 0x06
    18ac:	57 fd       	sbrc	r21, 7
    18ae:	0a c0       	rjmp	.+20     	; 0x18c4 <snprintf+0x58>
    18b0:	2f 81       	ldd	r18, Y+7	; 0x07
    18b2:	38 85       	ldd	r19, Y+8	; 0x08
    18b4:	42 17       	cp	r20, r18
    18b6:	53 07       	cpc	r21, r19
    18b8:	0c f4       	brge	.+2      	; 0x18bc <snprintf+0x50>
    18ba:	9a 01       	movw	r18, r20
    18bc:	f8 01       	movw	r30, r16
    18be:	e2 0f       	add	r30, r18
    18c0:	f3 1f       	adc	r31, r19
    18c2:	10 82       	st	Z, r1
    18c4:	2e 96       	adiw	r28, 0x0e	; 14
    18c6:	e4 e0       	ldi	r30, 0x04	; 4
    18c8:	0c 94 21 0f 	jmp	0x1e42	; 0x1e42 <__epilogue_restores__+0x1c>

000018cc <vfprintf>:
    18cc:	ab e0       	ldi	r26, 0x0B	; 11
    18ce:	b0 e0       	ldi	r27, 0x00	; 0
    18d0:	ec e6       	ldi	r30, 0x6C	; 108
    18d2:	fc e0       	ldi	r31, 0x0C	; 12
    18d4:	0c 94 f7 0e 	jmp	0x1dee	; 0x1dee <__prologue_saves__>
    18d8:	6c 01       	movw	r12, r24
    18da:	7b 01       	movw	r14, r22
    18dc:	8a 01       	movw	r16, r20
    18de:	fc 01       	movw	r30, r24
    18e0:	17 82       	std	Z+7, r1	; 0x07
    18e2:	16 82       	std	Z+6, r1	; 0x06
    18e4:	83 81       	ldd	r24, Z+3	; 0x03
    18e6:	81 ff       	sbrs	r24, 1
    18e8:	cc c1       	rjmp	.+920    	; 0x1c82 <vfprintf+0x3b6>
    18ea:	ce 01       	movw	r24, r28
    18ec:	01 96       	adiw	r24, 0x01	; 1
    18ee:	3c 01       	movw	r6, r24
    18f0:	f6 01       	movw	r30, r12
    18f2:	93 81       	ldd	r25, Z+3	; 0x03
    18f4:	f7 01       	movw	r30, r14
    18f6:	93 fd       	sbrc	r25, 3
    18f8:	85 91       	lpm	r24, Z+
    18fa:	93 ff       	sbrs	r25, 3
    18fc:	81 91       	ld	r24, Z+
    18fe:	7f 01       	movw	r14, r30
    1900:	88 23       	and	r24, r24
    1902:	09 f4       	brne	.+2      	; 0x1906 <vfprintf+0x3a>
    1904:	ba c1       	rjmp	.+884    	; 0x1c7a <vfprintf+0x3ae>
    1906:	85 32       	cpi	r24, 0x25	; 37
    1908:	39 f4       	brne	.+14     	; 0x1918 <vfprintf+0x4c>
    190a:	93 fd       	sbrc	r25, 3
    190c:	85 91       	lpm	r24, Z+
    190e:	93 ff       	sbrs	r25, 3
    1910:	81 91       	ld	r24, Z+
    1912:	7f 01       	movw	r14, r30
    1914:	85 32       	cpi	r24, 0x25	; 37
    1916:	29 f4       	brne	.+10     	; 0x1922 <vfprintf+0x56>
    1918:	b6 01       	movw	r22, r12
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <fputc>
    1920:	e7 cf       	rjmp	.-50     	; 0x18f0 <vfprintf+0x24>
    1922:	91 2c       	mov	r9, r1
    1924:	21 2c       	mov	r2, r1
    1926:	31 2c       	mov	r3, r1
    1928:	ff e1       	ldi	r31, 0x1F	; 31
    192a:	f3 15       	cp	r31, r3
    192c:	d8 f0       	brcs	.+54     	; 0x1964 <vfprintf+0x98>
    192e:	8b 32       	cpi	r24, 0x2B	; 43
    1930:	79 f0       	breq	.+30     	; 0x1950 <vfprintf+0x84>
    1932:	38 f4       	brcc	.+14     	; 0x1942 <vfprintf+0x76>
    1934:	80 32       	cpi	r24, 0x20	; 32
    1936:	79 f0       	breq	.+30     	; 0x1956 <vfprintf+0x8a>
    1938:	83 32       	cpi	r24, 0x23	; 35
    193a:	a1 f4       	brne	.+40     	; 0x1964 <vfprintf+0x98>
    193c:	23 2d       	mov	r18, r3
    193e:	20 61       	ori	r18, 0x10	; 16
    1940:	1d c0       	rjmp	.+58     	; 0x197c <vfprintf+0xb0>
    1942:	8d 32       	cpi	r24, 0x2D	; 45
    1944:	61 f0       	breq	.+24     	; 0x195e <vfprintf+0x92>
    1946:	80 33       	cpi	r24, 0x30	; 48
    1948:	69 f4       	brne	.+26     	; 0x1964 <vfprintf+0x98>
    194a:	23 2d       	mov	r18, r3
    194c:	21 60       	ori	r18, 0x01	; 1
    194e:	16 c0       	rjmp	.+44     	; 0x197c <vfprintf+0xb0>
    1950:	83 2d       	mov	r24, r3
    1952:	82 60       	ori	r24, 0x02	; 2
    1954:	38 2e       	mov	r3, r24
    1956:	e3 2d       	mov	r30, r3
    1958:	e4 60       	ori	r30, 0x04	; 4
    195a:	3e 2e       	mov	r3, r30
    195c:	2a c0       	rjmp	.+84     	; 0x19b2 <vfprintf+0xe6>
    195e:	f3 2d       	mov	r31, r3
    1960:	f8 60       	ori	r31, 0x08	; 8
    1962:	1d c0       	rjmp	.+58     	; 0x199e <vfprintf+0xd2>
    1964:	37 fc       	sbrc	r3, 7
    1966:	2d c0       	rjmp	.+90     	; 0x19c2 <vfprintf+0xf6>
    1968:	20 ed       	ldi	r18, 0xD0	; 208
    196a:	28 0f       	add	r18, r24
    196c:	2a 30       	cpi	r18, 0x0A	; 10
    196e:	40 f0       	brcs	.+16     	; 0x1980 <vfprintf+0xb4>
    1970:	8e 32       	cpi	r24, 0x2E	; 46
    1972:	b9 f4       	brne	.+46     	; 0x19a2 <vfprintf+0xd6>
    1974:	36 fc       	sbrc	r3, 6
    1976:	81 c1       	rjmp	.+770    	; 0x1c7a <vfprintf+0x3ae>
    1978:	23 2d       	mov	r18, r3
    197a:	20 64       	ori	r18, 0x40	; 64
    197c:	32 2e       	mov	r3, r18
    197e:	19 c0       	rjmp	.+50     	; 0x19b2 <vfprintf+0xe6>
    1980:	36 fe       	sbrs	r3, 6
    1982:	06 c0       	rjmp	.+12     	; 0x1990 <vfprintf+0xc4>
    1984:	8a e0       	ldi	r24, 0x0A	; 10
    1986:	98 9e       	mul	r9, r24
    1988:	20 0d       	add	r18, r0
    198a:	11 24       	eor	r1, r1
    198c:	92 2e       	mov	r9, r18
    198e:	11 c0       	rjmp	.+34     	; 0x19b2 <vfprintf+0xe6>
    1990:	ea e0       	ldi	r30, 0x0A	; 10
    1992:	2e 9e       	mul	r2, r30
    1994:	20 0d       	add	r18, r0
    1996:	11 24       	eor	r1, r1
    1998:	22 2e       	mov	r2, r18
    199a:	f3 2d       	mov	r31, r3
    199c:	f0 62       	ori	r31, 0x20	; 32
    199e:	3f 2e       	mov	r3, r31
    19a0:	08 c0       	rjmp	.+16     	; 0x19b2 <vfprintf+0xe6>
    19a2:	8c 36       	cpi	r24, 0x6C	; 108
    19a4:	21 f4       	brne	.+8      	; 0x19ae <vfprintf+0xe2>
    19a6:	83 2d       	mov	r24, r3
    19a8:	80 68       	ori	r24, 0x80	; 128
    19aa:	38 2e       	mov	r3, r24
    19ac:	02 c0       	rjmp	.+4      	; 0x19b2 <vfprintf+0xe6>
    19ae:	88 36       	cpi	r24, 0x68	; 104
    19b0:	41 f4       	brne	.+16     	; 0x19c2 <vfprintf+0xf6>
    19b2:	f7 01       	movw	r30, r14
    19b4:	93 fd       	sbrc	r25, 3
    19b6:	85 91       	lpm	r24, Z+
    19b8:	93 ff       	sbrs	r25, 3
    19ba:	81 91       	ld	r24, Z+
    19bc:	7f 01       	movw	r14, r30
    19be:	81 11       	cpse	r24, r1
    19c0:	b3 cf       	rjmp	.-154    	; 0x1928 <vfprintf+0x5c>
    19c2:	98 2f       	mov	r25, r24
    19c4:	9f 7d       	andi	r25, 0xDF	; 223
    19c6:	95 54       	subi	r25, 0x45	; 69
    19c8:	93 30       	cpi	r25, 0x03	; 3
    19ca:	28 f4       	brcc	.+10     	; 0x19d6 <vfprintf+0x10a>
    19cc:	0c 5f       	subi	r16, 0xFC	; 252
    19ce:	1f 4f       	sbci	r17, 0xFF	; 255
    19d0:	9f e3       	ldi	r25, 0x3F	; 63
    19d2:	99 83       	std	Y+1, r25	; 0x01
    19d4:	0d c0       	rjmp	.+26     	; 0x19f0 <vfprintf+0x124>
    19d6:	83 36       	cpi	r24, 0x63	; 99
    19d8:	31 f0       	breq	.+12     	; 0x19e6 <vfprintf+0x11a>
    19da:	83 37       	cpi	r24, 0x73	; 115
    19dc:	71 f0       	breq	.+28     	; 0x19fa <vfprintf+0x12e>
    19de:	83 35       	cpi	r24, 0x53	; 83
    19e0:	09 f0       	breq	.+2      	; 0x19e4 <vfprintf+0x118>
    19e2:	59 c0       	rjmp	.+178    	; 0x1a96 <vfprintf+0x1ca>
    19e4:	21 c0       	rjmp	.+66     	; 0x1a28 <vfprintf+0x15c>
    19e6:	f8 01       	movw	r30, r16
    19e8:	80 81       	ld	r24, Z
    19ea:	89 83       	std	Y+1, r24	; 0x01
    19ec:	0e 5f       	subi	r16, 0xFE	; 254
    19ee:	1f 4f       	sbci	r17, 0xFF	; 255
    19f0:	88 24       	eor	r8, r8
    19f2:	83 94       	inc	r8
    19f4:	91 2c       	mov	r9, r1
    19f6:	53 01       	movw	r10, r6
    19f8:	13 c0       	rjmp	.+38     	; 0x1a20 <vfprintf+0x154>
    19fa:	28 01       	movw	r4, r16
    19fc:	f2 e0       	ldi	r31, 0x02	; 2
    19fe:	4f 0e       	add	r4, r31
    1a00:	51 1c       	adc	r5, r1
    1a02:	f8 01       	movw	r30, r16
    1a04:	a0 80       	ld	r10, Z
    1a06:	b1 80       	ldd	r11, Z+1	; 0x01
    1a08:	36 fe       	sbrs	r3, 6
    1a0a:	03 c0       	rjmp	.+6      	; 0x1a12 <vfprintf+0x146>
    1a0c:	69 2d       	mov	r22, r9
    1a0e:	70 e0       	ldi	r23, 0x00	; 0
    1a10:	02 c0       	rjmp	.+4      	; 0x1a16 <vfprintf+0x14a>
    1a12:	6f ef       	ldi	r22, 0xFF	; 255
    1a14:	7f ef       	ldi	r23, 0xFF	; 255
    1a16:	c5 01       	movw	r24, r10
    1a18:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <strnlen>
    1a1c:	4c 01       	movw	r8, r24
    1a1e:	82 01       	movw	r16, r4
    1a20:	f3 2d       	mov	r31, r3
    1a22:	ff 77       	andi	r31, 0x7F	; 127
    1a24:	3f 2e       	mov	r3, r31
    1a26:	16 c0       	rjmp	.+44     	; 0x1a54 <vfprintf+0x188>
    1a28:	28 01       	movw	r4, r16
    1a2a:	22 e0       	ldi	r18, 0x02	; 2
    1a2c:	42 0e       	add	r4, r18
    1a2e:	51 1c       	adc	r5, r1
    1a30:	f8 01       	movw	r30, r16
    1a32:	a0 80       	ld	r10, Z
    1a34:	b1 80       	ldd	r11, Z+1	; 0x01
    1a36:	36 fe       	sbrs	r3, 6
    1a38:	03 c0       	rjmp	.+6      	; 0x1a40 <vfprintf+0x174>
    1a3a:	69 2d       	mov	r22, r9
    1a3c:	70 e0       	ldi	r23, 0x00	; 0
    1a3e:	02 c0       	rjmp	.+4      	; 0x1a44 <vfprintf+0x178>
    1a40:	6f ef       	ldi	r22, 0xFF	; 255
    1a42:	7f ef       	ldi	r23, 0xFF	; 255
    1a44:	c5 01       	movw	r24, r10
    1a46:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <strnlen_P>
    1a4a:	4c 01       	movw	r8, r24
    1a4c:	f3 2d       	mov	r31, r3
    1a4e:	f0 68       	ori	r31, 0x80	; 128
    1a50:	3f 2e       	mov	r3, r31
    1a52:	82 01       	movw	r16, r4
    1a54:	33 fc       	sbrc	r3, 3
    1a56:	1b c0       	rjmp	.+54     	; 0x1a8e <vfprintf+0x1c2>
    1a58:	82 2d       	mov	r24, r2
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	88 16       	cp	r8, r24
    1a5e:	99 06       	cpc	r9, r25
    1a60:	b0 f4       	brcc	.+44     	; 0x1a8e <vfprintf+0x1c2>
    1a62:	b6 01       	movw	r22, r12
    1a64:	80 e2       	ldi	r24, 0x20	; 32
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <fputc>
    1a6c:	2a 94       	dec	r2
    1a6e:	f4 cf       	rjmp	.-24     	; 0x1a58 <vfprintf+0x18c>
    1a70:	f5 01       	movw	r30, r10
    1a72:	37 fc       	sbrc	r3, 7
    1a74:	85 91       	lpm	r24, Z+
    1a76:	37 fe       	sbrs	r3, 7
    1a78:	81 91       	ld	r24, Z+
    1a7a:	5f 01       	movw	r10, r30
    1a7c:	b6 01       	movw	r22, r12
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <fputc>
    1a84:	21 10       	cpse	r2, r1
    1a86:	2a 94       	dec	r2
    1a88:	21 e0       	ldi	r18, 0x01	; 1
    1a8a:	82 1a       	sub	r8, r18
    1a8c:	91 08       	sbc	r9, r1
    1a8e:	81 14       	cp	r8, r1
    1a90:	91 04       	cpc	r9, r1
    1a92:	71 f7       	brne	.-36     	; 0x1a70 <vfprintf+0x1a4>
    1a94:	e8 c0       	rjmp	.+464    	; 0x1c66 <vfprintf+0x39a>
    1a96:	84 36       	cpi	r24, 0x64	; 100
    1a98:	11 f0       	breq	.+4      	; 0x1a9e <vfprintf+0x1d2>
    1a9a:	89 36       	cpi	r24, 0x69	; 105
    1a9c:	41 f5       	brne	.+80     	; 0x1aee <vfprintf+0x222>
    1a9e:	f8 01       	movw	r30, r16
    1aa0:	37 fe       	sbrs	r3, 7
    1aa2:	07 c0       	rjmp	.+14     	; 0x1ab2 <vfprintf+0x1e6>
    1aa4:	60 81       	ld	r22, Z
    1aa6:	71 81       	ldd	r23, Z+1	; 0x01
    1aa8:	82 81       	ldd	r24, Z+2	; 0x02
    1aaa:	93 81       	ldd	r25, Z+3	; 0x03
    1aac:	0c 5f       	subi	r16, 0xFC	; 252
    1aae:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab0:	08 c0       	rjmp	.+16     	; 0x1ac2 <vfprintf+0x1f6>
    1ab2:	60 81       	ld	r22, Z
    1ab4:	71 81       	ldd	r23, Z+1	; 0x01
    1ab6:	07 2e       	mov	r0, r23
    1ab8:	00 0c       	add	r0, r0
    1aba:	88 0b       	sbc	r24, r24
    1abc:	99 0b       	sbc	r25, r25
    1abe:	0e 5f       	subi	r16, 0xFE	; 254
    1ac0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ac2:	f3 2d       	mov	r31, r3
    1ac4:	ff 76       	andi	r31, 0x6F	; 111
    1ac6:	3f 2e       	mov	r3, r31
    1ac8:	97 ff       	sbrs	r25, 7
    1aca:	09 c0       	rjmp	.+18     	; 0x1ade <vfprintf+0x212>
    1acc:	90 95       	com	r25
    1ace:	80 95       	com	r24
    1ad0:	70 95       	com	r23
    1ad2:	61 95       	neg	r22
    1ad4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ad6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ad8:	9f 4f       	sbci	r25, 0xFF	; 255
    1ada:	f0 68       	ori	r31, 0x80	; 128
    1adc:	3f 2e       	mov	r3, r31
    1ade:	2a e0       	ldi	r18, 0x0A	; 10
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	a3 01       	movw	r20, r6
    1ae4:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <__ultoa_invert>
    1ae8:	88 2e       	mov	r8, r24
    1aea:	86 18       	sub	r8, r6
    1aec:	45 c0       	rjmp	.+138    	; 0x1b78 <vfprintf+0x2ac>
    1aee:	85 37       	cpi	r24, 0x75	; 117
    1af0:	31 f4       	brne	.+12     	; 0x1afe <vfprintf+0x232>
    1af2:	23 2d       	mov	r18, r3
    1af4:	2f 7e       	andi	r18, 0xEF	; 239
    1af6:	b2 2e       	mov	r11, r18
    1af8:	2a e0       	ldi	r18, 0x0A	; 10
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	25 c0       	rjmp	.+74     	; 0x1b48 <vfprintf+0x27c>
    1afe:	93 2d       	mov	r25, r3
    1b00:	99 7f       	andi	r25, 0xF9	; 249
    1b02:	b9 2e       	mov	r11, r25
    1b04:	8f 36       	cpi	r24, 0x6F	; 111
    1b06:	c1 f0       	breq	.+48     	; 0x1b38 <vfprintf+0x26c>
    1b08:	18 f4       	brcc	.+6      	; 0x1b10 <vfprintf+0x244>
    1b0a:	88 35       	cpi	r24, 0x58	; 88
    1b0c:	79 f0       	breq	.+30     	; 0x1b2c <vfprintf+0x260>
    1b0e:	b5 c0       	rjmp	.+362    	; 0x1c7a <vfprintf+0x3ae>
    1b10:	80 37       	cpi	r24, 0x70	; 112
    1b12:	19 f0       	breq	.+6      	; 0x1b1a <vfprintf+0x24e>
    1b14:	88 37       	cpi	r24, 0x78	; 120
    1b16:	21 f0       	breq	.+8      	; 0x1b20 <vfprintf+0x254>
    1b18:	b0 c0       	rjmp	.+352    	; 0x1c7a <vfprintf+0x3ae>
    1b1a:	e9 2f       	mov	r30, r25
    1b1c:	e0 61       	ori	r30, 0x10	; 16
    1b1e:	be 2e       	mov	r11, r30
    1b20:	b4 fe       	sbrs	r11, 4
    1b22:	0d c0       	rjmp	.+26     	; 0x1b3e <vfprintf+0x272>
    1b24:	fb 2d       	mov	r31, r11
    1b26:	f4 60       	ori	r31, 0x04	; 4
    1b28:	bf 2e       	mov	r11, r31
    1b2a:	09 c0       	rjmp	.+18     	; 0x1b3e <vfprintf+0x272>
    1b2c:	34 fe       	sbrs	r3, 4
    1b2e:	0a c0       	rjmp	.+20     	; 0x1b44 <vfprintf+0x278>
    1b30:	29 2f       	mov	r18, r25
    1b32:	26 60       	ori	r18, 0x06	; 6
    1b34:	b2 2e       	mov	r11, r18
    1b36:	06 c0       	rjmp	.+12     	; 0x1b44 <vfprintf+0x278>
    1b38:	28 e0       	ldi	r18, 0x08	; 8
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	05 c0       	rjmp	.+10     	; 0x1b48 <vfprintf+0x27c>
    1b3e:	20 e1       	ldi	r18, 0x10	; 16
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	02 c0       	rjmp	.+4      	; 0x1b48 <vfprintf+0x27c>
    1b44:	20 e1       	ldi	r18, 0x10	; 16
    1b46:	32 e0       	ldi	r19, 0x02	; 2
    1b48:	f8 01       	movw	r30, r16
    1b4a:	b7 fe       	sbrs	r11, 7
    1b4c:	07 c0       	rjmp	.+14     	; 0x1b5c <vfprintf+0x290>
    1b4e:	60 81       	ld	r22, Z
    1b50:	71 81       	ldd	r23, Z+1	; 0x01
    1b52:	82 81       	ldd	r24, Z+2	; 0x02
    1b54:	93 81       	ldd	r25, Z+3	; 0x03
    1b56:	0c 5f       	subi	r16, 0xFC	; 252
    1b58:	1f 4f       	sbci	r17, 0xFF	; 255
    1b5a:	06 c0       	rjmp	.+12     	; 0x1b68 <vfprintf+0x29c>
    1b5c:	60 81       	ld	r22, Z
    1b5e:	71 81       	ldd	r23, Z+1	; 0x01
    1b60:	80 e0       	ldi	r24, 0x00	; 0
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	0e 5f       	subi	r16, 0xFE	; 254
    1b66:	1f 4f       	sbci	r17, 0xFF	; 255
    1b68:	a3 01       	movw	r20, r6
    1b6a:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <__ultoa_invert>
    1b6e:	88 2e       	mov	r8, r24
    1b70:	86 18       	sub	r8, r6
    1b72:	fb 2d       	mov	r31, r11
    1b74:	ff 77       	andi	r31, 0x7F	; 127
    1b76:	3f 2e       	mov	r3, r31
    1b78:	36 fe       	sbrs	r3, 6
    1b7a:	0d c0       	rjmp	.+26     	; 0x1b96 <vfprintf+0x2ca>
    1b7c:	23 2d       	mov	r18, r3
    1b7e:	2e 7f       	andi	r18, 0xFE	; 254
    1b80:	a2 2e       	mov	r10, r18
    1b82:	89 14       	cp	r8, r9
    1b84:	58 f4       	brcc	.+22     	; 0x1b9c <vfprintf+0x2d0>
    1b86:	34 fe       	sbrs	r3, 4
    1b88:	0b c0       	rjmp	.+22     	; 0x1ba0 <vfprintf+0x2d4>
    1b8a:	32 fc       	sbrc	r3, 2
    1b8c:	09 c0       	rjmp	.+18     	; 0x1ba0 <vfprintf+0x2d4>
    1b8e:	83 2d       	mov	r24, r3
    1b90:	8e 7e       	andi	r24, 0xEE	; 238
    1b92:	a8 2e       	mov	r10, r24
    1b94:	05 c0       	rjmp	.+10     	; 0x1ba0 <vfprintf+0x2d4>
    1b96:	b8 2c       	mov	r11, r8
    1b98:	a3 2c       	mov	r10, r3
    1b9a:	03 c0       	rjmp	.+6      	; 0x1ba2 <vfprintf+0x2d6>
    1b9c:	b8 2c       	mov	r11, r8
    1b9e:	01 c0       	rjmp	.+2      	; 0x1ba2 <vfprintf+0x2d6>
    1ba0:	b9 2c       	mov	r11, r9
    1ba2:	a4 fe       	sbrs	r10, 4
    1ba4:	0f c0       	rjmp	.+30     	; 0x1bc4 <vfprintf+0x2f8>
    1ba6:	fe 01       	movw	r30, r28
    1ba8:	e8 0d       	add	r30, r8
    1baa:	f1 1d       	adc	r31, r1
    1bac:	80 81       	ld	r24, Z
    1bae:	80 33       	cpi	r24, 0x30	; 48
    1bb0:	21 f4       	brne	.+8      	; 0x1bba <vfprintf+0x2ee>
    1bb2:	9a 2d       	mov	r25, r10
    1bb4:	99 7e       	andi	r25, 0xE9	; 233
    1bb6:	a9 2e       	mov	r10, r25
    1bb8:	09 c0       	rjmp	.+18     	; 0x1bcc <vfprintf+0x300>
    1bba:	a2 fe       	sbrs	r10, 2
    1bbc:	06 c0       	rjmp	.+12     	; 0x1bca <vfprintf+0x2fe>
    1bbe:	b3 94       	inc	r11
    1bc0:	b3 94       	inc	r11
    1bc2:	04 c0       	rjmp	.+8      	; 0x1bcc <vfprintf+0x300>
    1bc4:	8a 2d       	mov	r24, r10
    1bc6:	86 78       	andi	r24, 0x86	; 134
    1bc8:	09 f0       	breq	.+2      	; 0x1bcc <vfprintf+0x300>
    1bca:	b3 94       	inc	r11
    1bcc:	a3 fc       	sbrc	r10, 3
    1bce:	11 c0       	rjmp	.+34     	; 0x1bf2 <vfprintf+0x326>
    1bd0:	a0 fe       	sbrs	r10, 0
    1bd2:	06 c0       	rjmp	.+12     	; 0x1be0 <vfprintf+0x314>
    1bd4:	b2 14       	cp	r11, r2
    1bd6:	88 f4       	brcc	.+34     	; 0x1bfa <vfprintf+0x32e>
    1bd8:	28 0c       	add	r2, r8
    1bda:	92 2c       	mov	r9, r2
    1bdc:	9b 18       	sub	r9, r11
    1bde:	0e c0       	rjmp	.+28     	; 0x1bfc <vfprintf+0x330>
    1be0:	b2 14       	cp	r11, r2
    1be2:	60 f4       	brcc	.+24     	; 0x1bfc <vfprintf+0x330>
    1be4:	b6 01       	movw	r22, r12
    1be6:	80 e2       	ldi	r24, 0x20	; 32
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <fputc>
    1bee:	b3 94       	inc	r11
    1bf0:	f7 cf       	rjmp	.-18     	; 0x1be0 <vfprintf+0x314>
    1bf2:	b2 14       	cp	r11, r2
    1bf4:	18 f4       	brcc	.+6      	; 0x1bfc <vfprintf+0x330>
    1bf6:	2b 18       	sub	r2, r11
    1bf8:	02 c0       	rjmp	.+4      	; 0x1bfe <vfprintf+0x332>
    1bfa:	98 2c       	mov	r9, r8
    1bfc:	21 2c       	mov	r2, r1
    1bfe:	a4 fe       	sbrs	r10, 4
    1c00:	10 c0       	rjmp	.+32     	; 0x1c22 <vfprintf+0x356>
    1c02:	b6 01       	movw	r22, r12
    1c04:	80 e3       	ldi	r24, 0x30	; 48
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <fputc>
    1c0c:	a2 fe       	sbrs	r10, 2
    1c0e:	17 c0       	rjmp	.+46     	; 0x1c3e <vfprintf+0x372>
    1c10:	a1 fc       	sbrc	r10, 1
    1c12:	03 c0       	rjmp	.+6      	; 0x1c1a <vfprintf+0x34e>
    1c14:	88 e7       	ldi	r24, 0x78	; 120
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	02 c0       	rjmp	.+4      	; 0x1c1e <vfprintf+0x352>
    1c1a:	88 e5       	ldi	r24, 0x58	; 88
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	b6 01       	movw	r22, r12
    1c20:	0c c0       	rjmp	.+24     	; 0x1c3a <vfprintf+0x36e>
    1c22:	8a 2d       	mov	r24, r10
    1c24:	86 78       	andi	r24, 0x86	; 134
    1c26:	59 f0       	breq	.+22     	; 0x1c3e <vfprintf+0x372>
    1c28:	a1 fe       	sbrs	r10, 1
    1c2a:	02 c0       	rjmp	.+4      	; 0x1c30 <vfprintf+0x364>
    1c2c:	8b e2       	ldi	r24, 0x2B	; 43
    1c2e:	01 c0       	rjmp	.+2      	; 0x1c32 <vfprintf+0x366>
    1c30:	80 e2       	ldi	r24, 0x20	; 32
    1c32:	a7 fc       	sbrc	r10, 7
    1c34:	8d e2       	ldi	r24, 0x2D	; 45
    1c36:	b6 01       	movw	r22, r12
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <fputc>
    1c3e:	89 14       	cp	r8, r9
    1c40:	38 f4       	brcc	.+14     	; 0x1c50 <vfprintf+0x384>
    1c42:	b6 01       	movw	r22, r12
    1c44:	80 e3       	ldi	r24, 0x30	; 48
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <fputc>
    1c4c:	9a 94       	dec	r9
    1c4e:	f7 cf       	rjmp	.-18     	; 0x1c3e <vfprintf+0x372>
    1c50:	8a 94       	dec	r8
    1c52:	f3 01       	movw	r30, r6
    1c54:	e8 0d       	add	r30, r8
    1c56:	f1 1d       	adc	r31, r1
    1c58:	80 81       	ld	r24, Z
    1c5a:	b6 01       	movw	r22, r12
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <fputc>
    1c62:	81 10       	cpse	r8, r1
    1c64:	f5 cf       	rjmp	.-22     	; 0x1c50 <vfprintf+0x384>
    1c66:	22 20       	and	r2, r2
    1c68:	09 f4       	brne	.+2      	; 0x1c6c <vfprintf+0x3a0>
    1c6a:	42 ce       	rjmp	.-892    	; 0x18f0 <vfprintf+0x24>
    1c6c:	b6 01       	movw	r22, r12
    1c6e:	80 e2       	ldi	r24, 0x20	; 32
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <fputc>
    1c76:	2a 94       	dec	r2
    1c78:	f6 cf       	rjmp	.-20     	; 0x1c66 <vfprintf+0x39a>
    1c7a:	f6 01       	movw	r30, r12
    1c7c:	86 81       	ldd	r24, Z+6	; 0x06
    1c7e:	97 81       	ldd	r25, Z+7	; 0x07
    1c80:	02 c0       	rjmp	.+4      	; 0x1c86 <vfprintf+0x3ba>
    1c82:	8f ef       	ldi	r24, 0xFF	; 255
    1c84:	9f ef       	ldi	r25, 0xFF	; 255
    1c86:	2b 96       	adiw	r28, 0x0b	; 11
    1c88:	e2 e1       	ldi	r30, 0x12	; 18
    1c8a:	0c 94 13 0f 	jmp	0x1e26	; 0x1e26 <__epilogue_restores__>

00001c8e <strnlen_P>:
    1c8e:	fc 01       	movw	r30, r24
    1c90:	05 90       	lpm	r0, Z+
    1c92:	61 50       	subi	r22, 0x01	; 1
    1c94:	70 40       	sbci	r23, 0x00	; 0
    1c96:	01 10       	cpse	r0, r1
    1c98:	d8 f7       	brcc	.-10     	; 0x1c90 <strnlen_P+0x2>
    1c9a:	80 95       	com	r24
    1c9c:	90 95       	com	r25
    1c9e:	8e 0f       	add	r24, r30
    1ca0:	9f 1f       	adc	r25, r31
    1ca2:	08 95       	ret

00001ca4 <strnlen>:
    1ca4:	fc 01       	movw	r30, r24
    1ca6:	61 50       	subi	r22, 0x01	; 1
    1ca8:	70 40       	sbci	r23, 0x00	; 0
    1caa:	01 90       	ld	r0, Z+
    1cac:	01 10       	cpse	r0, r1
    1cae:	d8 f7       	brcc	.-10     	; 0x1ca6 <strnlen+0x2>
    1cb0:	80 95       	com	r24
    1cb2:	90 95       	com	r25
    1cb4:	8e 0f       	add	r24, r30
    1cb6:	9f 1f       	adc	r25, r31
    1cb8:	08 95       	ret

00001cba <fputc>:
    1cba:	0f 93       	push	r16
    1cbc:	1f 93       	push	r17
    1cbe:	cf 93       	push	r28
    1cc0:	df 93       	push	r29
    1cc2:	fb 01       	movw	r30, r22
    1cc4:	23 81       	ldd	r18, Z+3	; 0x03
    1cc6:	21 fd       	sbrc	r18, 1
    1cc8:	03 c0       	rjmp	.+6      	; 0x1cd0 <fputc+0x16>
    1cca:	8f ef       	ldi	r24, 0xFF	; 255
    1ccc:	9f ef       	ldi	r25, 0xFF	; 255
    1cce:	2c c0       	rjmp	.+88     	; 0x1d28 <fputc+0x6e>
    1cd0:	22 ff       	sbrs	r18, 2
    1cd2:	16 c0       	rjmp	.+44     	; 0x1d00 <fputc+0x46>
    1cd4:	46 81       	ldd	r20, Z+6	; 0x06
    1cd6:	57 81       	ldd	r21, Z+7	; 0x07
    1cd8:	24 81       	ldd	r18, Z+4	; 0x04
    1cda:	35 81       	ldd	r19, Z+5	; 0x05
    1cdc:	42 17       	cp	r20, r18
    1cde:	53 07       	cpc	r21, r19
    1ce0:	44 f4       	brge	.+16     	; 0x1cf2 <fputc+0x38>
    1ce2:	a0 81       	ld	r26, Z
    1ce4:	b1 81       	ldd	r27, Z+1	; 0x01
    1ce6:	9d 01       	movw	r18, r26
    1ce8:	2f 5f       	subi	r18, 0xFF	; 255
    1cea:	3f 4f       	sbci	r19, 0xFF	; 255
    1cec:	31 83       	std	Z+1, r19	; 0x01
    1cee:	20 83       	st	Z, r18
    1cf0:	8c 93       	st	X, r24
    1cf2:	26 81       	ldd	r18, Z+6	; 0x06
    1cf4:	37 81       	ldd	r19, Z+7	; 0x07
    1cf6:	2f 5f       	subi	r18, 0xFF	; 255
    1cf8:	3f 4f       	sbci	r19, 0xFF	; 255
    1cfa:	37 83       	std	Z+7, r19	; 0x07
    1cfc:	26 83       	std	Z+6, r18	; 0x06
    1cfe:	14 c0       	rjmp	.+40     	; 0x1d28 <fputc+0x6e>
    1d00:	8b 01       	movw	r16, r22
    1d02:	ec 01       	movw	r28, r24
    1d04:	fb 01       	movw	r30, r22
    1d06:	00 84       	ldd	r0, Z+8	; 0x08
    1d08:	f1 85       	ldd	r31, Z+9	; 0x09
    1d0a:	e0 2d       	mov	r30, r0
    1d0c:	09 95       	icall
    1d0e:	89 2b       	or	r24, r25
    1d10:	e1 f6       	brne	.-72     	; 0x1cca <fputc+0x10>
    1d12:	d8 01       	movw	r26, r16
    1d14:	16 96       	adiw	r26, 0x06	; 6
    1d16:	8d 91       	ld	r24, X+
    1d18:	9c 91       	ld	r25, X
    1d1a:	17 97       	sbiw	r26, 0x07	; 7
    1d1c:	01 96       	adiw	r24, 0x01	; 1
    1d1e:	17 96       	adiw	r26, 0x07	; 7
    1d20:	9c 93       	st	X, r25
    1d22:	8e 93       	st	-X, r24
    1d24:	16 97       	sbiw	r26, 0x06	; 6
    1d26:	ce 01       	movw	r24, r28
    1d28:	df 91       	pop	r29
    1d2a:	cf 91       	pop	r28
    1d2c:	1f 91       	pop	r17
    1d2e:	0f 91       	pop	r16
    1d30:	08 95       	ret

00001d32 <__ultoa_invert>:
    1d32:	fa 01       	movw	r30, r20
    1d34:	aa 27       	eor	r26, r26
    1d36:	28 30       	cpi	r18, 0x08	; 8
    1d38:	51 f1       	breq	.+84     	; 0x1d8e <__ultoa_invert+0x5c>
    1d3a:	20 31       	cpi	r18, 0x10	; 16
    1d3c:	81 f1       	breq	.+96     	; 0x1d9e <__ultoa_invert+0x6c>
    1d3e:	e8 94       	clt
    1d40:	6f 93       	push	r22
    1d42:	6e 7f       	andi	r22, 0xFE	; 254
    1d44:	6e 5f       	subi	r22, 0xFE	; 254
    1d46:	7f 4f       	sbci	r23, 0xFF	; 255
    1d48:	8f 4f       	sbci	r24, 0xFF	; 255
    1d4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d4c:	af 4f       	sbci	r26, 0xFF	; 255
    1d4e:	b1 e0       	ldi	r27, 0x01	; 1
    1d50:	3e d0       	rcall	.+124    	; 0x1dce <__ultoa_invert+0x9c>
    1d52:	b4 e0       	ldi	r27, 0x04	; 4
    1d54:	3c d0       	rcall	.+120    	; 0x1dce <__ultoa_invert+0x9c>
    1d56:	67 0f       	add	r22, r23
    1d58:	78 1f       	adc	r23, r24
    1d5a:	89 1f       	adc	r24, r25
    1d5c:	9a 1f       	adc	r25, r26
    1d5e:	a1 1d       	adc	r26, r1
    1d60:	68 0f       	add	r22, r24
    1d62:	79 1f       	adc	r23, r25
    1d64:	8a 1f       	adc	r24, r26
    1d66:	91 1d       	adc	r25, r1
    1d68:	a1 1d       	adc	r26, r1
    1d6a:	6a 0f       	add	r22, r26
    1d6c:	71 1d       	adc	r23, r1
    1d6e:	81 1d       	adc	r24, r1
    1d70:	91 1d       	adc	r25, r1
    1d72:	a1 1d       	adc	r26, r1
    1d74:	20 d0       	rcall	.+64     	; 0x1db6 <__ultoa_invert+0x84>
    1d76:	09 f4       	brne	.+2      	; 0x1d7a <__ultoa_invert+0x48>
    1d78:	68 94       	set
    1d7a:	3f 91       	pop	r19
    1d7c:	2a e0       	ldi	r18, 0x0A	; 10
    1d7e:	26 9f       	mul	r18, r22
    1d80:	11 24       	eor	r1, r1
    1d82:	30 19       	sub	r19, r0
    1d84:	30 5d       	subi	r19, 0xD0	; 208
    1d86:	31 93       	st	Z+, r19
    1d88:	de f6       	brtc	.-74     	; 0x1d40 <__ultoa_invert+0xe>
    1d8a:	cf 01       	movw	r24, r30
    1d8c:	08 95       	ret
    1d8e:	46 2f       	mov	r20, r22
    1d90:	47 70       	andi	r20, 0x07	; 7
    1d92:	40 5d       	subi	r20, 0xD0	; 208
    1d94:	41 93       	st	Z+, r20
    1d96:	b3 e0       	ldi	r27, 0x03	; 3
    1d98:	0f d0       	rcall	.+30     	; 0x1db8 <__ultoa_invert+0x86>
    1d9a:	c9 f7       	brne	.-14     	; 0x1d8e <__ultoa_invert+0x5c>
    1d9c:	f6 cf       	rjmp	.-20     	; 0x1d8a <__ultoa_invert+0x58>
    1d9e:	46 2f       	mov	r20, r22
    1da0:	4f 70       	andi	r20, 0x0F	; 15
    1da2:	40 5d       	subi	r20, 0xD0	; 208
    1da4:	4a 33       	cpi	r20, 0x3A	; 58
    1da6:	18 f0       	brcs	.+6      	; 0x1dae <__ultoa_invert+0x7c>
    1da8:	49 5d       	subi	r20, 0xD9	; 217
    1daa:	31 fd       	sbrc	r19, 1
    1dac:	40 52       	subi	r20, 0x20	; 32
    1dae:	41 93       	st	Z+, r20
    1db0:	02 d0       	rcall	.+4      	; 0x1db6 <__ultoa_invert+0x84>
    1db2:	a9 f7       	brne	.-22     	; 0x1d9e <__ultoa_invert+0x6c>
    1db4:	ea cf       	rjmp	.-44     	; 0x1d8a <__ultoa_invert+0x58>
    1db6:	b4 e0       	ldi	r27, 0x04	; 4
    1db8:	a6 95       	lsr	r26
    1dba:	97 95       	ror	r25
    1dbc:	87 95       	ror	r24
    1dbe:	77 95       	ror	r23
    1dc0:	67 95       	ror	r22
    1dc2:	ba 95       	dec	r27
    1dc4:	c9 f7       	brne	.-14     	; 0x1db8 <__ultoa_invert+0x86>
    1dc6:	00 97       	sbiw	r24, 0x00	; 0
    1dc8:	61 05       	cpc	r22, r1
    1dca:	71 05       	cpc	r23, r1
    1dcc:	08 95       	ret
    1dce:	9b 01       	movw	r18, r22
    1dd0:	ac 01       	movw	r20, r24
    1dd2:	0a 2e       	mov	r0, r26
    1dd4:	06 94       	lsr	r0
    1dd6:	57 95       	ror	r21
    1dd8:	47 95       	ror	r20
    1dda:	37 95       	ror	r19
    1ddc:	27 95       	ror	r18
    1dde:	ba 95       	dec	r27
    1de0:	c9 f7       	brne	.-14     	; 0x1dd4 <__ultoa_invert+0xa2>
    1de2:	62 0f       	add	r22, r18
    1de4:	73 1f       	adc	r23, r19
    1de6:	84 1f       	adc	r24, r20
    1de8:	95 1f       	adc	r25, r21
    1dea:	a0 1d       	adc	r26, r0
    1dec:	08 95       	ret

00001dee <__prologue_saves__>:
    1dee:	2f 92       	push	r2
    1df0:	3f 92       	push	r3
    1df2:	4f 92       	push	r4
    1df4:	5f 92       	push	r5
    1df6:	6f 92       	push	r6
    1df8:	7f 92       	push	r7
    1dfa:	8f 92       	push	r8
    1dfc:	9f 92       	push	r9
    1dfe:	af 92       	push	r10
    1e00:	bf 92       	push	r11
    1e02:	cf 92       	push	r12
    1e04:	df 92       	push	r13
    1e06:	ef 92       	push	r14
    1e08:	ff 92       	push	r15
    1e0a:	0f 93       	push	r16
    1e0c:	1f 93       	push	r17
    1e0e:	cf 93       	push	r28
    1e10:	df 93       	push	r29
    1e12:	cd b7       	in	r28, 0x3d	; 61
    1e14:	de b7       	in	r29, 0x3e	; 62
    1e16:	ca 1b       	sub	r28, r26
    1e18:	db 0b       	sbc	r29, r27
    1e1a:	0f b6       	in	r0, 0x3f	; 63
    1e1c:	f8 94       	cli
    1e1e:	de bf       	out	0x3e, r29	; 62
    1e20:	0f be       	out	0x3f, r0	; 63
    1e22:	cd bf       	out	0x3d, r28	; 61
    1e24:	09 94       	ijmp

00001e26 <__epilogue_restores__>:
    1e26:	2a 88       	ldd	r2, Y+18	; 0x12
    1e28:	39 88       	ldd	r3, Y+17	; 0x11
    1e2a:	48 88       	ldd	r4, Y+16	; 0x10
    1e2c:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e2e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e30:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e32:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e34:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e36:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e38:	b9 84       	ldd	r11, Y+9	; 0x09
    1e3a:	c8 84       	ldd	r12, Y+8	; 0x08
    1e3c:	df 80       	ldd	r13, Y+7	; 0x07
    1e3e:	ee 80       	ldd	r14, Y+6	; 0x06
    1e40:	fd 80       	ldd	r15, Y+5	; 0x05
    1e42:	0c 81       	ldd	r16, Y+4	; 0x04
    1e44:	1b 81       	ldd	r17, Y+3	; 0x03
    1e46:	aa 81       	ldd	r26, Y+2	; 0x02
    1e48:	b9 81       	ldd	r27, Y+1	; 0x01
    1e4a:	ce 0f       	add	r28, r30
    1e4c:	d1 1d       	adc	r29, r1
    1e4e:	0f b6       	in	r0, 0x3f	; 63
    1e50:	f8 94       	cli
    1e52:	de bf       	out	0x3e, r29	; 62
    1e54:	0f be       	out	0x3f, r0	; 63
    1e56:	cd bf       	out	0x3d, r28	; 61
    1e58:	ed 01       	movw	r28, r26
    1e5a:	08 95       	ret

00001e5c <_exit>:
    1e5c:	f8 94       	cli

00001e5e <__stop_program>:
    1e5e:	ff cf       	rjmp	.-2      	; 0x1e5e <__stop_program>
