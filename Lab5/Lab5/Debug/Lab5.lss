
Lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800100  000029ae  00002a42  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000029ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800148  00800148  00002a8a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002a8a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002ae8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00002b28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001554  00000000  00000000  00002b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ae4  00000000  00000000  000040dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e49  00000000  00000000  00004bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003cc  00000000  00000000  00005a0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000684  00000000  00000000  00005dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000078a  00000000  00000000  0000645c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00006be6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__ctors_end>
       4:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       8:	0c 94 13 09 	jmp	0x1226	; 0x1226 <__vector_2>
       c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      10:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      14:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      18:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      1c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      20:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      24:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      28:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      2c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      30:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      34:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      38:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      3c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      40:	0c 94 ea 08 	jmp	0x11d4	; 0x11d4 <__vector_16>
      44:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      48:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      4c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      50:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      54:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      58:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      5c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      60:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      64:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	6e 61       	ori	r22, 0x1E	; 30
      6a:	6e 00       	.word	0x006e	; ????

0000006c <__c.2332>:
      6c:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      7c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      8c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      9c:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      ac:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      bc:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      cc:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      dc:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      ec:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      fc:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     10c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     11c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     12c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     13c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     14c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     15c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000016a <__ctors_end>:
     16a:	11 24       	eor	r1, r1
     16c:	1f be       	out	0x3f, r1	; 63
     16e:	cf ef       	ldi	r28, 0xFF	; 255
     170:	d8 e0       	ldi	r29, 0x08	; 8
     172:	de bf       	out	0x3e, r29	; 62
     174:	cd bf       	out	0x3d, r28	; 61

00000176 <__do_copy_data>:
     176:	11 e0       	ldi	r17, 0x01	; 1
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b1 e0       	ldi	r27, 0x01	; 1
     17c:	ee ea       	ldi	r30, 0xAE	; 174
     17e:	f9 e2       	ldi	r31, 0x29	; 41
     180:	02 c0       	rjmp	.+4      	; 0x186 <__do_copy_data+0x10>
     182:	05 90       	lpm	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	a8 34       	cpi	r26, 0x48	; 72
     188:	b1 07       	cpc	r27, r17
     18a:	d9 f7       	brne	.-10     	; 0x182 <__do_copy_data+0xc>

0000018c <__do_clear_bss>:
     18c:	21 e0       	ldi	r18, 0x01	; 1
     18e:	a8 e4       	ldi	r26, 0x48	; 72
     190:	b1 e0       	ldi	r27, 0x01	; 1
     192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
     194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
     196:	a2 35       	cpi	r26, 0x52	; 82
     198:	b2 07       	cpc	r27, r18
     19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>
     19c:	0e 94 5e 09 	call	0x12bc	; 0x12bc <main>
     1a0:	0c 94 d5 14 	jmp	0x29aa	; 0x29aa <_exit>

000001a4 <__bad_interrupt>:
     1a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a8 <hd44780_outnibble>:
/*
 * Send one nibble out to the LCD controller.
 */
static void
hd44780_outnibble(uint8_t n, uint8_t rs)
{
     1a8:	cf 93       	push	r28
     1aa:	df 93       	push	r29
     1ac:	cd b7       	in	r28, 0x3d	; 61
     1ae:	de b7       	in	r29, 0x3e	; 62
     1b0:	a4 97       	sbiw	r28, 0x24	; 36
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	de bf       	out	0x3e, r29	; 62
     1b8:	0f be       	out	0x3f, r0	; 63
     1ba:	cd bf       	out	0x3d, r28	; 61
     1bc:	8b a3       	std	Y+35, r24	; 0x23
     1be:	6c a3       	std	Y+36, r22	; 0x24
  CLR(PORT, HD44780_RW);
     1c0:	85 e2       	ldi	r24, 0x25	; 37
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	25 e2       	ldi	r18, 0x25	; 37
     1c6:	30 e0       	ldi	r19, 0x00	; 0
     1c8:	f9 01       	movw	r30, r18
     1ca:	20 81       	ld	r18, Z
     1cc:	2f 7e       	andi	r18, 0xEF	; 239
     1ce:	fc 01       	movw	r30, r24
     1d0:	20 83       	st	Z, r18
  if (rs)
     1d2:	8c a1       	ldd	r24, Y+36	; 0x24
     1d4:	88 23       	and	r24, r24
     1d6:	51 f0       	breq	.+20     	; 0x1ec <hd44780_outnibble+0x44>
    SET(PORT, HD44780_RS);
     1d8:	85 e2       	ldi	r24, 0x25	; 37
     1da:	90 e0       	ldi	r25, 0x00	; 0
     1dc:	25 e2       	ldi	r18, 0x25	; 37
     1de:	30 e0       	ldi	r19, 0x00	; 0
     1e0:	f9 01       	movw	r30, r18
     1e2:	20 81       	ld	r18, Z
     1e4:	20 62       	ori	r18, 0x20	; 32
     1e6:	fc 01       	movw	r30, r24
     1e8:	20 83       	st	Z, r18
     1ea:	09 c0       	rjmp	.+18     	; 0x1fe <hd44780_outnibble+0x56>
  else
    CLR(PORT, HD44780_RS);
     1ec:	85 e2       	ldi	r24, 0x25	; 37
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	25 e2       	ldi	r18, 0x25	; 37
     1f2:	30 e0       	ldi	r19, 0x00	; 0
     1f4:	f9 01       	movw	r30, r18
     1f6:	20 81       	ld	r18, Z
     1f8:	2f 7d       	andi	r18, 0xDF	; 223
     1fa:	fc 01       	movw	r30, r24
     1fc:	20 83       	st	Z, r18
  ASSIGN(PORT, HD44780_D4, n);
     1fe:	88 e2       	ldi	r24, 0x28	; 40
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	28 e2       	ldi	r18, 0x28	; 40
     204:	30 e0       	ldi	r19, 0x00	; 0
     206:	f9 01       	movw	r30, r18
     208:	20 81       	ld	r18, Z
     20a:	32 2f       	mov	r19, r18
     20c:	30 7f       	andi	r19, 0xF0	; 240
     20e:	2b a1       	ldd	r18, Y+35	; 0x23
     210:	23 2b       	or	r18, r19
     212:	fc 01       	movw	r30, r24
     214:	20 83       	st	Z, r18
     216:	19 82       	std	Y+1, r1	; 0x01
static inline uint8_t
hd44780_pulse_e(bool readback)
{
  uint8_t x;

  SET(PORT, HD44780_E);
     218:	85 e2       	ldi	r24, 0x25	; 37
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	25 e2       	ldi	r18, 0x25	; 37
     21e:	30 e0       	ldi	r19, 0x00	; 0
     220:	f9 01       	movw	r30, r18
     222:	20 81       	ld	r18, Z
     224:	28 60       	ori	r18, 0x08	; 8
     226:	fc 01       	movw	r30, r24
     228:	20 83       	st	Z, r18
     22a:	80 e0       	ldi	r24, 0x00	; 0
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	a0 e0       	ldi	r26, 0x00	; 0
     230:	bf e3       	ldi	r27, 0x3F	; 63
     232:	8a 83       	std	Y+2, r24	; 0x02
     234:	9b 83       	std	Y+3, r25	; 0x03
     236:	ac 83       	std	Y+4, r26	; 0x04
     238:	bd 83       	std	Y+5, r27	; 0x05
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     23a:	2b ea       	ldi	r18, 0xAB	; 171
     23c:	3a ea       	ldi	r19, 0xAA	; 170
     23e:	4a ea       	ldi	r20, 0xAA	; 170
     240:	50 e4       	ldi	r21, 0x40	; 64
     242:	6a 81       	ldd	r22, Y+2	; 0x02
     244:	7b 81       	ldd	r23, Y+3	; 0x03
     246:	8c 81       	ldd	r24, Y+4	; 0x04
     248:	9d 81       	ldd	r25, Y+5	; 0x05
     24a:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__mulsf3>
     24e:	dc 01       	movw	r26, r24
     250:	cb 01       	movw	r24, r22
     252:	8e 83       	std	Y+6, r24	; 0x06
     254:	9f 83       	std	Y+7, r25	; 0x07
     256:	a8 87       	std	Y+8, r26	; 0x08
     258:	b9 87       	std	Y+9, r27	; 0x09
	__tmp2 = ((F_CPU) / 4e6) * __us;
     25a:	20 e0       	ldi	r18, 0x00	; 0
     25c:	30 e0       	ldi	r19, 0x00	; 0
     25e:	40 e8       	ldi	r20, 0x80	; 128
     260:	50 e4       	ldi	r21, 0x40	; 64
     262:	6a 81       	ldd	r22, Y+2	; 0x02
     264:	7b 81       	ldd	r23, Y+3	; 0x03
     266:	8c 81       	ldd	r24, Y+4	; 0x04
     268:	9d 81       	ldd	r25, Y+5	; 0x05
     26a:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__mulsf3>
     26e:	dc 01       	movw	r26, r24
     270:	cb 01       	movw	r24, r22
     272:	8a 87       	std	Y+10, r24	; 0x0a
     274:	9b 87       	std	Y+11, r25	; 0x0b
     276:	ac 87       	std	Y+12, r26	; 0x0c
     278:	bd 87       	std	Y+13, r27	; 0x0d
	if (__tmp < 1.0)
     27a:	20 e0       	ldi	r18, 0x00	; 0
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	40 e8       	ldi	r20, 0x80	; 128
     280:	5f e3       	ldi	r21, 0x3F	; 63
     282:	6e 81       	ldd	r22, Y+6	; 0x06
     284:	7f 81       	ldd	r23, Y+7	; 0x07
     286:	88 85       	ldd	r24, Y+8	; 0x08
     288:	99 85       	ldd	r25, Y+9	; 0x09
     28a:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__cmpsf2>
     28e:	88 23       	and	r24, r24
     290:	1c f4       	brge	.+6      	; 0x298 <hd44780_outnibble+0xf0>
		__ticks = 1;
     292:	81 e0       	ldi	r24, 0x01	; 1
     294:	8e 87       	std	Y+14, r24	; 0x0e
     296:	b2 c0       	rjmp	.+356    	; 0x3fc <hd44780_outnibble+0x254>
	else if (__tmp2 > 65535)
     298:	20 e0       	ldi	r18, 0x00	; 0
     29a:	3f ef       	ldi	r19, 0xFF	; 255
     29c:	4f e7       	ldi	r20, 0x7F	; 127
     29e:	57 e4       	ldi	r21, 0x47	; 71
     2a0:	6a 85       	ldd	r22, Y+10	; 0x0a
     2a2:	7b 85       	ldd	r23, Y+11	; 0x0b
     2a4:	8c 85       	ldd	r24, Y+12	; 0x0c
     2a6:	9d 85       	ldd	r25, Y+13	; 0x0d
     2a8:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__gesf2>
     2ac:	18 16       	cp	r1, r24
     2ae:	0c f0       	brlt	.+2      	; 0x2b2 <hd44780_outnibble+0x10a>
     2b0:	7b c0       	rjmp	.+246    	; 0x3a8 <hd44780_outnibble+0x200>
	{
		_delay_ms(__us / 1000.0);
     2b2:	20 e0       	ldi	r18, 0x00	; 0
     2b4:	30 e0       	ldi	r19, 0x00	; 0
     2b6:	4a e7       	ldi	r20, 0x7A	; 122
     2b8:	54 e4       	ldi	r21, 0x44	; 68
     2ba:	6a 81       	ldd	r22, Y+2	; 0x02
     2bc:	7b 81       	ldd	r23, Y+3	; 0x03
     2be:	8c 81       	ldd	r24, Y+4	; 0x04
     2c0:	9d 81       	ldd	r25, Y+5	; 0x05
     2c2:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <__divsf3>
     2c6:	dc 01       	movw	r26, r24
     2c8:	cb 01       	movw	r24, r22
     2ca:	8f 87       	std	Y+15, r24	; 0x0f
     2cc:	98 8b       	std	Y+16, r25	; 0x10
     2ce:	a9 8b       	std	Y+17, r26	; 0x11
     2d0:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     2d2:	20 e0       	ldi	r18, 0x00	; 0
     2d4:	30 e0       	ldi	r19, 0x00	; 0
     2d6:	4a e7       	ldi	r20, 0x7A	; 122
     2d8:	55 e4       	ldi	r21, 0x45	; 69
     2da:	6f 85       	ldd	r22, Y+15	; 0x0f
     2dc:	78 89       	ldd	r23, Y+16	; 0x10
     2de:	89 89       	ldd	r24, Y+17	; 0x11
     2e0:	9a 89       	ldd	r25, Y+18	; 0x12
     2e2:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__mulsf3>
     2e6:	dc 01       	movw	r26, r24
     2e8:	cb 01       	movw	r24, r22
     2ea:	8b 8b       	std	Y+19, r24	; 0x13
     2ec:	9c 8b       	std	Y+20, r25	; 0x14
     2ee:	ad 8b       	std	Y+21, r26	; 0x15
     2f0:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     2f2:	20 e0       	ldi	r18, 0x00	; 0
     2f4:	30 e0       	ldi	r19, 0x00	; 0
     2f6:	40 e8       	ldi	r20, 0x80	; 128
     2f8:	5f e3       	ldi	r21, 0x3F	; 63
     2fa:	6b 89       	ldd	r22, Y+19	; 0x13
     2fc:	7c 89       	ldd	r23, Y+20	; 0x14
     2fe:	8d 89       	ldd	r24, Y+21	; 0x15
     300:	9e 89       	ldd	r25, Y+22	; 0x16
     302:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__cmpsf2>
     306:	88 23       	and	r24, r24
     308:	2c f4       	brge	.+10     	; 0x314 <hd44780_outnibble+0x16c>
		__ticks = 1;
     30a:	81 e0       	ldi	r24, 0x01	; 1
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	98 8f       	std	Y+24, r25	; 0x18
     310:	8f 8b       	std	Y+23, r24	; 0x17
     312:	3f c0       	rjmp	.+126    	; 0x392 <hd44780_outnibble+0x1ea>
	else if (__tmp > 65535)
     314:	20 e0       	ldi	r18, 0x00	; 0
     316:	3f ef       	ldi	r19, 0xFF	; 255
     318:	4f e7       	ldi	r20, 0x7F	; 127
     31a:	57 e4       	ldi	r21, 0x47	; 71
     31c:	6b 89       	ldd	r22, Y+19	; 0x13
     31e:	7c 89       	ldd	r23, Y+20	; 0x14
     320:	8d 89       	ldd	r24, Y+21	; 0x15
     322:	9e 89       	ldd	r25, Y+22	; 0x16
     324:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__gesf2>
     328:	18 16       	cp	r1, r24
     32a:	4c f5       	brge	.+82     	; 0x37e <hd44780_outnibble+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     32c:	20 e0       	ldi	r18, 0x00	; 0
     32e:	30 e0       	ldi	r19, 0x00	; 0
     330:	40 e2       	ldi	r20, 0x20	; 32
     332:	51 e4       	ldi	r21, 0x41	; 65
     334:	6f 85       	ldd	r22, Y+15	; 0x0f
     336:	78 89       	ldd	r23, Y+16	; 0x10
     338:	89 89       	ldd	r24, Y+17	; 0x11
     33a:	9a 89       	ldd	r25, Y+18	; 0x12
     33c:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__mulsf3>
     340:	dc 01       	movw	r26, r24
     342:	cb 01       	movw	r24, r22
     344:	bc 01       	movw	r22, r24
     346:	cd 01       	movw	r24, r26
     348:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <__fixunssfsi>
     34c:	dc 01       	movw	r26, r24
     34e:	cb 01       	movw	r24, r22
     350:	98 8f       	std	Y+24, r25	; 0x18
     352:	8f 8b       	std	Y+23, r24	; 0x17
     354:	0f c0       	rjmp	.+30     	; 0x374 <hd44780_outnibble+0x1cc>
     356:	80 e9       	ldi	r24, 0x90	; 144
     358:	91 e0       	ldi	r25, 0x01	; 1
     35a:	9a 8f       	std	Y+26, r25	; 0x1a
     35c:	89 8f       	std	Y+25, r24	; 0x19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     35e:	89 8d       	ldd	r24, Y+25	; 0x19
     360:	9a 8d       	ldd	r25, Y+26	; 0x1a
     362:	01 97       	sbiw	r24, 0x01	; 1
     364:	f1 f7       	brne	.-4      	; 0x362 <hd44780_outnibble+0x1ba>
     366:	9a 8f       	std	Y+26, r25	; 0x1a
     368:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     36a:	8f 89       	ldd	r24, Y+23	; 0x17
     36c:	98 8d       	ldd	r25, Y+24	; 0x18
     36e:	01 97       	sbiw	r24, 0x01	; 1
     370:	98 8f       	std	Y+24, r25	; 0x18
     372:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     374:	8f 89       	ldd	r24, Y+23	; 0x17
     376:	98 8d       	ldd	r25, Y+24	; 0x18
     378:	89 2b       	or	r24, r25
     37a:	69 f7       	brne	.-38     	; 0x356 <hd44780_outnibble+0x1ae>
     37c:	3f c0       	rjmp	.+126    	; 0x3fc <hd44780_outnibble+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     37e:	6b 89       	ldd	r22, Y+19	; 0x13
     380:	7c 89       	ldd	r23, Y+20	; 0x14
     382:	8d 89       	ldd	r24, Y+21	; 0x15
     384:	9e 89       	ldd	r25, Y+22	; 0x16
     386:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <__fixunssfsi>
     38a:	dc 01       	movw	r26, r24
     38c:	cb 01       	movw	r24, r22
     38e:	98 8f       	std	Y+24, r25	; 0x18
     390:	8f 8b       	std	Y+23, r24	; 0x17
     392:	8f 89       	ldd	r24, Y+23	; 0x17
     394:	98 8d       	ldd	r25, Y+24	; 0x18
     396:	9c 8f       	std	Y+28, r25	; 0x1c
     398:	8b 8f       	std	Y+27, r24	; 0x1b
     39a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     39c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     39e:	01 97       	sbiw	r24, 0x01	; 1
     3a0:	f1 f7       	brne	.-4      	; 0x39e <hd44780_outnibble+0x1f6>
     3a2:	9c 8f       	std	Y+28, r25	; 0x1c
     3a4:	8b 8f       	std	Y+27, r24	; 0x1b
     3a6:	2a c0       	rjmp	.+84     	; 0x3fc <hd44780_outnibble+0x254>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     3a8:	20 e0       	ldi	r18, 0x00	; 0
     3aa:	30 e0       	ldi	r19, 0x00	; 0
     3ac:	4f e7       	ldi	r20, 0x7F	; 127
     3ae:	53 e4       	ldi	r21, 0x43	; 67
     3b0:	6e 81       	ldd	r22, Y+6	; 0x06
     3b2:	7f 81       	ldd	r23, Y+7	; 0x07
     3b4:	88 85       	ldd	r24, Y+8	; 0x08
     3b6:	99 85       	ldd	r25, Y+9	; 0x09
     3b8:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__gesf2>
     3bc:	18 16       	cp	r1, r24
     3be:	ac f4       	brge	.+42     	; 0x3ea <hd44780_outnibble+0x242>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     3c0:	6a 85       	ldd	r22, Y+10	; 0x0a
     3c2:	7b 85       	ldd	r23, Y+11	; 0x0b
     3c4:	8c 85       	ldd	r24, Y+12	; 0x0c
     3c6:	9d 85       	ldd	r25, Y+13	; 0x0d
     3c8:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <__fixunssfsi>
     3cc:	dc 01       	movw	r26, r24
     3ce:	cb 01       	movw	r24, r22
     3d0:	9e 8f       	std	Y+30, r25	; 0x1e
     3d2:	8d 8f       	std	Y+29, r24	; 0x1d
     3d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     3d6:	9e 8d       	ldd	r25, Y+30	; 0x1e
     3d8:	98 a3       	std	Y+32, r25	; 0x20
     3da:	8f 8f       	std	Y+31, r24	; 0x1f
     3dc:	8f 8d       	ldd	r24, Y+31	; 0x1f
     3de:	98 a1       	ldd	r25, Y+32	; 0x20
     3e0:	01 97       	sbiw	r24, 0x01	; 1
     3e2:	f1 f7       	brne	.-4      	; 0x3e0 <hd44780_outnibble+0x238>
     3e4:	98 a3       	std	Y+32, r25	; 0x20
     3e6:	8f 8f       	std	Y+31, r24	; 0x1f
     3e8:	0f c0       	rjmp	.+30     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     3ea:	6e 81       	ldd	r22, Y+6	; 0x06
     3ec:	7f 81       	ldd	r23, Y+7	; 0x07
     3ee:	88 85       	ldd	r24, Y+8	; 0x08
     3f0:	99 85       	ldd	r25, Y+9	; 0x09
     3f2:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <__fixunssfsi>
     3f6:	dc 01       	movw	r26, r24
     3f8:	cb 01       	movw	r24, r22
     3fa:	8e 87       	std	Y+14, r24	; 0x0e
     3fc:	8e 85       	ldd	r24, Y+14	; 0x0e
     3fe:	89 a3       	std	Y+33, r24	; 0x21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     400:	89 a1       	ldd	r24, Y+33	; 0x21
     402:	8a 95       	dec	r24
     404:	f1 f7       	brne	.-4      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
     406:	89 a3       	std	Y+33, r24	; 0x21
  __asm__ volatile("nop");
  __asm__ volatile("nop");
#    endif /* F_CPU > 2000000UL */
#  endif /* F_CPU > 1000000UL */
#endif
  if (readback)
     408:	89 81       	ldd	r24, Y+1	; 0x01
     40a:	88 23       	and	r24, r24
     40c:	39 f0       	breq	.+14     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
    x = READ(PIN, HD44780_D4);
     40e:	86 e2       	ldi	r24, 0x26	; 38
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	fc 01       	movw	r30, r24
     414:	80 81       	ld	r24, Z
     416:	8f 70       	andi	r24, 0x0F	; 15
     418:	8a a3       	std	Y+34, r24	; 0x22
     41a:	01 c0       	rjmp	.+2      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
  else
    x = 0;
     41c:	1a a2       	std	Y+34, r1	; 0x22
  CLR(PORT, HD44780_E);
     41e:	85 e2       	ldi	r24, 0x25	; 37
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	25 e2       	ldi	r18, 0x25	; 37
     424:	30 e0       	ldi	r19, 0x00	; 0
     426:	f9 01       	movw	r30, r18
     428:	20 81       	ld	r18, Z
     42a:	27 7f       	andi	r18, 0xF7	; 247
     42c:	fc 01       	movw	r30, r24
     42e:	20 83       	st	Z, r18
    SET(PORT, HD44780_RS);
  else
    CLR(PORT, HD44780_RS);
  ASSIGN(PORT, HD44780_D4, n);
  (void)hd44780_pulse_e(false);
}
     430:	00 00       	nop
     432:	a4 96       	adiw	r28, 0x24	; 36
     434:	0f b6       	in	r0, 0x3f	; 63
     436:	f8 94       	cli
     438:	de bf       	out	0x3e, r29	; 62
     43a:	0f be       	out	0x3f, r0	; 63
     43c:	cd bf       	out	0x3d, r28	; 61
     43e:	df 91       	pop	r29
     440:	cf 91       	pop	r28
     442:	08 95       	ret

00000444 <hd44780_outbyte>:
 * Send one byte to the LCD controller.  As we are in 4-bit mode, we
 * have to send two nibbles.
 */
void
hd44780_outbyte(uint8_t b, uint8_t rs)
{
     444:	cf 93       	push	r28
     446:	df 93       	push	r29
     448:	00 d0       	rcall	.+0      	; 0x44a <hd44780_outbyte+0x6>
     44a:	cd b7       	in	r28, 0x3d	; 61
     44c:	de b7       	in	r29, 0x3e	; 62
     44e:	89 83       	std	Y+1, r24	; 0x01
     450:	6a 83       	std	Y+2, r22	; 0x02
  hd44780_outnibble(b >> 4, rs);
     452:	89 81       	ldd	r24, Y+1	; 0x01
     454:	82 95       	swap	r24
     456:	8f 70       	andi	r24, 0x0F	; 15
     458:	6a 81       	ldd	r22, Y+2	; 0x02
     45a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <hd44780_outnibble>
  hd44780_outnibble(b & 0xf, rs);
     45e:	89 81       	ldd	r24, Y+1	; 0x01
     460:	8f 70       	andi	r24, 0x0F	; 15
     462:	6a 81       	ldd	r22, Y+2	; 0x02
     464:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <hd44780_outnibble>
}
     468:	00 00       	nop
     46a:	0f 90       	pop	r0
     46c:	0f 90       	pop	r0
     46e:	df 91       	pop	r29
     470:	cf 91       	pop	r28
     472:	08 95       	ret

00000474 <hd44780_innibble>:
/*
 * Read one nibble from the LCD controller.
 */
static uint8_t
hd44780_innibble(uint8_t rs)
{
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
     478:	cd b7       	in	r28, 0x3d	; 61
     47a:	de b7       	in	r29, 0x3e	; 62
     47c:	a4 97       	sbiw	r28, 0x24	; 36
     47e:	0f b6       	in	r0, 0x3f	; 63
     480:	f8 94       	cli
     482:	de bf       	out	0x3e, r29	; 62
     484:	0f be       	out	0x3f, r0	; 63
     486:	cd bf       	out	0x3d, r28	; 61
     488:	8c a3       	std	Y+36, r24	; 0x24
  uint8_t x;

  SET(PORT, HD44780_RW);
     48a:	85 e2       	ldi	r24, 0x25	; 37
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	25 e2       	ldi	r18, 0x25	; 37
     490:	30 e0       	ldi	r19, 0x00	; 0
     492:	f9 01       	movw	r30, r18
     494:	20 81       	ld	r18, Z
     496:	20 61       	ori	r18, 0x10	; 16
     498:	fc 01       	movw	r30, r24
     49a:	20 83       	st	Z, r18
  ASSIGN(DDR, HD44780_D4, 0x00);
     49c:	87 e2       	ldi	r24, 0x27	; 39
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	27 e2       	ldi	r18, 0x27	; 39
     4a2:	30 e0       	ldi	r19, 0x00	; 0
     4a4:	f9 01       	movw	r30, r18
     4a6:	20 81       	ld	r18, Z
     4a8:	20 7f       	andi	r18, 0xF0	; 240
     4aa:	fc 01       	movw	r30, r24
     4ac:	20 83       	st	Z, r18
  if (rs)
     4ae:	8c a1       	ldd	r24, Y+36	; 0x24
     4b0:	88 23       	and	r24, r24
     4b2:	51 f0       	breq	.+20     	; 0x4c8 <hd44780_innibble+0x54>
    SET(PORT, HD44780_RS);
     4b4:	85 e2       	ldi	r24, 0x25	; 37
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	25 e2       	ldi	r18, 0x25	; 37
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	f9 01       	movw	r30, r18
     4be:	20 81       	ld	r18, Z
     4c0:	20 62       	ori	r18, 0x20	; 32
     4c2:	fc 01       	movw	r30, r24
     4c4:	20 83       	st	Z, r18
     4c6:	09 c0       	rjmp	.+18     	; 0x4da <hd44780_innibble+0x66>
  else
    CLR(PORT, HD44780_RS);
     4c8:	85 e2       	ldi	r24, 0x25	; 37
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	25 e2       	ldi	r18, 0x25	; 37
     4ce:	30 e0       	ldi	r19, 0x00	; 0
     4d0:	f9 01       	movw	r30, r18
     4d2:	20 81       	ld	r18, Z
     4d4:	2f 7d       	andi	r18, 0xDF	; 223
     4d6:	fc 01       	movw	r30, r24
     4d8:	20 83       	st	Z, r18
     4da:	81 e0       	ldi	r24, 0x01	; 1
     4dc:	8a 83       	std	Y+2, r24	; 0x02
static inline uint8_t
hd44780_pulse_e(bool readback)
{
  uint8_t x;

  SET(PORT, HD44780_E);
     4de:	85 e2       	ldi	r24, 0x25	; 37
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	25 e2       	ldi	r18, 0x25	; 37
     4e4:	30 e0       	ldi	r19, 0x00	; 0
     4e6:	f9 01       	movw	r30, r18
     4e8:	20 81       	ld	r18, Z
     4ea:	28 60       	ori	r18, 0x08	; 8
     4ec:	fc 01       	movw	r30, r24
     4ee:	20 83       	st	Z, r18
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	a0 e0       	ldi	r26, 0x00	; 0
     4f6:	bf e3       	ldi	r27, 0x3F	; 63
     4f8:	8b 83       	std	Y+3, r24	; 0x03
     4fa:	9c 83       	std	Y+4, r25	; 0x04
     4fc:	ad 83       	std	Y+5, r26	; 0x05
     4fe:	be 83       	std	Y+6, r27	; 0x06
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     500:	2b ea       	ldi	r18, 0xAB	; 171
     502:	3a ea       	ldi	r19, 0xAA	; 170
     504:	4a ea       	ldi	r20, 0xAA	; 170
     506:	50 e4       	ldi	r21, 0x40	; 64
     508:	6b 81       	ldd	r22, Y+3	; 0x03
     50a:	7c 81       	ldd	r23, Y+4	; 0x04
     50c:	8d 81       	ldd	r24, Y+5	; 0x05
     50e:	9e 81       	ldd	r25, Y+6	; 0x06
     510:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__mulsf3>
     514:	dc 01       	movw	r26, r24
     516:	cb 01       	movw	r24, r22
     518:	8f 83       	std	Y+7, r24	; 0x07
     51a:	98 87       	std	Y+8, r25	; 0x08
     51c:	a9 87       	std	Y+9, r26	; 0x09
     51e:	ba 87       	std	Y+10, r27	; 0x0a
	__tmp2 = ((F_CPU) / 4e6) * __us;
     520:	20 e0       	ldi	r18, 0x00	; 0
     522:	30 e0       	ldi	r19, 0x00	; 0
     524:	40 e8       	ldi	r20, 0x80	; 128
     526:	50 e4       	ldi	r21, 0x40	; 64
     528:	6b 81       	ldd	r22, Y+3	; 0x03
     52a:	7c 81       	ldd	r23, Y+4	; 0x04
     52c:	8d 81       	ldd	r24, Y+5	; 0x05
     52e:	9e 81       	ldd	r25, Y+6	; 0x06
     530:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__mulsf3>
     534:	dc 01       	movw	r26, r24
     536:	cb 01       	movw	r24, r22
     538:	8b 87       	std	Y+11, r24	; 0x0b
     53a:	9c 87       	std	Y+12, r25	; 0x0c
     53c:	ad 87       	std	Y+13, r26	; 0x0d
     53e:	be 87       	std	Y+14, r27	; 0x0e
	if (__tmp < 1.0)
     540:	20 e0       	ldi	r18, 0x00	; 0
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	40 e8       	ldi	r20, 0x80	; 128
     546:	5f e3       	ldi	r21, 0x3F	; 63
     548:	6f 81       	ldd	r22, Y+7	; 0x07
     54a:	78 85       	ldd	r23, Y+8	; 0x08
     54c:	89 85       	ldd	r24, Y+9	; 0x09
     54e:	9a 85       	ldd	r25, Y+10	; 0x0a
     550:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__cmpsf2>
     554:	88 23       	and	r24, r24
     556:	1c f4       	brge	.+6      	; 0x55e <hd44780_innibble+0xea>
		__ticks = 1;
     558:	81 e0       	ldi	r24, 0x01	; 1
     55a:	8f 87       	std	Y+15, r24	; 0x0f
     55c:	b2 c0       	rjmp	.+356    	; 0x6c2 <hd44780_innibble+0x24e>
	else if (__tmp2 > 65535)
     55e:	20 e0       	ldi	r18, 0x00	; 0
     560:	3f ef       	ldi	r19, 0xFF	; 255
     562:	4f e7       	ldi	r20, 0x7F	; 127
     564:	57 e4       	ldi	r21, 0x47	; 71
     566:	6b 85       	ldd	r22, Y+11	; 0x0b
     568:	7c 85       	ldd	r23, Y+12	; 0x0c
     56a:	8d 85       	ldd	r24, Y+13	; 0x0d
     56c:	9e 85       	ldd	r25, Y+14	; 0x0e
     56e:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__gesf2>
     572:	18 16       	cp	r1, r24
     574:	0c f0       	brlt	.+2      	; 0x578 <hd44780_innibble+0x104>
     576:	7b c0       	rjmp	.+246    	; 0x66e <hd44780_innibble+0x1fa>
	{
		_delay_ms(__us / 1000.0);
     578:	20 e0       	ldi	r18, 0x00	; 0
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	4a e7       	ldi	r20, 0x7A	; 122
     57e:	54 e4       	ldi	r21, 0x44	; 68
     580:	6b 81       	ldd	r22, Y+3	; 0x03
     582:	7c 81       	ldd	r23, Y+4	; 0x04
     584:	8d 81       	ldd	r24, Y+5	; 0x05
     586:	9e 81       	ldd	r25, Y+6	; 0x06
     588:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <__divsf3>
     58c:	dc 01       	movw	r26, r24
     58e:	cb 01       	movw	r24, r22
     590:	88 8b       	std	Y+16, r24	; 0x10
     592:	99 8b       	std	Y+17, r25	; 0x11
     594:	aa 8b       	std	Y+18, r26	; 0x12
     596:	bb 8b       	std	Y+19, r27	; 0x13

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	30 e0       	ldi	r19, 0x00	; 0
     59c:	4a e7       	ldi	r20, 0x7A	; 122
     59e:	55 e4       	ldi	r21, 0x45	; 69
     5a0:	68 89       	ldd	r22, Y+16	; 0x10
     5a2:	79 89       	ldd	r23, Y+17	; 0x11
     5a4:	8a 89       	ldd	r24, Y+18	; 0x12
     5a6:	9b 89       	ldd	r25, Y+19	; 0x13
     5a8:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__mulsf3>
     5ac:	dc 01       	movw	r26, r24
     5ae:	cb 01       	movw	r24, r22
     5b0:	8c 8b       	std	Y+20, r24	; 0x14
     5b2:	9d 8b       	std	Y+21, r25	; 0x15
     5b4:	ae 8b       	std	Y+22, r26	; 0x16
     5b6:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
     5b8:	20 e0       	ldi	r18, 0x00	; 0
     5ba:	30 e0       	ldi	r19, 0x00	; 0
     5bc:	40 e8       	ldi	r20, 0x80	; 128
     5be:	5f e3       	ldi	r21, 0x3F	; 63
     5c0:	6c 89       	ldd	r22, Y+20	; 0x14
     5c2:	7d 89       	ldd	r23, Y+21	; 0x15
     5c4:	8e 89       	ldd	r24, Y+22	; 0x16
     5c6:	9f 89       	ldd	r25, Y+23	; 0x17
     5c8:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__cmpsf2>
     5cc:	88 23       	and	r24, r24
     5ce:	2c f4       	brge	.+10     	; 0x5da <hd44780_innibble+0x166>
		__ticks = 1;
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	99 8f       	std	Y+25, r25	; 0x19
     5d6:	88 8f       	std	Y+24, r24	; 0x18
     5d8:	3f c0       	rjmp	.+126    	; 0x658 <hd44780_innibble+0x1e4>
	else if (__tmp > 65535)
     5da:	20 e0       	ldi	r18, 0x00	; 0
     5dc:	3f ef       	ldi	r19, 0xFF	; 255
     5de:	4f e7       	ldi	r20, 0x7F	; 127
     5e0:	57 e4       	ldi	r21, 0x47	; 71
     5e2:	6c 89       	ldd	r22, Y+20	; 0x14
     5e4:	7d 89       	ldd	r23, Y+21	; 0x15
     5e6:	8e 89       	ldd	r24, Y+22	; 0x16
     5e8:	9f 89       	ldd	r25, Y+23	; 0x17
     5ea:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__gesf2>
     5ee:	18 16       	cp	r1, r24
     5f0:	4c f5       	brge	.+82     	; 0x644 <hd44780_innibble+0x1d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5f2:	20 e0       	ldi	r18, 0x00	; 0
     5f4:	30 e0       	ldi	r19, 0x00	; 0
     5f6:	40 e2       	ldi	r20, 0x20	; 32
     5f8:	51 e4       	ldi	r21, 0x41	; 65
     5fa:	68 89       	ldd	r22, Y+16	; 0x10
     5fc:	79 89       	ldd	r23, Y+17	; 0x11
     5fe:	8a 89       	ldd	r24, Y+18	; 0x12
     600:	9b 89       	ldd	r25, Y+19	; 0x13
     602:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__mulsf3>
     606:	dc 01       	movw	r26, r24
     608:	cb 01       	movw	r24, r22
     60a:	bc 01       	movw	r22, r24
     60c:	cd 01       	movw	r24, r26
     60e:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <__fixunssfsi>
     612:	dc 01       	movw	r26, r24
     614:	cb 01       	movw	r24, r22
     616:	99 8f       	std	Y+25, r25	; 0x19
     618:	88 8f       	std	Y+24, r24	; 0x18
     61a:	0f c0       	rjmp	.+30     	; 0x63a <hd44780_innibble+0x1c6>
     61c:	80 e9       	ldi	r24, 0x90	; 144
     61e:	91 e0       	ldi	r25, 0x01	; 1
     620:	9b 8f       	std	Y+27, r25	; 0x1b
     622:	8a 8f       	std	Y+26, r24	; 0x1a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     624:	8a 8d       	ldd	r24, Y+26	; 0x1a
     626:	9b 8d       	ldd	r25, Y+27	; 0x1b
     628:	01 97       	sbiw	r24, 0x01	; 1
     62a:	f1 f7       	brne	.-4      	; 0x628 <hd44780_innibble+0x1b4>
     62c:	9b 8f       	std	Y+27, r25	; 0x1b
     62e:	8a 8f       	std	Y+26, r24	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     630:	88 8d       	ldd	r24, Y+24	; 0x18
     632:	99 8d       	ldd	r25, Y+25	; 0x19
     634:	01 97       	sbiw	r24, 0x01	; 1
     636:	99 8f       	std	Y+25, r25	; 0x19
     638:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     63a:	88 8d       	ldd	r24, Y+24	; 0x18
     63c:	99 8d       	ldd	r25, Y+25	; 0x19
     63e:	89 2b       	or	r24, r25
     640:	69 f7       	brne	.-38     	; 0x61c <hd44780_innibble+0x1a8>
     642:	3f c0       	rjmp	.+126    	; 0x6c2 <hd44780_innibble+0x24e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     644:	6c 89       	ldd	r22, Y+20	; 0x14
     646:	7d 89       	ldd	r23, Y+21	; 0x15
     648:	8e 89       	ldd	r24, Y+22	; 0x16
     64a:	9f 89       	ldd	r25, Y+23	; 0x17
     64c:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <__fixunssfsi>
     650:	dc 01       	movw	r26, r24
     652:	cb 01       	movw	r24, r22
     654:	99 8f       	std	Y+25, r25	; 0x19
     656:	88 8f       	std	Y+24, r24	; 0x18
     658:	88 8d       	ldd	r24, Y+24	; 0x18
     65a:	99 8d       	ldd	r25, Y+25	; 0x19
     65c:	9d 8f       	std	Y+29, r25	; 0x1d
     65e:	8c 8f       	std	Y+28, r24	; 0x1c
     660:	8c 8d       	ldd	r24, Y+28	; 0x1c
     662:	9d 8d       	ldd	r25, Y+29	; 0x1d
     664:	01 97       	sbiw	r24, 0x01	; 1
     666:	f1 f7       	brne	.-4      	; 0x664 <hd44780_innibble+0x1f0>
     668:	9d 8f       	std	Y+29, r25	; 0x1d
     66a:	8c 8f       	std	Y+28, r24	; 0x1c
     66c:	2a c0       	rjmp	.+84     	; 0x6c2 <hd44780_innibble+0x24e>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     66e:	20 e0       	ldi	r18, 0x00	; 0
     670:	30 e0       	ldi	r19, 0x00	; 0
     672:	4f e7       	ldi	r20, 0x7F	; 127
     674:	53 e4       	ldi	r21, 0x43	; 67
     676:	6f 81       	ldd	r22, Y+7	; 0x07
     678:	78 85       	ldd	r23, Y+8	; 0x08
     67a:	89 85       	ldd	r24, Y+9	; 0x09
     67c:	9a 85       	ldd	r25, Y+10	; 0x0a
     67e:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__gesf2>
     682:	18 16       	cp	r1, r24
     684:	ac f4       	brge	.+42     	; 0x6b0 <hd44780_innibble+0x23c>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     686:	6b 85       	ldd	r22, Y+11	; 0x0b
     688:	7c 85       	ldd	r23, Y+12	; 0x0c
     68a:	8d 85       	ldd	r24, Y+13	; 0x0d
     68c:	9e 85       	ldd	r25, Y+14	; 0x0e
     68e:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <__fixunssfsi>
     692:	dc 01       	movw	r26, r24
     694:	cb 01       	movw	r24, r22
     696:	9f 8f       	std	Y+31, r25	; 0x1f
     698:	8e 8f       	std	Y+30, r24	; 0x1e
     69a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     69c:	9f 8d       	ldd	r25, Y+31	; 0x1f
     69e:	99 a3       	std	Y+33, r25	; 0x21
     6a0:	88 a3       	std	Y+32, r24	; 0x20
     6a2:	88 a1       	ldd	r24, Y+32	; 0x20
     6a4:	99 a1       	ldd	r25, Y+33	; 0x21
     6a6:	01 97       	sbiw	r24, 0x01	; 1
     6a8:	f1 f7       	brne	.-4      	; 0x6a6 <hd44780_innibble+0x232>
     6aa:	99 a3       	std	Y+33, r25	; 0x21
     6ac:	88 a3       	std	Y+32, r24	; 0x20
     6ae:	0f c0       	rjmp	.+30     	; 0x6ce <hd44780_innibble+0x25a>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     6b0:	6f 81       	ldd	r22, Y+7	; 0x07
     6b2:	78 85       	ldd	r23, Y+8	; 0x08
     6b4:	89 85       	ldd	r24, Y+9	; 0x09
     6b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     6b8:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <__fixunssfsi>
     6bc:	dc 01       	movw	r26, r24
     6be:	cb 01       	movw	r24, r22
     6c0:	8f 87       	std	Y+15, r24	; 0x0f
     6c2:	8f 85       	ldd	r24, Y+15	; 0x0f
     6c4:	8a a3       	std	Y+34, r24	; 0x22
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     6c6:	8a a1       	ldd	r24, Y+34	; 0x22
     6c8:	8a 95       	dec	r24
     6ca:	f1 f7       	brne	.-4      	; 0x6c8 <hd44780_innibble+0x254>
     6cc:	8a a3       	std	Y+34, r24	; 0x22
  __asm__ volatile("nop");
  __asm__ volatile("nop");
#    endif /* F_CPU > 2000000UL */
#  endif /* F_CPU > 1000000UL */
#endif
  if (readback)
     6ce:	8a 81       	ldd	r24, Y+2	; 0x02
     6d0:	88 23       	and	r24, r24
     6d2:	39 f0       	breq	.+14     	; 0x6e2 <hd44780_innibble+0x26e>
    x = READ(PIN, HD44780_D4);
     6d4:	86 e2       	ldi	r24, 0x26	; 38
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	fc 01       	movw	r30, r24
     6da:	80 81       	ld	r24, Z
     6dc:	8f 70       	andi	r24, 0x0F	; 15
     6de:	8b a3       	std	Y+35, r24	; 0x23
     6e0:	01 c0       	rjmp	.+2      	; 0x6e4 <hd44780_innibble+0x270>
  else
    x = 0;
     6e2:	1b a2       	std	Y+35, r1	; 0x23
  CLR(PORT, HD44780_E);
     6e4:	85 e2       	ldi	r24, 0x25	; 37
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	25 e2       	ldi	r18, 0x25	; 37
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	f9 01       	movw	r30, r18
     6ee:	20 81       	ld	r18, Z
     6f0:	27 7f       	andi	r18, 0xF7	; 247
     6f2:	fc 01       	movw	r30, r24
     6f4:	20 83       	st	Z, r18

  return x;
     6f6:	8b a1       	ldd	r24, Y+35	; 0x23
  ASSIGN(DDR, HD44780_D4, 0x00);
  if (rs)
    SET(PORT, HD44780_RS);
  else
    CLR(PORT, HD44780_RS);
  x = hd44780_pulse_e(true);
     6f8:	89 83       	std	Y+1, r24	; 0x01
  ASSIGN(DDR, HD44780_D4, 0x0F);
     6fa:	87 e2       	ldi	r24, 0x27	; 39
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	27 e2       	ldi	r18, 0x27	; 39
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	f9 01       	movw	r30, r18
     704:	20 81       	ld	r18, Z
     706:	2f 60       	ori	r18, 0x0F	; 15
     708:	fc 01       	movw	r30, r24
     70a:	20 83       	st	Z, r18
  CLR(PORT, HD44780_RW);
     70c:	85 e2       	ldi	r24, 0x25	; 37
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	25 e2       	ldi	r18, 0x25	; 37
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	f9 01       	movw	r30, r18
     716:	20 81       	ld	r18, Z
     718:	2f 7e       	andi	r18, 0xEF	; 239
     71a:	fc 01       	movw	r30, r24
     71c:	20 83       	st	Z, r18

  return x;
     71e:	89 81       	ldd	r24, Y+1	; 0x01
}
     720:	a4 96       	adiw	r28, 0x24	; 36
     722:	0f b6       	in	r0, 0x3f	; 63
     724:	f8 94       	cli
     726:	de bf       	out	0x3e, r29	; 62
     728:	0f be       	out	0x3f, r0	; 63
     72a:	cd bf       	out	0x3d, r28	; 61
     72c:	df 91       	pop	r29
     72e:	cf 91       	pop	r28
     730:	08 95       	ret

00000732 <hd44780_inbyte>:
/*
 * Read one byte (i.e. two nibbles) from the LCD controller.
 */
uint8_t
hd44780_inbyte(uint8_t rs)
{
     732:	cf 93       	push	r28
     734:	df 93       	push	r29
     736:	00 d0       	rcall	.+0      	; 0x738 <hd44780_inbyte+0x6>
     738:	cd b7       	in	r28, 0x3d	; 61
     73a:	de b7       	in	r29, 0x3e	; 62
     73c:	8a 83       	std	Y+2, r24	; 0x02
  uint8_t x;

  x = hd44780_innibble(rs) << 4;
     73e:	8a 81       	ldd	r24, Y+2	; 0x02
     740:	0e 94 3a 02 	call	0x474	; 0x474 <hd44780_innibble>
     744:	82 95       	swap	r24
     746:	80 7f       	andi	r24, 0xF0	; 240
     748:	89 83       	std	Y+1, r24	; 0x01
  x |= hd44780_innibble(rs);
     74a:	8a 81       	ldd	r24, Y+2	; 0x02
     74c:	0e 94 3a 02 	call	0x474	; 0x474 <hd44780_innibble>
     750:	98 2f       	mov	r25, r24
     752:	89 81       	ldd	r24, Y+1	; 0x01
     754:	89 2b       	or	r24, r25
     756:	89 83       	std	Y+1, r24	; 0x01

  return x;
     758:	89 81       	ldd	r24, Y+1	; 0x01
}
     75a:	0f 90       	pop	r0
     75c:	0f 90       	pop	r0
     75e:	df 91       	pop	r29
     760:	cf 91       	pop	r28
     762:	08 95       	ret

00000764 <hd44780_wait_ready>:
/*
 * Wait until the busy flag is cleared.
 */
void
hd44780_wait_ready(bool longwait)
{
     764:	cf 93       	push	r28
     766:	df 93       	push	r29
     768:	cd b7       	in	r28, 0x3d	; 61
     76a:	de b7       	in	r29, 0x3e	; 62
     76c:	af 97       	sbiw	r28, 0x2f	; 47
     76e:	0f b6       	in	r0, 0x3f	; 63
     770:	f8 94       	cli
     772:	de bf       	out	0x3e, r29	; 62
     774:	0f be       	out	0x3f, r0	; 63
     776:	cd bf       	out	0x3d, r28	; 61
     778:	8f a7       	std	Y+47, r24	; 0x2f
#if USE_BUSY_BIT
  while (hd44780_incmd() & HD44780_BUSYFLAG) ;
#else
  if (longwait)
     77a:	8f a5       	ldd	r24, Y+47	; 0x2f
     77c:	88 23       	and	r24, r24
     77e:	09 f4       	brne	.+2      	; 0x782 <hd44780_wait_ready+0x1e>
     780:	73 c0       	rjmp	.+230    	; 0x868 <__DATA_REGION_LENGTH__+0x68>
     782:	8c e5       	ldi	r24, 0x5C	; 92
     784:	9f e8       	ldi	r25, 0x8F	; 143
     786:	a2 ec       	ldi	r26, 0xC2	; 194
     788:	bf e3       	ldi	r27, 0x3F	; 63
     78a:	8d 83       	std	Y+5, r24	; 0x05
     78c:	9e 83       	std	Y+6, r25	; 0x06
     78e:	af 83       	std	Y+7, r26	; 0x07
     790:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     792:	20 e0       	ldi	r18, 0x00	; 0
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	4a e7       	ldi	r20, 0x7A	; 122
     798:	55 e4       	ldi	r21, 0x45	; 69
     79a:	6d 81       	ldd	r22, Y+5	; 0x05
     79c:	7e 81       	ldd	r23, Y+6	; 0x06
     79e:	8f 81       	ldd	r24, Y+7	; 0x07
     7a0:	98 85       	ldd	r25, Y+8	; 0x08
     7a2:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__mulsf3>
     7a6:	dc 01       	movw	r26, r24
     7a8:	cb 01       	movw	r24, r22
     7aa:	89 87       	std	Y+9, r24	; 0x09
     7ac:	9a 87       	std	Y+10, r25	; 0x0a
     7ae:	ab 87       	std	Y+11, r26	; 0x0b
     7b0:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     7b2:	20 e0       	ldi	r18, 0x00	; 0
     7b4:	30 e0       	ldi	r19, 0x00	; 0
     7b6:	40 e8       	ldi	r20, 0x80	; 128
     7b8:	5f e3       	ldi	r21, 0x3F	; 63
     7ba:	69 85       	ldd	r22, Y+9	; 0x09
     7bc:	7a 85       	ldd	r23, Y+10	; 0x0a
     7be:	8b 85       	ldd	r24, Y+11	; 0x0b
     7c0:	9c 85       	ldd	r25, Y+12	; 0x0c
     7c2:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__cmpsf2>
     7c6:	88 23       	and	r24, r24
     7c8:	2c f4       	brge	.+10     	; 0x7d4 <hd44780_wait_ready+0x70>
		__ticks = 1;
     7ca:	81 e0       	ldi	r24, 0x01	; 1
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	9e 87       	std	Y+14, r25	; 0x0e
     7d0:	8d 87       	std	Y+13, r24	; 0x0d
     7d2:	3f c0       	rjmp	.+126    	; 0x852 <__DATA_REGION_LENGTH__+0x52>
	else if (__tmp > 65535)
     7d4:	20 e0       	ldi	r18, 0x00	; 0
     7d6:	3f ef       	ldi	r19, 0xFF	; 255
     7d8:	4f e7       	ldi	r20, 0x7F	; 127
     7da:	57 e4       	ldi	r21, 0x47	; 71
     7dc:	69 85       	ldd	r22, Y+9	; 0x09
     7de:	7a 85       	ldd	r23, Y+10	; 0x0a
     7e0:	8b 85       	ldd	r24, Y+11	; 0x0b
     7e2:	9c 85       	ldd	r25, Y+12	; 0x0c
     7e4:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__gesf2>
     7e8:	18 16       	cp	r1, r24
     7ea:	4c f5       	brge	.+82     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7ec:	20 e0       	ldi	r18, 0x00	; 0
     7ee:	30 e0       	ldi	r19, 0x00	; 0
     7f0:	40 e2       	ldi	r20, 0x20	; 32
     7f2:	51 e4       	ldi	r21, 0x41	; 65
     7f4:	6d 81       	ldd	r22, Y+5	; 0x05
     7f6:	7e 81       	ldd	r23, Y+6	; 0x06
     7f8:	8f 81       	ldd	r24, Y+7	; 0x07
     7fa:	98 85       	ldd	r25, Y+8	; 0x08
     7fc:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__mulsf3>
     800:	dc 01       	movw	r26, r24
     802:	cb 01       	movw	r24, r22
     804:	bc 01       	movw	r22, r24
     806:	cd 01       	movw	r24, r26
     808:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <__fixunssfsi>
     80c:	dc 01       	movw	r26, r24
     80e:	cb 01       	movw	r24, r22
     810:	9e 87       	std	Y+14, r25	; 0x0e
     812:	8d 87       	std	Y+13, r24	; 0x0d
     814:	0f c0       	rjmp	.+30     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
     816:	80 e9       	ldi	r24, 0x90	; 144
     818:	91 e0       	ldi	r25, 0x01	; 1
     81a:	98 8b       	std	Y+16, r25	; 0x10
     81c:	8f 87       	std	Y+15, r24	; 0x0f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     81e:	8f 85       	ldd	r24, Y+15	; 0x0f
     820:	98 89       	ldd	r25, Y+16	; 0x10
     822:	01 97       	sbiw	r24, 0x01	; 1
     824:	f1 f7       	brne	.-4      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
     826:	98 8b       	std	Y+16, r25	; 0x10
     828:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     82a:	8d 85       	ldd	r24, Y+13	; 0x0d
     82c:	9e 85       	ldd	r25, Y+14	; 0x0e
     82e:	01 97       	sbiw	r24, 0x01	; 1
     830:	9e 87       	std	Y+14, r25	; 0x0e
     832:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     834:	8d 85       	ldd	r24, Y+13	; 0x0d
     836:	9e 85       	ldd	r25, Y+14	; 0x0e
     838:	89 2b       	or	r24, r25
     83a:	69 f7       	brne	.-38     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
    _delay_ms(1.52);
  else
    _delay_us(37);
#endif
}
     83c:	04 c1       	rjmp	.+520    	; 0xa46 <__stack+0x147>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     83e:	69 85       	ldd	r22, Y+9	; 0x09
     840:	7a 85       	ldd	r23, Y+10	; 0x0a
     842:	8b 85       	ldd	r24, Y+11	; 0x0b
     844:	9c 85       	ldd	r25, Y+12	; 0x0c
     846:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <__fixunssfsi>
     84a:	dc 01       	movw	r26, r24
     84c:	cb 01       	movw	r24, r22
     84e:	9e 87       	std	Y+14, r25	; 0x0e
     850:	8d 87       	std	Y+13, r24	; 0x0d
     852:	8d 85       	ldd	r24, Y+13	; 0x0d
     854:	9e 85       	ldd	r25, Y+14	; 0x0e
     856:	9a 8b       	std	Y+18, r25	; 0x12
     858:	89 8b       	std	Y+17, r24	; 0x11
     85a:	89 89       	ldd	r24, Y+17	; 0x11
     85c:	9a 89       	ldd	r25, Y+18	; 0x12
     85e:	01 97       	sbiw	r24, 0x01	; 1
     860:	f1 f7       	brne	.-4      	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
     862:	9a 8b       	std	Y+18, r25	; 0x12
     864:	89 8b       	std	Y+17, r24	; 0x11
     866:	ef c0       	rjmp	.+478    	; 0xa46 <__stack+0x147>
     868:	80 e0       	ldi	r24, 0x00	; 0
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	a4 e1       	ldi	r26, 0x14	; 20
     86e:	b2 e4       	ldi	r27, 0x42	; 66
     870:	89 83       	std	Y+1, r24	; 0x01
     872:	9a 83       	std	Y+2, r25	; 0x02
     874:	ab 83       	std	Y+3, r26	; 0x03
     876:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     878:	2b ea       	ldi	r18, 0xAB	; 171
     87a:	3a ea       	ldi	r19, 0xAA	; 170
     87c:	4a ea       	ldi	r20, 0xAA	; 170
     87e:	50 e4       	ldi	r21, 0x40	; 64
     880:	69 81       	ldd	r22, Y+1	; 0x01
     882:	7a 81       	ldd	r23, Y+2	; 0x02
     884:	8b 81       	ldd	r24, Y+3	; 0x03
     886:	9c 81       	ldd	r25, Y+4	; 0x04
     888:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__mulsf3>
     88c:	dc 01       	movw	r26, r24
     88e:	cb 01       	movw	r24, r22
     890:	8b 8b       	std	Y+19, r24	; 0x13
     892:	9c 8b       	std	Y+20, r25	; 0x14
     894:	ad 8b       	std	Y+21, r26	; 0x15
     896:	be 8b       	std	Y+22, r27	; 0x16
	__tmp2 = ((F_CPU) / 4e6) * __us;
     898:	20 e0       	ldi	r18, 0x00	; 0
     89a:	30 e0       	ldi	r19, 0x00	; 0
     89c:	40 e8       	ldi	r20, 0x80	; 128
     89e:	50 e4       	ldi	r21, 0x40	; 64
     8a0:	69 81       	ldd	r22, Y+1	; 0x01
     8a2:	7a 81       	ldd	r23, Y+2	; 0x02
     8a4:	8b 81       	ldd	r24, Y+3	; 0x03
     8a6:	9c 81       	ldd	r25, Y+4	; 0x04
     8a8:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__mulsf3>
     8ac:	dc 01       	movw	r26, r24
     8ae:	cb 01       	movw	r24, r22
     8b0:	8f 8b       	std	Y+23, r24	; 0x17
     8b2:	98 8f       	std	Y+24, r25	; 0x18
     8b4:	a9 8f       	std	Y+25, r26	; 0x19
     8b6:	ba 8f       	std	Y+26, r27	; 0x1a
	if (__tmp < 1.0)
     8b8:	20 e0       	ldi	r18, 0x00	; 0
     8ba:	30 e0       	ldi	r19, 0x00	; 0
     8bc:	40 e8       	ldi	r20, 0x80	; 128
     8be:	5f e3       	ldi	r21, 0x3F	; 63
     8c0:	6b 89       	ldd	r22, Y+19	; 0x13
     8c2:	7c 89       	ldd	r23, Y+20	; 0x14
     8c4:	8d 89       	ldd	r24, Y+21	; 0x15
     8c6:	9e 89       	ldd	r25, Y+22	; 0x16
     8c8:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__cmpsf2>
     8cc:	88 23       	and	r24, r24
     8ce:	1c f4       	brge	.+6      	; 0x8d6 <__DATA_REGION_LENGTH__+0xd6>
		__ticks = 1;
     8d0:	81 e0       	ldi	r24, 0x01	; 1
     8d2:	8b 8f       	std	Y+27, r24	; 0x1b
     8d4:	b2 c0       	rjmp	.+356    	; 0xa3a <__stack+0x13b>
	else if (__tmp2 > 65535)
     8d6:	20 e0       	ldi	r18, 0x00	; 0
     8d8:	3f ef       	ldi	r19, 0xFF	; 255
     8da:	4f e7       	ldi	r20, 0x7F	; 127
     8dc:	57 e4       	ldi	r21, 0x47	; 71
     8de:	6f 89       	ldd	r22, Y+23	; 0x17
     8e0:	78 8d       	ldd	r23, Y+24	; 0x18
     8e2:	89 8d       	ldd	r24, Y+25	; 0x19
     8e4:	9a 8d       	ldd	r25, Y+26	; 0x1a
     8e6:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__gesf2>
     8ea:	18 16       	cp	r1, r24
     8ec:	0c f0       	brlt	.+2      	; 0x8f0 <__DATA_REGION_LENGTH__+0xf0>
     8ee:	7b c0       	rjmp	.+246    	; 0x9e6 <__stack+0xe7>
	{
		_delay_ms(__us / 1000.0);
     8f0:	20 e0       	ldi	r18, 0x00	; 0
     8f2:	30 e0       	ldi	r19, 0x00	; 0
     8f4:	4a e7       	ldi	r20, 0x7A	; 122
     8f6:	54 e4       	ldi	r21, 0x44	; 68
     8f8:	69 81       	ldd	r22, Y+1	; 0x01
     8fa:	7a 81       	ldd	r23, Y+2	; 0x02
     8fc:	8b 81       	ldd	r24, Y+3	; 0x03
     8fe:	9c 81       	ldd	r25, Y+4	; 0x04
     900:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <__divsf3>
     904:	dc 01       	movw	r26, r24
     906:	cb 01       	movw	r24, r22
     908:	8c 8f       	std	Y+28, r24	; 0x1c
     90a:	9d 8f       	std	Y+29, r25	; 0x1d
     90c:	ae 8f       	std	Y+30, r26	; 0x1e
     90e:	bf 8f       	std	Y+31, r27	; 0x1f

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     910:	20 e0       	ldi	r18, 0x00	; 0
     912:	30 e0       	ldi	r19, 0x00	; 0
     914:	4a e7       	ldi	r20, 0x7A	; 122
     916:	55 e4       	ldi	r21, 0x45	; 69
     918:	6c 8d       	ldd	r22, Y+28	; 0x1c
     91a:	7d 8d       	ldd	r23, Y+29	; 0x1d
     91c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     91e:	9f 8d       	ldd	r25, Y+31	; 0x1f
     920:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__mulsf3>
     924:	dc 01       	movw	r26, r24
     926:	cb 01       	movw	r24, r22
     928:	88 a3       	std	Y+32, r24	; 0x20
     92a:	99 a3       	std	Y+33, r25	; 0x21
     92c:	aa a3       	std	Y+34, r26	; 0x22
     92e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
     930:	20 e0       	ldi	r18, 0x00	; 0
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	40 e8       	ldi	r20, 0x80	; 128
     936:	5f e3       	ldi	r21, 0x3F	; 63
     938:	68 a1       	ldd	r22, Y+32	; 0x20
     93a:	79 a1       	ldd	r23, Y+33	; 0x21
     93c:	8a a1       	ldd	r24, Y+34	; 0x22
     93e:	9b a1       	ldd	r25, Y+35	; 0x23
     940:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__cmpsf2>
     944:	88 23       	and	r24, r24
     946:	2c f4       	brge	.+10     	; 0x952 <__stack+0x53>
		__ticks = 1;
     948:	81 e0       	ldi	r24, 0x01	; 1
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	9d a3       	std	Y+37, r25	; 0x25
     94e:	8c a3       	std	Y+36, r24	; 0x24
     950:	3f c0       	rjmp	.+126    	; 0x9d0 <__stack+0xd1>
	else if (__tmp > 65535)
     952:	20 e0       	ldi	r18, 0x00	; 0
     954:	3f ef       	ldi	r19, 0xFF	; 255
     956:	4f e7       	ldi	r20, 0x7F	; 127
     958:	57 e4       	ldi	r21, 0x47	; 71
     95a:	68 a1       	ldd	r22, Y+32	; 0x20
     95c:	79 a1       	ldd	r23, Y+33	; 0x21
     95e:	8a a1       	ldd	r24, Y+34	; 0x22
     960:	9b a1       	ldd	r25, Y+35	; 0x23
     962:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__gesf2>
     966:	18 16       	cp	r1, r24
     968:	4c f5       	brge	.+82     	; 0x9bc <__stack+0xbd>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     96a:	20 e0       	ldi	r18, 0x00	; 0
     96c:	30 e0       	ldi	r19, 0x00	; 0
     96e:	40 e2       	ldi	r20, 0x20	; 32
     970:	51 e4       	ldi	r21, 0x41	; 65
     972:	6c 8d       	ldd	r22, Y+28	; 0x1c
     974:	7d 8d       	ldd	r23, Y+29	; 0x1d
     976:	8e 8d       	ldd	r24, Y+30	; 0x1e
     978:	9f 8d       	ldd	r25, Y+31	; 0x1f
     97a:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__mulsf3>
     97e:	dc 01       	movw	r26, r24
     980:	cb 01       	movw	r24, r22
     982:	bc 01       	movw	r22, r24
     984:	cd 01       	movw	r24, r26
     986:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <__fixunssfsi>
     98a:	dc 01       	movw	r26, r24
     98c:	cb 01       	movw	r24, r22
     98e:	9d a3       	std	Y+37, r25	; 0x25
     990:	8c a3       	std	Y+36, r24	; 0x24
     992:	0f c0       	rjmp	.+30     	; 0x9b2 <__stack+0xb3>
     994:	80 e9       	ldi	r24, 0x90	; 144
     996:	91 e0       	ldi	r25, 0x01	; 1
     998:	9f a3       	std	Y+39, r25	; 0x27
     99a:	8e a3       	std	Y+38, r24	; 0x26
     99c:	8e a1       	ldd	r24, Y+38	; 0x26
     99e:	9f a1       	ldd	r25, Y+39	; 0x27
     9a0:	01 97       	sbiw	r24, 0x01	; 1
     9a2:	f1 f7       	brne	.-4      	; 0x9a0 <__stack+0xa1>
     9a4:	9f a3       	std	Y+39, r25	; 0x27
     9a6:	8e a3       	std	Y+38, r24	; 0x26
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9a8:	8c a1       	ldd	r24, Y+36	; 0x24
     9aa:	9d a1       	ldd	r25, Y+37	; 0x25
     9ac:	01 97       	sbiw	r24, 0x01	; 1
     9ae:	9d a3       	std	Y+37, r25	; 0x25
     9b0:	8c a3       	std	Y+36, r24	; 0x24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9b2:	8c a1       	ldd	r24, Y+36	; 0x24
     9b4:	9d a1       	ldd	r25, Y+37	; 0x25
     9b6:	89 2b       	or	r24, r25
     9b8:	69 f7       	brne	.-38     	; 0x994 <__stack+0x95>
     9ba:	3f c0       	rjmp	.+126    	; 0xa3a <__stack+0x13b>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9bc:	68 a1       	ldd	r22, Y+32	; 0x20
     9be:	79 a1       	ldd	r23, Y+33	; 0x21
     9c0:	8a a1       	ldd	r24, Y+34	; 0x22
     9c2:	9b a1       	ldd	r25, Y+35	; 0x23
     9c4:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <__fixunssfsi>
     9c8:	dc 01       	movw	r26, r24
     9ca:	cb 01       	movw	r24, r22
     9cc:	9d a3       	std	Y+37, r25	; 0x25
     9ce:	8c a3       	std	Y+36, r24	; 0x24
     9d0:	8c a1       	ldd	r24, Y+36	; 0x24
     9d2:	9d a1       	ldd	r25, Y+37	; 0x25
     9d4:	99 a7       	std	Y+41, r25	; 0x29
     9d6:	88 a7       	std	Y+40, r24	; 0x28
     9d8:	88 a5       	ldd	r24, Y+40	; 0x28
     9da:	99 a5       	ldd	r25, Y+41	; 0x29
     9dc:	01 97       	sbiw	r24, 0x01	; 1
     9de:	f1 f7       	brne	.-4      	; 0x9dc <__stack+0xdd>
     9e0:	99 a7       	std	Y+41, r25	; 0x29
     9e2:	88 a7       	std	Y+40, r24	; 0x28
     9e4:	2a c0       	rjmp	.+84     	; 0xa3a <__stack+0x13b>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	4f e7       	ldi	r20, 0x7F	; 127
     9ec:	53 e4       	ldi	r21, 0x43	; 67
     9ee:	6b 89       	ldd	r22, Y+19	; 0x13
     9f0:	7c 89       	ldd	r23, Y+20	; 0x14
     9f2:	8d 89       	ldd	r24, Y+21	; 0x15
     9f4:	9e 89       	ldd	r25, Y+22	; 0x16
     9f6:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__gesf2>
     9fa:	18 16       	cp	r1, r24
     9fc:	ac f4       	brge	.+42     	; 0xa28 <__stack+0x129>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     9fe:	6f 89       	ldd	r22, Y+23	; 0x17
     a00:	78 8d       	ldd	r23, Y+24	; 0x18
     a02:	89 8d       	ldd	r24, Y+25	; 0x19
     a04:	9a 8d       	ldd	r25, Y+26	; 0x1a
     a06:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <__fixunssfsi>
     a0a:	dc 01       	movw	r26, r24
     a0c:	cb 01       	movw	r24, r22
     a0e:	9b a7       	std	Y+43, r25	; 0x2b
     a10:	8a a7       	std	Y+42, r24	; 0x2a
     a12:	8a a5       	ldd	r24, Y+42	; 0x2a
     a14:	9b a5       	ldd	r25, Y+43	; 0x2b
     a16:	9d a7       	std	Y+45, r25	; 0x2d
     a18:	8c a7       	std	Y+44, r24	; 0x2c
     a1a:	8c a5       	ldd	r24, Y+44	; 0x2c
     a1c:	9d a5       	ldd	r25, Y+45	; 0x2d
     a1e:	01 97       	sbiw	r24, 0x01	; 1
     a20:	f1 f7       	brne	.-4      	; 0xa1e <__stack+0x11f>
     a22:	9d a7       	std	Y+45, r25	; 0x2d
     a24:	8c a7       	std	Y+44, r24	; 0x2c
     a26:	0f c0       	rjmp	.+30     	; 0xa46 <__stack+0x147>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     a28:	6b 89       	ldd	r22, Y+19	; 0x13
     a2a:	7c 89       	ldd	r23, Y+20	; 0x14
     a2c:	8d 89       	ldd	r24, Y+21	; 0x15
     a2e:	9e 89       	ldd	r25, Y+22	; 0x16
     a30:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <__fixunssfsi>
     a34:	dc 01       	movw	r26, r24
     a36:	cb 01       	movw	r24, r22
     a38:	8b 8f       	std	Y+27, r24	; 0x1b
     a3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     a3c:	8e a7       	std	Y+46, r24	; 0x2e
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     a3e:	8e a5       	ldd	r24, Y+46	; 0x2e
     a40:	8a 95       	dec	r24
     a42:	f1 f7       	brne	.-4      	; 0xa40 <__stack+0x141>
     a44:	8e a7       	std	Y+46, r24	; 0x2e
     a46:	00 00       	nop
     a48:	af 96       	adiw	r28, 0x2f	; 47
     a4a:	0f b6       	in	r0, 0x3f	; 63
     a4c:	f8 94       	cli
     a4e:	de bf       	out	0x3e, r29	; 62
     a50:	0f be       	out	0x3f, r0	; 63
     a52:	cd bf       	out	0x3d, r28	; 61
     a54:	df 91       	pop	r29
     a56:	cf 91       	pop	r28
     a58:	08 95       	ret

00000a5a <hd44780_init>:
 * This is the only area where timed waits are really needed as
 * the busy flag cannot be probed initially.
 */
void
hd44780_init(void)
{
     a5a:	0f 93       	push	r16
     a5c:	1f 93       	push	r17
     a5e:	cf 93       	push	r28
     a60:	df 93       	push	r29
     a62:	cd b7       	in	r28, 0x3d	; 61
     a64:	de b7       	in	r29, 0x3e	; 62
     a66:	ca 54       	subi	r28, 0x4A	; 74
     a68:	d1 09       	sbc	r29, r1
     a6a:	0f b6       	in	r0, 0x3f	; 63
     a6c:	f8 94       	cli
     a6e:	de bf       	out	0x3e, r29	; 62
     a70:	0f be       	out	0x3f, r0	; 63
     a72:	cd bf       	out	0x3d, r28	; 61
  SET(DDR, HD44780_RS);
     a74:	84 e2       	ldi	r24, 0x24	; 36
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	24 e2       	ldi	r18, 0x24	; 36
     a7a:	30 e0       	ldi	r19, 0x00	; 0
     a7c:	f9 01       	movw	r30, r18
     a7e:	20 81       	ld	r18, Z
     a80:	20 62       	ori	r18, 0x20	; 32
     a82:	fc 01       	movw	r30, r24
     a84:	20 83       	st	Z, r18
  SET(DDR, HD44780_RW);
     a86:	84 e2       	ldi	r24, 0x24	; 36
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	24 e2       	ldi	r18, 0x24	; 36
     a8c:	30 e0       	ldi	r19, 0x00	; 0
     a8e:	f9 01       	movw	r30, r18
     a90:	20 81       	ld	r18, Z
     a92:	20 61       	ori	r18, 0x10	; 16
     a94:	fc 01       	movw	r30, r24
     a96:	20 83       	st	Z, r18
  SET(DDR, HD44780_E);
     a98:	84 e2       	ldi	r24, 0x24	; 36
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	24 e2       	ldi	r18, 0x24	; 36
     a9e:	30 e0       	ldi	r19, 0x00	; 0
     aa0:	f9 01       	movw	r30, r18
     aa2:	20 81       	ld	r18, Z
     aa4:	28 60       	ori	r18, 0x08	; 8
     aa6:	fc 01       	movw	r30, r24
     aa8:	20 83       	st	Z, r18
  ASSIGN(DDR, HD44780_D4, 0x0F);
     aaa:	87 e2       	ldi	r24, 0x27	; 39
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	27 e2       	ldi	r18, 0x27	; 39
     ab0:	30 e0       	ldi	r19, 0x00	; 0
     ab2:	f9 01       	movw	r30, r18
     ab4:	20 81       	ld	r18, Z
     ab6:	2f 60       	ori	r18, 0x0F	; 15
     ab8:	fc 01       	movw	r30, r24
     aba:	20 83       	st	Z, r18
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	a0 e7       	ldi	r26, 0x70	; 112
     ac2:	b1 e4       	ldi	r27, 0x41	; 65
     ac4:	89 83       	std	Y+1, r24	; 0x01
     ac6:	9a 83       	std	Y+2, r25	; 0x02
     ac8:	ab 83       	std	Y+3, r26	; 0x03
     aca:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     acc:	8e 01       	movw	r16, r28
     ace:	0f 5b       	subi	r16, 0xBF	; 191
     ad0:	1f 4f       	sbci	r17, 0xFF	; 255
     ad2:	20 e0       	ldi	r18, 0x00	; 0
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	4a e7       	ldi	r20, 0x7A	; 122
     ad8:	55 e4       	ldi	r21, 0x45	; 69
     ada:	69 81       	ldd	r22, Y+1	; 0x01
     adc:	7a 81       	ldd	r23, Y+2	; 0x02
     ade:	8b 81       	ldd	r24, Y+3	; 0x03
     ae0:	9c 81       	ldd	r25, Y+4	; 0x04
     ae2:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__mulsf3>
     ae6:	dc 01       	movw	r26, r24
     ae8:	cb 01       	movw	r24, r22
     aea:	f8 01       	movw	r30, r16
     aec:	80 83       	st	Z, r24
     aee:	91 83       	std	Z+1, r25	; 0x01
     af0:	a2 83       	std	Z+2, r26	; 0x02
     af2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     af4:	ce 01       	movw	r24, r28
     af6:	8f 5b       	subi	r24, 0xBF	; 191
     af8:	9f 4f       	sbci	r25, 0xFF	; 255
     afa:	20 e0       	ldi	r18, 0x00	; 0
     afc:	30 e0       	ldi	r19, 0x00	; 0
     afe:	40 e8       	ldi	r20, 0x80	; 128
     b00:	5f e3       	ldi	r21, 0x3F	; 63
     b02:	fc 01       	movw	r30, r24
     b04:	60 81       	ld	r22, Z
     b06:	71 81       	ldd	r23, Z+1	; 0x01
     b08:	82 81       	ldd	r24, Z+2	; 0x02
     b0a:	93 81       	ldd	r25, Z+3	; 0x03
     b0c:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__cmpsf2>
     b10:	88 23       	and	r24, r24
     b12:	4c f4       	brge	.+18     	; 0xb26 <hd44780_init+0xcc>
		__ticks = 1;
     b14:	ce 01       	movw	r24, r28
     b16:	8b 5b       	subi	r24, 0xBB	; 187
     b18:	9f 4f       	sbci	r25, 0xFF	; 255
     b1a:	21 e0       	ldi	r18, 0x01	; 1
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	fc 01       	movw	r30, r24
     b20:	31 83       	std	Z+1, r19	; 0x01
     b22:	20 83       	st	Z, r18
     b24:	69 c0       	rjmp	.+210    	; 0xbf8 <hd44780_init+0x19e>
	else if (__tmp > 65535)
     b26:	ce 01       	movw	r24, r28
     b28:	8f 5b       	subi	r24, 0xBF	; 191
     b2a:	9f 4f       	sbci	r25, 0xFF	; 255
     b2c:	20 e0       	ldi	r18, 0x00	; 0
     b2e:	3f ef       	ldi	r19, 0xFF	; 255
     b30:	4f e7       	ldi	r20, 0x7F	; 127
     b32:	57 e4       	ldi	r21, 0x47	; 71
     b34:	fc 01       	movw	r30, r24
     b36:	60 81       	ld	r22, Z
     b38:	71 81       	ldd	r23, Z+1	; 0x01
     b3a:	82 81       	ldd	r24, Z+2	; 0x02
     b3c:	93 81       	ldd	r25, Z+3	; 0x03
     b3e:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__gesf2>
     b42:	18 16       	cp	r1, r24
     b44:	0c f0       	brlt	.+2      	; 0xb48 <hd44780_init+0xee>
     b46:	46 c0       	rjmp	.+140    	; 0xbd4 <hd44780_init+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b48:	20 e0       	ldi	r18, 0x00	; 0
     b4a:	30 e0       	ldi	r19, 0x00	; 0
     b4c:	40 e2       	ldi	r20, 0x20	; 32
     b4e:	51 e4       	ldi	r21, 0x41	; 65
     b50:	69 81       	ldd	r22, Y+1	; 0x01
     b52:	7a 81       	ldd	r23, Y+2	; 0x02
     b54:	8b 81       	ldd	r24, Y+3	; 0x03
     b56:	9c 81       	ldd	r25, Y+4	; 0x04
     b58:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__mulsf3>
     b5c:	dc 01       	movw	r26, r24
     b5e:	cb 01       	movw	r24, r22
     b60:	8e 01       	movw	r16, r28
     b62:	0b 5b       	subi	r16, 0xBB	; 187
     b64:	1f 4f       	sbci	r17, 0xFF	; 255
     b66:	bc 01       	movw	r22, r24
     b68:	cd 01       	movw	r24, r26
     b6a:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <__fixunssfsi>
     b6e:	dc 01       	movw	r26, r24
     b70:	cb 01       	movw	r24, r22
     b72:	f8 01       	movw	r30, r16
     b74:	91 83       	std	Z+1, r25	; 0x01
     b76:	80 83       	st	Z, r24
     b78:	24 c0       	rjmp	.+72     	; 0xbc2 <hd44780_init+0x168>
     b7a:	ce 01       	movw	r24, r28
     b7c:	89 5b       	subi	r24, 0xB9	; 185
     b7e:	9f 4f       	sbci	r25, 0xFF	; 255
     b80:	20 e9       	ldi	r18, 0x90	; 144
     b82:	31 e0       	ldi	r19, 0x01	; 1
     b84:	fc 01       	movw	r30, r24
     b86:	31 83       	std	Z+1, r19	; 0x01
     b88:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     b8a:	ce 01       	movw	r24, r28
     b8c:	89 5b       	subi	r24, 0xB9	; 185
     b8e:	9f 4f       	sbci	r25, 0xFF	; 255
     b90:	fc 01       	movw	r30, r24
     b92:	80 81       	ld	r24, Z
     b94:	91 81       	ldd	r25, Z+1	; 0x01
     b96:	01 97       	sbiw	r24, 0x01	; 1
     b98:	f1 f7       	brne	.-4      	; 0xb96 <hd44780_init+0x13c>
     b9a:	9e 01       	movw	r18, r28
     b9c:	29 5b       	subi	r18, 0xB9	; 185
     b9e:	3f 4f       	sbci	r19, 0xFF	; 255
     ba0:	f9 01       	movw	r30, r18
     ba2:	91 83       	std	Z+1, r25	; 0x01
     ba4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ba6:	ce 01       	movw	r24, r28
     ba8:	8b 5b       	subi	r24, 0xBB	; 187
     baa:	9f 4f       	sbci	r25, 0xFF	; 255
     bac:	9e 01       	movw	r18, r28
     bae:	2b 5b       	subi	r18, 0xBB	; 187
     bb0:	3f 4f       	sbci	r19, 0xFF	; 255
     bb2:	f9 01       	movw	r30, r18
     bb4:	20 81       	ld	r18, Z
     bb6:	31 81       	ldd	r19, Z+1	; 0x01
     bb8:	21 50       	subi	r18, 0x01	; 1
     bba:	31 09       	sbc	r19, r1
     bbc:	fc 01       	movw	r30, r24
     bbe:	31 83       	std	Z+1, r19	; 0x01
     bc0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bc2:	ce 01       	movw	r24, r28
     bc4:	8b 5b       	subi	r24, 0xBB	; 187
     bc6:	9f 4f       	sbci	r25, 0xFF	; 255
     bc8:	fc 01       	movw	r30, r24
     bca:	80 81       	ld	r24, Z
     bcc:	91 81       	ldd	r25, Z+1	; 0x01
     bce:	89 2b       	or	r24, r25
     bd0:	a1 f6       	brne	.-88     	; 0xb7a <hd44780_init+0x120>
     bd2:	2c c0       	rjmp	.+88     	; 0xc2c <hd44780_init+0x1d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bd4:	8e 01       	movw	r16, r28
     bd6:	0b 5b       	subi	r16, 0xBB	; 187
     bd8:	1f 4f       	sbci	r17, 0xFF	; 255
     bda:	ce 01       	movw	r24, r28
     bdc:	8f 5b       	subi	r24, 0xBF	; 191
     bde:	9f 4f       	sbci	r25, 0xFF	; 255
     be0:	fc 01       	movw	r30, r24
     be2:	60 81       	ld	r22, Z
     be4:	71 81       	ldd	r23, Z+1	; 0x01
     be6:	82 81       	ldd	r24, Z+2	; 0x02
     be8:	93 81       	ldd	r25, Z+3	; 0x03
     bea:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <__fixunssfsi>
     bee:	dc 01       	movw	r26, r24
     bf0:	cb 01       	movw	r24, r22
     bf2:	f8 01       	movw	r30, r16
     bf4:	91 83       	std	Z+1, r25	; 0x01
     bf6:	80 83       	st	Z, r24
     bf8:	ce 01       	movw	r24, r28
     bfa:	87 5b       	subi	r24, 0xB7	; 183
     bfc:	9f 4f       	sbci	r25, 0xFF	; 255
     bfe:	9e 01       	movw	r18, r28
     c00:	2b 5b       	subi	r18, 0xBB	; 187
     c02:	3f 4f       	sbci	r19, 0xFF	; 255
     c04:	f9 01       	movw	r30, r18
     c06:	20 81       	ld	r18, Z
     c08:	31 81       	ldd	r19, Z+1	; 0x01
     c0a:	fc 01       	movw	r30, r24
     c0c:	31 83       	std	Z+1, r19	; 0x01
     c0e:	20 83       	st	Z, r18
     c10:	ce 01       	movw	r24, r28
     c12:	87 5b       	subi	r24, 0xB7	; 183
     c14:	9f 4f       	sbci	r25, 0xFF	; 255
     c16:	fc 01       	movw	r30, r24
     c18:	80 81       	ld	r24, Z
     c1a:	91 81       	ldd	r25, Z+1	; 0x01
     c1c:	01 97       	sbiw	r24, 0x01	; 1
     c1e:	f1 f7       	brne	.-4      	; 0xc1c <hd44780_init+0x1c2>
     c20:	9e 01       	movw	r18, r28
     c22:	27 5b       	subi	r18, 0xB7	; 183
     c24:	3f 4f       	sbci	r19, 0xFF	; 255
     c26:	f9 01       	movw	r30, r18
     c28:	91 83       	std	Z+1, r25	; 0x01
     c2a:	80 83       	st	Z, r24

  _delay_ms(15);		/* 40 ms needed for Vcc = 2.7 V */
  hd44780_outnibble(HD44780_FNSET(1, 0, 0) >> 4, 0);
     c2c:	60 e0       	ldi	r22, 0x00	; 0
     c2e:	83 e0       	ldi	r24, 0x03	; 3
     c30:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <hd44780_outnibble>
     c34:	83 e3       	ldi	r24, 0x33	; 51
     c36:	93 e3       	ldi	r25, 0x33	; 51
     c38:	a3 e8       	ldi	r26, 0x83	; 131
     c3a:	b0 e4       	ldi	r27, 0x40	; 64
     c3c:	8d 83       	std	Y+5, r24	; 0x05
     c3e:	9e 83       	std	Y+6, r25	; 0x06
     c40:	af 83       	std	Y+7, r26	; 0x07
     c42:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     c44:	20 e0       	ldi	r18, 0x00	; 0
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	4a e7       	ldi	r20, 0x7A	; 122
     c4a:	55 e4       	ldi	r21, 0x45	; 69
     c4c:	6d 81       	ldd	r22, Y+5	; 0x05
     c4e:	7e 81       	ldd	r23, Y+6	; 0x06
     c50:	8f 81       	ldd	r24, Y+7	; 0x07
     c52:	98 85       	ldd	r25, Y+8	; 0x08
     c54:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__mulsf3>
     c58:	dc 01       	movw	r26, r24
     c5a:	cb 01       	movw	r24, r22
     c5c:	8f ab       	std	Y+55, r24	; 0x37
     c5e:	98 af       	std	Y+56, r25	; 0x38
     c60:	a9 af       	std	Y+57, r26	; 0x39
     c62:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
     c64:	20 e0       	ldi	r18, 0x00	; 0
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	40 e8       	ldi	r20, 0x80	; 128
     c6a:	5f e3       	ldi	r21, 0x3F	; 63
     c6c:	6f a9       	ldd	r22, Y+55	; 0x37
     c6e:	78 ad       	ldd	r23, Y+56	; 0x38
     c70:	89 ad       	ldd	r24, Y+57	; 0x39
     c72:	9a ad       	ldd	r25, Y+58	; 0x3a
     c74:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__cmpsf2>
     c78:	88 23       	and	r24, r24
     c7a:	2c f4       	brge	.+10     	; 0xc86 <hd44780_init+0x22c>
		__ticks = 1;
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	9c af       	std	Y+60, r25	; 0x3c
     c82:	8b af       	std	Y+59, r24	; 0x3b
     c84:	3f c0       	rjmp	.+126    	; 0xd04 <hd44780_init+0x2aa>
	else if (__tmp > 65535)
     c86:	20 e0       	ldi	r18, 0x00	; 0
     c88:	3f ef       	ldi	r19, 0xFF	; 255
     c8a:	4f e7       	ldi	r20, 0x7F	; 127
     c8c:	57 e4       	ldi	r21, 0x47	; 71
     c8e:	6f a9       	ldd	r22, Y+55	; 0x37
     c90:	78 ad       	ldd	r23, Y+56	; 0x38
     c92:	89 ad       	ldd	r24, Y+57	; 0x39
     c94:	9a ad       	ldd	r25, Y+58	; 0x3a
     c96:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__gesf2>
     c9a:	18 16       	cp	r1, r24
     c9c:	4c f5       	brge	.+82     	; 0xcf0 <hd44780_init+0x296>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c9e:	20 e0       	ldi	r18, 0x00	; 0
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	40 e2       	ldi	r20, 0x20	; 32
     ca4:	51 e4       	ldi	r21, 0x41	; 65
     ca6:	6d 81       	ldd	r22, Y+5	; 0x05
     ca8:	7e 81       	ldd	r23, Y+6	; 0x06
     caa:	8f 81       	ldd	r24, Y+7	; 0x07
     cac:	98 85       	ldd	r25, Y+8	; 0x08
     cae:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__mulsf3>
     cb2:	dc 01       	movw	r26, r24
     cb4:	cb 01       	movw	r24, r22
     cb6:	bc 01       	movw	r22, r24
     cb8:	cd 01       	movw	r24, r26
     cba:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <__fixunssfsi>
     cbe:	dc 01       	movw	r26, r24
     cc0:	cb 01       	movw	r24, r22
     cc2:	9c af       	std	Y+60, r25	; 0x3c
     cc4:	8b af       	std	Y+59, r24	; 0x3b
     cc6:	0f c0       	rjmp	.+30     	; 0xce6 <hd44780_init+0x28c>
     cc8:	80 e9       	ldi	r24, 0x90	; 144
     cca:	91 e0       	ldi	r25, 0x01	; 1
     ccc:	9e af       	std	Y+62, r25	; 0x3e
     cce:	8d af       	std	Y+61, r24	; 0x3d
     cd0:	8d ad       	ldd	r24, Y+61	; 0x3d
     cd2:	9e ad       	ldd	r25, Y+62	; 0x3e
     cd4:	01 97       	sbiw	r24, 0x01	; 1
     cd6:	f1 f7       	brne	.-4      	; 0xcd4 <hd44780_init+0x27a>
     cd8:	9e af       	std	Y+62, r25	; 0x3e
     cda:	8d af       	std	Y+61, r24	; 0x3d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cdc:	8b ad       	ldd	r24, Y+59	; 0x3b
     cde:	9c ad       	ldd	r25, Y+60	; 0x3c
     ce0:	01 97       	sbiw	r24, 0x01	; 1
     ce2:	9c af       	std	Y+60, r25	; 0x3c
     ce4:	8b af       	std	Y+59, r24	; 0x3b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ce6:	8b ad       	ldd	r24, Y+59	; 0x3b
     ce8:	9c ad       	ldd	r25, Y+60	; 0x3c
     cea:	89 2b       	or	r24, r25
     cec:	69 f7       	brne	.-38     	; 0xcc8 <hd44780_init+0x26e>
     cee:	1e c0       	rjmp	.+60     	; 0xd2c <hd44780_init+0x2d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cf0:	6f a9       	ldd	r22, Y+55	; 0x37
     cf2:	78 ad       	ldd	r23, Y+56	; 0x38
     cf4:	89 ad       	ldd	r24, Y+57	; 0x39
     cf6:	9a ad       	ldd	r25, Y+58	; 0x3a
     cf8:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <__fixunssfsi>
     cfc:	dc 01       	movw	r26, r24
     cfe:	cb 01       	movw	r24, r22
     d00:	9c af       	std	Y+60, r25	; 0x3c
     d02:	8b af       	std	Y+59, r24	; 0x3b
     d04:	2b ad       	ldd	r18, Y+59	; 0x3b
     d06:	3c ad       	ldd	r19, Y+60	; 0x3c
     d08:	ce 01       	movw	r24, r28
     d0a:	cf 96       	adiw	r24, 0x3f	; 63
     d0c:	fc 01       	movw	r30, r24
     d0e:	31 83       	std	Z+1, r19	; 0x01
     d10:	20 83       	st	Z, r18
     d12:	ce 01       	movw	r24, r28
     d14:	cf 96       	adiw	r24, 0x3f	; 63
     d16:	fc 01       	movw	r30, r24
     d18:	80 81       	ld	r24, Z
     d1a:	91 81       	ldd	r25, Z+1	; 0x01
     d1c:	01 97       	sbiw	r24, 0x01	; 1
     d1e:	f1 f7       	brne	.-4      	; 0xd1c <hd44780_init+0x2c2>
     d20:	9e 01       	movw	r18, r28
     d22:	21 5c       	subi	r18, 0xC1	; 193
     d24:	3f 4f       	sbci	r19, 0xFF	; 255
     d26:	f9 01       	movw	r30, r18
     d28:	91 83       	std	Z+1, r25	; 0x01
     d2a:	80 83       	st	Z, r24
  _delay_ms(4.1);
  hd44780_outnibble(HD44780_FNSET(1, 0, 0) >> 4, 0);
     d2c:	60 e0       	ldi	r22, 0x00	; 0
     d2e:	83 e0       	ldi	r24, 0x03	; 3
     d30:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <hd44780_outnibble>
     d34:	8d ec       	ldi	r24, 0xCD	; 205
     d36:	9c ec       	ldi	r25, 0xCC	; 204
     d38:	ac ec       	ldi	r26, 0xCC	; 204
     d3a:	bd e3       	ldi	r27, 0x3D	; 61
     d3c:	89 87       	std	Y+9, r24	; 0x09
     d3e:	9a 87       	std	Y+10, r25	; 0x0a
     d40:	ab 87       	std	Y+11, r26	; 0x0b
     d42:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     d44:	20 e0       	ldi	r18, 0x00	; 0
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	4a e7       	ldi	r20, 0x7A	; 122
     d4a:	55 e4       	ldi	r21, 0x45	; 69
     d4c:	69 85       	ldd	r22, Y+9	; 0x09
     d4e:	7a 85       	ldd	r23, Y+10	; 0x0a
     d50:	8b 85       	ldd	r24, Y+11	; 0x0b
     d52:	9c 85       	ldd	r25, Y+12	; 0x0c
     d54:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__mulsf3>
     d58:	dc 01       	movw	r26, r24
     d5a:	cb 01       	movw	r24, r22
     d5c:	8d a7       	std	Y+45, r24	; 0x2d
     d5e:	9e a7       	std	Y+46, r25	; 0x2e
     d60:	af a7       	std	Y+47, r26	; 0x2f
     d62:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
     d64:	20 e0       	ldi	r18, 0x00	; 0
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	40 e8       	ldi	r20, 0x80	; 128
     d6a:	5f e3       	ldi	r21, 0x3F	; 63
     d6c:	6d a5       	ldd	r22, Y+45	; 0x2d
     d6e:	7e a5       	ldd	r23, Y+46	; 0x2e
     d70:	8f a5       	ldd	r24, Y+47	; 0x2f
     d72:	98 a9       	ldd	r25, Y+48	; 0x30
     d74:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__cmpsf2>
     d78:	88 23       	and	r24, r24
     d7a:	2c f4       	brge	.+10     	; 0xd86 <hd44780_init+0x32c>
		__ticks = 1;
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	9a ab       	std	Y+50, r25	; 0x32
     d82:	89 ab       	std	Y+49, r24	; 0x31
     d84:	3f c0       	rjmp	.+126    	; 0xe04 <hd44780_init+0x3aa>
	else if (__tmp > 65535)
     d86:	20 e0       	ldi	r18, 0x00	; 0
     d88:	3f ef       	ldi	r19, 0xFF	; 255
     d8a:	4f e7       	ldi	r20, 0x7F	; 127
     d8c:	57 e4       	ldi	r21, 0x47	; 71
     d8e:	6d a5       	ldd	r22, Y+45	; 0x2d
     d90:	7e a5       	ldd	r23, Y+46	; 0x2e
     d92:	8f a5       	ldd	r24, Y+47	; 0x2f
     d94:	98 a9       	ldd	r25, Y+48	; 0x30
     d96:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__gesf2>
     d9a:	18 16       	cp	r1, r24
     d9c:	4c f5       	brge	.+82     	; 0xdf0 <hd44780_init+0x396>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d9e:	20 e0       	ldi	r18, 0x00	; 0
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	40 e2       	ldi	r20, 0x20	; 32
     da4:	51 e4       	ldi	r21, 0x41	; 65
     da6:	69 85       	ldd	r22, Y+9	; 0x09
     da8:	7a 85       	ldd	r23, Y+10	; 0x0a
     daa:	8b 85       	ldd	r24, Y+11	; 0x0b
     dac:	9c 85       	ldd	r25, Y+12	; 0x0c
     dae:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__mulsf3>
     db2:	dc 01       	movw	r26, r24
     db4:	cb 01       	movw	r24, r22
     db6:	bc 01       	movw	r22, r24
     db8:	cd 01       	movw	r24, r26
     dba:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <__fixunssfsi>
     dbe:	dc 01       	movw	r26, r24
     dc0:	cb 01       	movw	r24, r22
     dc2:	9a ab       	std	Y+50, r25	; 0x32
     dc4:	89 ab       	std	Y+49, r24	; 0x31
     dc6:	0f c0       	rjmp	.+30     	; 0xde6 <hd44780_init+0x38c>
     dc8:	80 e9       	ldi	r24, 0x90	; 144
     dca:	91 e0       	ldi	r25, 0x01	; 1
     dcc:	9c ab       	std	Y+52, r25	; 0x34
     dce:	8b ab       	std	Y+51, r24	; 0x33
     dd0:	8b a9       	ldd	r24, Y+51	; 0x33
     dd2:	9c a9       	ldd	r25, Y+52	; 0x34
     dd4:	01 97       	sbiw	r24, 0x01	; 1
     dd6:	f1 f7       	brne	.-4      	; 0xdd4 <hd44780_init+0x37a>
     dd8:	9c ab       	std	Y+52, r25	; 0x34
     dda:	8b ab       	std	Y+51, r24	; 0x33
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ddc:	89 a9       	ldd	r24, Y+49	; 0x31
     dde:	9a a9       	ldd	r25, Y+50	; 0x32
     de0:	01 97       	sbiw	r24, 0x01	; 1
     de2:	9a ab       	std	Y+50, r25	; 0x32
     de4:	89 ab       	std	Y+49, r24	; 0x31
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     de6:	89 a9       	ldd	r24, Y+49	; 0x31
     de8:	9a a9       	ldd	r25, Y+50	; 0x32
     dea:	89 2b       	or	r24, r25
     dec:	69 f7       	brne	.-38     	; 0xdc8 <hd44780_init+0x36e>
     dee:	14 c0       	rjmp	.+40     	; 0xe18 <hd44780_init+0x3be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     df0:	6d a5       	ldd	r22, Y+45	; 0x2d
     df2:	7e a5       	ldd	r23, Y+46	; 0x2e
     df4:	8f a5       	ldd	r24, Y+47	; 0x2f
     df6:	98 a9       	ldd	r25, Y+48	; 0x30
     df8:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <__fixunssfsi>
     dfc:	dc 01       	movw	r26, r24
     dfe:	cb 01       	movw	r24, r22
     e00:	9a ab       	std	Y+50, r25	; 0x32
     e02:	89 ab       	std	Y+49, r24	; 0x31
     e04:	89 a9       	ldd	r24, Y+49	; 0x31
     e06:	9a a9       	ldd	r25, Y+50	; 0x32
     e08:	9e ab       	std	Y+54, r25	; 0x36
     e0a:	8d ab       	std	Y+53, r24	; 0x35
     e0c:	8d a9       	ldd	r24, Y+53	; 0x35
     e0e:	9e a9       	ldd	r25, Y+54	; 0x36
     e10:	01 97       	sbiw	r24, 0x01	; 1
     e12:	f1 f7       	brne	.-4      	; 0xe10 <hd44780_init+0x3b6>
     e14:	9e ab       	std	Y+54, r25	; 0x36
     e16:	8d ab       	std	Y+53, r24	; 0x35
  _delay_ms(0.1);
  hd44780_outnibble(HD44780_FNSET(1, 0, 0) >> 4, 0);
     e18:	60 e0       	ldi	r22, 0x00	; 0
     e1a:	83 e0       	ldi	r24, 0x03	; 3
     e1c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <hd44780_outnibble>
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	a4 e1       	ldi	r26, 0x14	; 20
     e26:	b2 e4       	ldi	r27, 0x42	; 66
     e28:	8d 87       	std	Y+13, r24	; 0x0d
     e2a:	9e 87       	std	Y+14, r25	; 0x0e
     e2c:	af 87       	std	Y+15, r26	; 0x0f
     e2e:	b8 8b       	std	Y+16, r27	; 0x10
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     e30:	2b ea       	ldi	r18, 0xAB	; 171
     e32:	3a ea       	ldi	r19, 0xAA	; 170
     e34:	4a ea       	ldi	r20, 0xAA	; 170
     e36:	50 e4       	ldi	r21, 0x40	; 64
     e38:	6d 85       	ldd	r22, Y+13	; 0x0d
     e3a:	7e 85       	ldd	r23, Y+14	; 0x0e
     e3c:	8f 85       	ldd	r24, Y+15	; 0x0f
     e3e:	98 89       	ldd	r25, Y+16	; 0x10
     e40:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__mulsf3>
     e44:	dc 01       	movw	r26, r24
     e46:	cb 01       	movw	r24, r22
     e48:	89 8b       	std	Y+17, r24	; 0x11
     e4a:	9a 8b       	std	Y+18, r25	; 0x12
     e4c:	ab 8b       	std	Y+19, r26	; 0x13
     e4e:	bc 8b       	std	Y+20, r27	; 0x14
	__tmp2 = ((F_CPU) / 4e6) * __us;
     e50:	20 e0       	ldi	r18, 0x00	; 0
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	40 e8       	ldi	r20, 0x80	; 128
     e56:	50 e4       	ldi	r21, 0x40	; 64
     e58:	6d 85       	ldd	r22, Y+13	; 0x0d
     e5a:	7e 85       	ldd	r23, Y+14	; 0x0e
     e5c:	8f 85       	ldd	r24, Y+15	; 0x0f
     e5e:	98 89       	ldd	r25, Y+16	; 0x10
     e60:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__mulsf3>
     e64:	dc 01       	movw	r26, r24
     e66:	cb 01       	movw	r24, r22
     e68:	8d 8b       	std	Y+21, r24	; 0x15
     e6a:	9e 8b       	std	Y+22, r25	; 0x16
     e6c:	af 8b       	std	Y+23, r26	; 0x17
     e6e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e70:	20 e0       	ldi	r18, 0x00	; 0
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	40 e8       	ldi	r20, 0x80	; 128
     e76:	5f e3       	ldi	r21, 0x3F	; 63
     e78:	69 89       	ldd	r22, Y+17	; 0x11
     e7a:	7a 89       	ldd	r23, Y+18	; 0x12
     e7c:	8b 89       	ldd	r24, Y+19	; 0x13
     e7e:	9c 89       	ldd	r25, Y+20	; 0x14
     e80:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__cmpsf2>
     e84:	88 23       	and	r24, r24
     e86:	1c f4       	brge	.+6      	; 0xe8e <hd44780_init+0x434>
		__ticks = 1;
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	89 8f       	std	Y+25, r24	; 0x19
     e8c:	b2 c0       	rjmp	.+356    	; 0xff2 <hd44780_init+0x598>
	else if (__tmp2 > 65535)
     e8e:	20 e0       	ldi	r18, 0x00	; 0
     e90:	3f ef       	ldi	r19, 0xFF	; 255
     e92:	4f e7       	ldi	r20, 0x7F	; 127
     e94:	57 e4       	ldi	r21, 0x47	; 71
     e96:	6d 89       	ldd	r22, Y+21	; 0x15
     e98:	7e 89       	ldd	r23, Y+22	; 0x16
     e9a:	8f 89       	ldd	r24, Y+23	; 0x17
     e9c:	98 8d       	ldd	r25, Y+24	; 0x18
     e9e:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__gesf2>
     ea2:	18 16       	cp	r1, r24
     ea4:	0c f0       	brlt	.+2      	; 0xea8 <hd44780_init+0x44e>
     ea6:	7b c0       	rjmp	.+246    	; 0xf9e <hd44780_init+0x544>
	{
		_delay_ms(__us / 1000.0);
     ea8:	20 e0       	ldi	r18, 0x00	; 0
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	4a e7       	ldi	r20, 0x7A	; 122
     eae:	54 e4       	ldi	r21, 0x44	; 68
     eb0:	6d 85       	ldd	r22, Y+13	; 0x0d
     eb2:	7e 85       	ldd	r23, Y+14	; 0x0e
     eb4:	8f 85       	ldd	r24, Y+15	; 0x0f
     eb6:	98 89       	ldd	r25, Y+16	; 0x10
     eb8:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <__divsf3>
     ebc:	dc 01       	movw	r26, r24
     ebe:	cb 01       	movw	r24, r22
     ec0:	8a 8f       	std	Y+26, r24	; 0x1a
     ec2:	9b 8f       	std	Y+27, r25	; 0x1b
     ec4:	ac 8f       	std	Y+28, r26	; 0x1c
     ec6:	bd 8f       	std	Y+29, r27	; 0x1d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     ec8:	20 e0       	ldi	r18, 0x00	; 0
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	4a e7       	ldi	r20, 0x7A	; 122
     ece:	55 e4       	ldi	r21, 0x45	; 69
     ed0:	6a 8d       	ldd	r22, Y+26	; 0x1a
     ed2:	7b 8d       	ldd	r23, Y+27	; 0x1b
     ed4:	8c 8d       	ldd	r24, Y+28	; 0x1c
     ed6:	9d 8d       	ldd	r25, Y+29	; 0x1d
     ed8:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__mulsf3>
     edc:	dc 01       	movw	r26, r24
     ede:	cb 01       	movw	r24, r22
     ee0:	8e 8f       	std	Y+30, r24	; 0x1e
     ee2:	9f 8f       	std	Y+31, r25	; 0x1f
     ee4:	a8 a3       	std	Y+32, r26	; 0x20
     ee6:	b9 a3       	std	Y+33, r27	; 0x21
	if (__tmp < 1.0)
     ee8:	20 e0       	ldi	r18, 0x00	; 0
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	40 e8       	ldi	r20, 0x80	; 128
     eee:	5f e3       	ldi	r21, 0x3F	; 63
     ef0:	6e 8d       	ldd	r22, Y+30	; 0x1e
     ef2:	7f 8d       	ldd	r23, Y+31	; 0x1f
     ef4:	88 a1       	ldd	r24, Y+32	; 0x20
     ef6:	99 a1       	ldd	r25, Y+33	; 0x21
     ef8:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__cmpsf2>
     efc:	88 23       	and	r24, r24
     efe:	2c f4       	brge	.+10     	; 0xf0a <hd44780_init+0x4b0>
		__ticks = 1;
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	9b a3       	std	Y+35, r25	; 0x23
     f06:	8a a3       	std	Y+34, r24	; 0x22
     f08:	3f c0       	rjmp	.+126    	; 0xf88 <hd44780_init+0x52e>
	else if (__tmp > 65535)
     f0a:	20 e0       	ldi	r18, 0x00	; 0
     f0c:	3f ef       	ldi	r19, 0xFF	; 255
     f0e:	4f e7       	ldi	r20, 0x7F	; 127
     f10:	57 e4       	ldi	r21, 0x47	; 71
     f12:	6e 8d       	ldd	r22, Y+30	; 0x1e
     f14:	7f 8d       	ldd	r23, Y+31	; 0x1f
     f16:	88 a1       	ldd	r24, Y+32	; 0x20
     f18:	99 a1       	ldd	r25, Y+33	; 0x21
     f1a:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__gesf2>
     f1e:	18 16       	cp	r1, r24
     f20:	4c f5       	brge	.+82     	; 0xf74 <hd44780_init+0x51a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f22:	20 e0       	ldi	r18, 0x00	; 0
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	40 e2       	ldi	r20, 0x20	; 32
     f28:	51 e4       	ldi	r21, 0x41	; 65
     f2a:	6a 8d       	ldd	r22, Y+26	; 0x1a
     f2c:	7b 8d       	ldd	r23, Y+27	; 0x1b
     f2e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     f30:	9d 8d       	ldd	r25, Y+29	; 0x1d
     f32:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__mulsf3>
     f36:	dc 01       	movw	r26, r24
     f38:	cb 01       	movw	r24, r22
     f3a:	bc 01       	movw	r22, r24
     f3c:	cd 01       	movw	r24, r26
     f3e:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <__fixunssfsi>
     f42:	dc 01       	movw	r26, r24
     f44:	cb 01       	movw	r24, r22
     f46:	9b a3       	std	Y+35, r25	; 0x23
     f48:	8a a3       	std	Y+34, r24	; 0x22
     f4a:	0f c0       	rjmp	.+30     	; 0xf6a <hd44780_init+0x510>
     f4c:	80 e9       	ldi	r24, 0x90	; 144
     f4e:	91 e0       	ldi	r25, 0x01	; 1
     f50:	9d a3       	std	Y+37, r25	; 0x25
     f52:	8c a3       	std	Y+36, r24	; 0x24
     f54:	8c a1       	ldd	r24, Y+36	; 0x24
     f56:	9d a1       	ldd	r25, Y+37	; 0x25
     f58:	01 97       	sbiw	r24, 0x01	; 1
     f5a:	f1 f7       	brne	.-4      	; 0xf58 <hd44780_init+0x4fe>
     f5c:	9d a3       	std	Y+37, r25	; 0x25
     f5e:	8c a3       	std	Y+36, r24	; 0x24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f60:	8a a1       	ldd	r24, Y+34	; 0x22
     f62:	9b a1       	ldd	r25, Y+35	; 0x23
     f64:	01 97       	sbiw	r24, 0x01	; 1
     f66:	9b a3       	std	Y+35, r25	; 0x23
     f68:	8a a3       	std	Y+34, r24	; 0x22
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f6a:	8a a1       	ldd	r24, Y+34	; 0x22
     f6c:	9b a1       	ldd	r25, Y+35	; 0x23
     f6e:	89 2b       	or	r24, r25
     f70:	69 f7       	brne	.-38     	; 0xf4c <hd44780_init+0x4f2>
     f72:	3f c0       	rjmp	.+126    	; 0xff2 <hd44780_init+0x598>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f74:	6e 8d       	ldd	r22, Y+30	; 0x1e
     f76:	7f 8d       	ldd	r23, Y+31	; 0x1f
     f78:	88 a1       	ldd	r24, Y+32	; 0x20
     f7a:	99 a1       	ldd	r25, Y+33	; 0x21
     f7c:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <__fixunssfsi>
     f80:	dc 01       	movw	r26, r24
     f82:	cb 01       	movw	r24, r22
     f84:	9b a3       	std	Y+35, r25	; 0x23
     f86:	8a a3       	std	Y+34, r24	; 0x22
     f88:	8a a1       	ldd	r24, Y+34	; 0x22
     f8a:	9b a1       	ldd	r25, Y+35	; 0x23
     f8c:	9f a3       	std	Y+39, r25	; 0x27
     f8e:	8e a3       	std	Y+38, r24	; 0x26
     f90:	8e a1       	ldd	r24, Y+38	; 0x26
     f92:	9f a1       	ldd	r25, Y+39	; 0x27
     f94:	01 97       	sbiw	r24, 0x01	; 1
     f96:	f1 f7       	brne	.-4      	; 0xf94 <hd44780_init+0x53a>
     f98:	9f a3       	std	Y+39, r25	; 0x27
     f9a:	8e a3       	std	Y+38, r24	; 0x26
     f9c:	2a c0       	rjmp	.+84     	; 0xff2 <hd44780_init+0x598>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     f9e:	20 e0       	ldi	r18, 0x00	; 0
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	4f e7       	ldi	r20, 0x7F	; 127
     fa4:	53 e4       	ldi	r21, 0x43	; 67
     fa6:	69 89       	ldd	r22, Y+17	; 0x11
     fa8:	7a 89       	ldd	r23, Y+18	; 0x12
     faa:	8b 89       	ldd	r24, Y+19	; 0x13
     fac:	9c 89       	ldd	r25, Y+20	; 0x14
     fae:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__gesf2>
     fb2:	18 16       	cp	r1, r24
     fb4:	ac f4       	brge	.+42     	; 0xfe0 <hd44780_init+0x586>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     fb6:	6d 89       	ldd	r22, Y+21	; 0x15
     fb8:	7e 89       	ldd	r23, Y+22	; 0x16
     fba:	8f 89       	ldd	r24, Y+23	; 0x17
     fbc:	98 8d       	ldd	r25, Y+24	; 0x18
     fbe:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <__fixunssfsi>
     fc2:	dc 01       	movw	r26, r24
     fc4:	cb 01       	movw	r24, r22
     fc6:	99 a7       	std	Y+41, r25	; 0x29
     fc8:	88 a7       	std	Y+40, r24	; 0x28
     fca:	88 a5       	ldd	r24, Y+40	; 0x28
     fcc:	99 a5       	ldd	r25, Y+41	; 0x29
     fce:	9b a7       	std	Y+43, r25	; 0x2b
     fd0:	8a a7       	std	Y+42, r24	; 0x2a
     fd2:	8a a5       	ldd	r24, Y+42	; 0x2a
     fd4:	9b a5       	ldd	r25, Y+43	; 0x2b
     fd6:	01 97       	sbiw	r24, 0x01	; 1
     fd8:	f1 f7       	brne	.-4      	; 0xfd6 <hd44780_init+0x57c>
     fda:	9b a7       	std	Y+43, r25	; 0x2b
     fdc:	8a a7       	std	Y+42, r24	; 0x2a
     fde:	0f c0       	rjmp	.+30     	; 0xffe <hd44780_init+0x5a4>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     fe0:	69 89       	ldd	r22, Y+17	; 0x11
     fe2:	7a 89       	ldd	r23, Y+18	; 0x12
     fe4:	8b 89       	ldd	r24, Y+19	; 0x13
     fe6:	9c 89       	ldd	r25, Y+20	; 0x14
     fe8:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <__fixunssfsi>
     fec:	dc 01       	movw	r26, r24
     fee:	cb 01       	movw	r24, r22
     ff0:	89 8f       	std	Y+25, r24	; 0x19
     ff2:	89 8d       	ldd	r24, Y+25	; 0x19
     ff4:	8c a7       	std	Y+44, r24	; 0x2c
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     ff6:	8c a5       	ldd	r24, Y+44	; 0x2c
     ff8:	8a 95       	dec	r24
     ffa:	f1 f7       	brne	.-4      	; 0xff8 <hd44780_init+0x59e>
     ffc:	8c a7       	std	Y+44, r24	; 0x2c
  _delay_us(37);

  hd44780_outnibble(HD44780_FNSET(0, 1, 0) >> 4, 0);
     ffe:	60 e0       	ldi	r22, 0x00	; 0
    1000:	82 e0       	ldi	r24, 0x02	; 2
    1002:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <hd44780_outnibble>
  hd44780_wait_ready(false);
    1006:	80 e0       	ldi	r24, 0x00	; 0
    1008:	0e 94 b2 03 	call	0x764	; 0x764 <hd44780_wait_ready>
  hd44780_outcmd(HD44780_FNSET(0, 1, 0));
    100c:	60 e0       	ldi	r22, 0x00	; 0
    100e:	88 e2       	ldi	r24, 0x28	; 40
    1010:	0e 94 22 02 	call	0x444	; 0x444 <hd44780_outbyte>
  hd44780_wait_ready(false);
    1014:	80 e0       	ldi	r24, 0x00	; 0
    1016:	0e 94 b2 03 	call	0x764	; 0x764 <hd44780_wait_ready>
  hd44780_outcmd(HD44780_DISPCTL(0, 0, 0));
    101a:	60 e0       	ldi	r22, 0x00	; 0
    101c:	88 e0       	ldi	r24, 0x08	; 8
    101e:	0e 94 22 02 	call	0x444	; 0x444 <hd44780_outbyte>
  hd44780_wait_ready(false);
    1022:	80 e0       	ldi	r24, 0x00	; 0
    1024:	0e 94 b2 03 	call	0x764	; 0x764 <hd44780_wait_ready>
}
    1028:	00 00       	nop
    102a:	c6 5b       	subi	r28, 0xB6	; 182
    102c:	df 4f       	sbci	r29, 0xFF	; 255
    102e:	0f b6       	in	r0, 0x3f	; 63
    1030:	f8 94       	cli
    1032:	de bf       	out	0x3e, r29	; 62
    1034:	0f be       	out	0x3f, r0	; 63
    1036:	cd bf       	out	0x3d, r28	; 61
    1038:	df 91       	pop	r29
    103a:	cf 91       	pop	r28
    103c:	1f 91       	pop	r17
    103e:	0f 91       	pop	r16
    1040:	08 95       	ret

00001042 <hd44780_powerdown>:
/*
 * Prepare the LCD controller pins for powerdown.
 */
void
hd44780_powerdown(void)
{
    1042:	cf 93       	push	r28
    1044:	df 93       	push	r29
    1046:	cd b7       	in	r28, 0x3d	; 61
    1048:	de b7       	in	r29, 0x3e	; 62
  ASSIGN(PORT, HD44780_D4, 0);
    104a:	88 e2       	ldi	r24, 0x28	; 40
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	28 e2       	ldi	r18, 0x28	; 40
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	f9 01       	movw	r30, r18
    1054:	20 81       	ld	r18, Z
    1056:	20 7f       	andi	r18, 0xF0	; 240
    1058:	fc 01       	movw	r30, r24
    105a:	20 83       	st	Z, r18
  CLR(PORT, HD44780_RS);
    105c:	85 e2       	ldi	r24, 0x25	; 37
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	25 e2       	ldi	r18, 0x25	; 37
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	f9 01       	movw	r30, r18
    1066:	20 81       	ld	r18, Z
    1068:	2f 7d       	andi	r18, 0xDF	; 223
    106a:	fc 01       	movw	r30, r24
    106c:	20 83       	st	Z, r18
  CLR(PORT, HD44780_RW);
    106e:	85 e2       	ldi	r24, 0x25	; 37
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	25 e2       	ldi	r18, 0x25	; 37
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	f9 01       	movw	r30, r18
    1078:	20 81       	ld	r18, Z
    107a:	2f 7e       	andi	r18, 0xEF	; 239
    107c:	fc 01       	movw	r30, r24
    107e:	20 83       	st	Z, r18
  CLR(PORT, HD44780_E);
    1080:	85 e2       	ldi	r24, 0x25	; 37
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	25 e2       	ldi	r18, 0x25	; 37
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	f9 01       	movw	r30, r18
    108a:	20 81       	ld	r18, Z
    108c:	27 7f       	andi	r18, 0xF7	; 247
    108e:	fc 01       	movw	r30, r24
    1090:	20 83       	st	Z, r18
}
    1092:	00 00       	nop
    1094:	df 91       	pop	r29
    1096:	cf 91       	pop	r28
    1098:	08 95       	ret

0000109a <lcd_init>:
 * Setup the LCD controller.  First, call the hardware initialization
 * function, then adjust the display attributes we want.
 */
void
lcd_init(void)
{
    109a:	cf 93       	push	r28
    109c:	df 93       	push	r29
    109e:	cd b7       	in	r28, 0x3d	; 61
    10a0:	de b7       	in	r29, 0x3e	; 62

  hd44780_init();
    10a2:	0e 94 2d 05 	call	0xa5a	; 0xa5a <hd44780_init>

  /*
   * Clear the display.
   */
  hd44780_outcmd(HD44780_CLR);
    10a6:	60 e0       	ldi	r22, 0x00	; 0
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	0e 94 22 02 	call	0x444	; 0x444 <hd44780_outbyte>
  hd44780_wait_ready(true);
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	0e 94 b2 03 	call	0x764	; 0x764 <hd44780_wait_ready>

  /*
   * Entry mode: auto-increment address counter, no display shift in
   * effect.
   */
  hd44780_outcmd(HD44780_ENTMODE(1, 0));
    10b4:	60 e0       	ldi	r22, 0x00	; 0
    10b6:	86 e0       	ldi	r24, 0x06	; 6
    10b8:	0e 94 22 02 	call	0x444	; 0x444 <hd44780_outbyte>
  hd44780_wait_ready(false);
    10bc:	80 e0       	ldi	r24, 0x00	; 0
    10be:	0e 94 b2 03 	call	0x764	; 0x764 <hd44780_wait_ready>

  /*
   * Enable display, activate non-blinking cursor.
   */
  hd44780_outcmd(HD44780_DISPCTL(1, 1, 0));
    10c2:	60 e0       	ldi	r22, 0x00	; 0
    10c4:	8e e0       	ldi	r24, 0x0E	; 14
    10c6:	0e 94 22 02 	call	0x444	; 0x444 <hd44780_outbyte>
  hd44780_wait_ready(false);
    10ca:	80 e0       	ldi	r24, 0x00	; 0
    10cc:	0e 94 b2 03 	call	0x764	; 0x764 <hd44780_wait_ready>
}
    10d0:	00 00       	nop
    10d2:	df 91       	pop	r29
    10d4:	cf 91       	pop	r28
    10d6:	08 95       	ret

000010d8 <lcd_putchar>:
 * Send character c to the LCD display.  After a '\n' has been seen,
 * the next character will first clear the display.
 */
int
lcd_putchar(char c, FILE *unused)
{
    10d8:	cf 93       	push	r28
    10da:	df 93       	push	r29
    10dc:	00 d0       	rcall	.+0      	; 0x10de <lcd_putchar+0x6>
    10de:	1f 92       	push	r1
    10e0:	cd b7       	in	r28, 0x3d	; 61
    10e2:	de b7       	in	r29, 0x3e	; 62
    10e4:	89 83       	std	Y+1, r24	; 0x01
    10e6:	7b 83       	std	Y+3, r23	; 0x03
    10e8:	6a 83       	std	Y+2, r22	; 0x02
  static bool nl_seen = 0;

  if (nl_seen >= 2 && c != '\n')
    10ea:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__data_end>
    10ee:	88 2f       	mov	r24, r24
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	02 97       	sbiw	r24, 0x02	; 2
    10f4:	d4 f0       	brlt	.+52     	; 0x112a <lcd_putchar+0x52>
    10f6:	89 81       	ldd	r24, Y+1	; 0x01
    10f8:	8a 30       	cpi	r24, 0x0A	; 10
    10fa:	b9 f0       	breq	.+46     	; 0x112a <lcd_putchar+0x52>
    {
      /*
       * First character after newline, clear display and home cursor.
       */
      hd44780_wait_ready(false);
    10fc:	80 e0       	ldi	r24, 0x00	; 0
    10fe:	0e 94 b2 03 	call	0x764	; 0x764 <hd44780_wait_ready>
      hd44780_outcmd(HD44780_CLR);
    1102:	60 e0       	ldi	r22, 0x00	; 0
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	0e 94 22 02 	call	0x444	; 0x444 <hd44780_outbyte>
      hd44780_wait_ready(false);
    110a:	80 e0       	ldi	r24, 0x00	; 0
    110c:	0e 94 b2 03 	call	0x764	; 0x764 <hd44780_wait_ready>
      hd44780_outcmd(HD44780_HOME);
    1110:	60 e0       	ldi	r22, 0x00	; 0
    1112:	82 e0       	ldi	r24, 0x02	; 2
    1114:	0e 94 22 02 	call	0x444	; 0x444 <hd44780_outbyte>
      hd44780_wait_ready(true);
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	0e 94 b2 03 	call	0x764	; 0x764 <hd44780_wait_ready>
      hd44780_outcmd(HD44780_DDADDR(0));
    111e:	60 e0       	ldi	r22, 0x00	; 0
    1120:	80 e8       	ldi	r24, 0x80	; 128
    1122:	0e 94 22 02 	call	0x444	; 0x444 <hd44780_outbyte>

      nl_seen = 0;
    1126:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__data_end>
    }
  if (c == '\n')
    112a:	89 81       	ldd	r24, Y+1	; 0x01
    112c:	8a 30       	cpi	r24, 0x0A	; 10
    112e:	79 f4       	brne	.+30     	; 0x114e <lcd_putchar+0x76>
    {
      ++nl_seen;
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <__data_end>
      if (nl_seen == 1){
    1136:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__data_end>
    113a:	88 23       	and	r24, r24
    113c:	79 f0       	breq	.+30     	; 0x115c <lcd_putchar+0x84>
		    hd44780_wait_ready(true);
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	0e 94 b2 03 	call	0x764	; 0x764 <hd44780_wait_ready>
		    hd44780_outcmd(HD44780_DDADDR(0x40));
    1144:	60 e0       	ldi	r22, 0x00	; 0
    1146:	80 ec       	ldi	r24, 0xC0	; 192
    1148:	0e 94 22 02 	call	0x444	; 0x444 <hd44780_outbyte>
    114c:	07 c0       	rjmp	.+14     	; 0x115c <lcd_putchar+0x84>
		  }
    }
  else
    {
      hd44780_wait_ready(false);
    114e:	80 e0       	ldi	r24, 0x00	; 0
    1150:	0e 94 b2 03 	call	0x764	; 0x764 <hd44780_wait_ready>
      hd44780_outdata(c);
    1154:	61 e0       	ldi	r22, 0x01	; 1
    1156:	89 81       	ldd	r24, Y+1	; 0x01
    1158:	0e 94 22 02 	call	0x444	; 0x444 <hd44780_outbyte>
    }

  return 0;
    115c:	80 e0       	ldi	r24, 0x00	; 0
    115e:	90 e0       	ldi	r25, 0x00	; 0
}
    1160:	0f 90       	pop	r0
    1162:	0f 90       	pop	r0
    1164:	0f 90       	pop	r0
    1166:	df 91       	pop	r29
    1168:	cf 91       	pop	r28
    116a:	08 95       	ret

0000116c <home>:

/*
Returns the cursor to the first row first cell of the LCD
*/
void home(void){
    116c:	cf 93       	push	r28
    116e:	df 93       	push	r29
    1170:	cd b7       	in	r28, 0x3d	; 61
    1172:	de b7       	in	r29, 0x3e	; 62
  hd44780_wait_ready(true);
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	0e 94 b2 03 	call	0x764	; 0x764 <hd44780_wait_ready>
	hd44780_outcmd(HD44780_DDADDR(0x00));
    117a:	60 e0       	ldi	r22, 0x00	; 0
    117c:	80 e8       	ldi	r24, 0x80	; 128
    117e:	0e 94 22 02 	call	0x444	; 0x444 <hd44780_outbyte>
}
    1182:	00 00       	nop
    1184:	df 91       	pop	r29
    1186:	cf 91       	pop	r28
    1188:	08 95       	ret

0000118a <clear>:

/*
Clears the screen of the LCD and returns home
*/
void clear(void){
    118a:	cf 93       	push	r28
    118c:	df 93       	push	r29
    118e:	cd b7       	in	r28, 0x3d	; 61
    1190:	de b7       	in	r29, 0x3e	; 62
	hd44780_wait_ready(false);
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	0e 94 b2 03 	call	0x764	; 0x764 <hd44780_wait_ready>
	hd44780_outcmd(HD44780_CLR);
    1198:	60 e0       	ldi	r22, 0x00	; 0
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	0e 94 22 02 	call	0x444	; 0x444 <hd44780_outbyte>
	hd44780_wait_ready(true);
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	0e 94 b2 03 	call	0x764	; 0x764 <hd44780_wait_ready>
	hd44780_outcmd(HD44780_DDADDR(0));
    11a6:	60 e0       	ldi	r22, 0x00	; 0
    11a8:	80 e8       	ldi	r24, 0x80	; 128
    11aa:	0e 94 22 02 	call	0x444	; 0x444 <hd44780_outbyte>
}
    11ae:	00 00       	nop
    11b0:	df 91       	pop	r29
    11b2:	cf 91       	pop	r28
    11b4:	08 95       	ret

000011b6 <row2>:

/*
Puts the cursor at the start of the second row
*/
void row2(void){
    11b6:	cf 93       	push	r28
    11b8:	df 93       	push	r29
    11ba:	cd b7       	in	r28, 0x3d	; 61
    11bc:	de b7       	in	r29, 0x3e	; 62
	hd44780_wait_ready(true);
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	0e 94 b2 03 	call	0x764	; 0x764 <hd44780_wait_ready>
	hd44780_outcmd(HD44780_DDADDR(0x40));
    11c4:	60 e0       	ldi	r22, 0x00	; 0
    11c6:	80 ec       	ldi	r24, 0xC0	; 192
    11c8:	0e 94 22 02 	call	0x444	; 0x444 <hd44780_outbyte>
}
    11cc:	00 00       	nop
    11ce:	df 91       	pop	r29
    11d0:	cf 91       	pop	r28
    11d2:	08 95       	ret

000011d4 <__vector_16>:
void handleButtonPress();
void checkIfButtonIsPressed();

// timer0 overflow ISR
ISR(TIMER0_OVF_vect)
{
    11d4:	1f 92       	push	r1
    11d6:	0f 92       	push	r0
    11d8:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    11dc:	0f 92       	push	r0
    11de:	11 24       	eor	r1, r1
    11e0:	2f 93       	push	r18
    11e2:	3f 93       	push	r19
    11e4:	8f 93       	push	r24
    11e6:	9f 93       	push	r25
    11e8:	ef 93       	push	r30
    11ea:	ff 93       	push	r31
    11ec:	cf 93       	push	r28
    11ee:	df 93       	push	r29
    11f0:	cd b7       	in	r28, 0x3d	; 61
    11f2:	de b7       	in	r29, 0x3e	; 62
	cli();
    11f4:	f8 94       	cli
	OCR0B = COMPARE; // Update the COMPARE value
    11f6:	88 e4       	ldi	r24, 0x48	; 72
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <COMPARE>
    11fe:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <COMPARE+0x1>
    1202:	fc 01       	movw	r30, r24
    1204:	20 83       	st	Z, r18
	sei();
    1206:	78 94       	sei
}
    1208:	00 00       	nop
    120a:	df 91       	pop	r29
    120c:	cf 91       	pop	r28
    120e:	ff 91       	pop	r31
    1210:	ef 91       	pop	r30
    1212:	9f 91       	pop	r25
    1214:	8f 91       	pop	r24
    1216:	3f 91       	pop	r19
    1218:	2f 91       	pop	r18
    121a:	0f 90       	pop	r0
    121c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1220:	0f 90       	pop	r0
    1222:	1f 90       	pop	r1
    1224:	18 95       	reti

00001226 <__vector_2>:

// PD3 Toggle ISR
ISR(INT1_vect)
{
    1226:	1f 92       	push	r1
    1228:	0f 92       	push	r0
    122a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    122e:	0f 92       	push	r0
    1230:	11 24       	eor	r1, r1
    1232:	2f 93       	push	r18
    1234:	3f 93       	push	r19
    1236:	4f 93       	push	r20
    1238:	5f 93       	push	r21
    123a:	6f 93       	push	r22
    123c:	7f 93       	push	r23
    123e:	8f 93       	push	r24
    1240:	9f 93       	push	r25
    1242:	af 93       	push	r26
    1244:	bf 93       	push	r27
    1246:	ef 93       	push	r30
    1248:	ff 93       	push	r31
    124a:	cf 93       	push	r28
    124c:	df 93       	push	r29
    124e:	1f 92       	push	r1
    1250:	cd b7       	in	r28, 0x3d	; 61
    1252:	de b7       	in	r29, 0x3e	; 62
	uint8_t sreg;
	stop16BitTimer();
    1254:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <stop16BitTimer>
	sreg = SREG;
    1258:	8f e5       	ldi	r24, 0x5F	; 95
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	fc 01       	movw	r30, r24
    125e:	80 81       	ld	r24, Z
    1260:	89 83       	std	Y+1, r24	; 0x01
	cli();
    1262:	f8 94       	cli
	pulse_count = TCNT1;
    1264:	84 e8       	ldi	r24, 0x84	; 132
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	fc 01       	movw	r30, r24
    126a:	80 81       	ld	r24, Z
    126c:	91 81       	ldd	r25, Z+1	; 0x01
    126e:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <pulse_count+0x1>
    1272:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <pulse_count>
	TCNT1 = 0;
    1276:	84 e8       	ldi	r24, 0x84	; 132
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	fc 01       	movw	r30, r24
    127c:	11 82       	std	Z+1, r1	; 0x01
    127e:	10 82       	st	Z, r1
	SREG = sreg;
    1280:	8f e5       	ldi	r24, 0x5F	; 95
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	29 81       	ldd	r18, Y+1	; 0x01
    1286:	fc 01       	movw	r30, r24
    1288:	20 83       	st	Z, r18
	start16BitTimer();
    128a:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <start16BitTimer>
	sei();
    128e:	78 94       	sei
}
    1290:	00 00       	nop
    1292:	0f 90       	pop	r0
    1294:	df 91       	pop	r29
    1296:	cf 91       	pop	r28
    1298:	ff 91       	pop	r31
    129a:	ef 91       	pop	r30
    129c:	bf 91       	pop	r27
    129e:	af 91       	pop	r26
    12a0:	9f 91       	pop	r25
    12a2:	8f 91       	pop	r24
    12a4:	7f 91       	pop	r23
    12a6:	6f 91       	pop	r22
    12a8:	5f 91       	pop	r21
    12aa:	4f 91       	pop	r20
    12ac:	3f 91       	pop	r19
    12ae:	2f 91       	pop	r18
    12b0:	0f 90       	pop	r0
    12b2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    12b6:	0f 90       	pop	r0
    12b8:	1f 90       	pop	r1
    12ba:	18 95       	reti

000012bc <main>:

int main(void)
{
    12bc:	cf 93       	push	r28
    12be:	df 93       	push	r29
    12c0:	cd b7       	in	r28, 0x3d	; 61
    12c2:	de b7       	in	r29, 0x3e	; 62
    12c4:	60 97       	sbiw	r28, 0x10	; 16
    12c6:	0f b6       	in	r0, 0x3f	; 63
    12c8:	f8 94       	cli
    12ca:	de bf       	out	0x3e, r29	; 62
    12cc:	0f be       	out	0x3f, r0	; 63
    12ce:	cd bf       	out	0x3d, r28	; 61
	stdout = &lcd_str; // redefines std output to output to LCD file output, that file is that writes to LCD
    12d0:	80 e0       	ldi	r24, 0x00	; 0
    12d2:	91 e0       	ldi	r25, 0x01	; 1
    12d4:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <__iob+0x3>
    12d8:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <__iob+0x2>
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	8d 83       	std	Y+5, r24	; 0x05
\note For device with XTAL Divide Control Register (XDIV), \c x can actually range
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    12e0:	80 e8       	ldi	r24, 0x80	; 128
    12e2:	8e 83       	std	Y+6, r24	; 0x06
    __asm__ __volatile__ (
    12e4:	8e 81       	ldd	r24, Y+6	; 0x06
    12e6:	9d 81       	ldd	r25, Y+5	; 0x05
    12e8:	0f b6       	in	r0, 0x3f	; 63
    12ea:	f8 94       	cli
    12ec:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f8061>
    12f0:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f8061>
    12f4:	0f be       	out	0x3f, r0	; 63
	clock_prescale_set(1);

	lcd_init();
    12f6:	0e 94 4d 08 	call	0x109a	; 0x109a <lcd_init>
	
	DDRD = DDRD | (1 << 5); // set PD5 as output
    12fa:	8a e2       	ldi	r24, 0x2A	; 42
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	2a e2       	ldi	r18, 0x2A	; 42
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	f9 01       	movw	r30, r18
    1304:	20 81       	ld	r18, Z
    1306:	20 62       	ori	r18, 0x20	; 32
    1308:	fc 01       	movw	r30, r24
    130a:	20 83       	st	Z, r18
	
	DDRB = DDRB & ~((1 << RPG_A_PIN) | (1 << RPG_B_PIN)); // Set RPG pins as inputs
    130c:	84 e2       	ldi	r24, 0x24	; 36
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	24 e2       	ldi	r18, 0x24	; 36
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	f9 01       	movw	r30, r18
    1316:	20 81       	ld	r18, Z
    1318:	2c 7f       	andi	r18, 0xFC	; 252
    131a:	fc 01       	movw	r30, r24
    131c:	20 83       	st	Z, r18
	PORTB |= (1 << RPG_A_PIN) | (1 << RPG_B_PIN); // Enable pull-up resistors on RPG
    131e:	85 e2       	ldi	r24, 0x25	; 37
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	25 e2       	ldi	r18, 0x25	; 37
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	f9 01       	movw	r30, r18
    1328:	20 81       	ld	r18, Z
    132a:	23 60       	ori	r18, 0x03	; 3
    132c:	fc 01       	movw	r30, r24
    132e:	20 83       	st	Z, r18
	
	DDRD &= ~(1 << 3); // Set PD3 (tachometer) as input
    1330:	8a e2       	ldi	r24, 0x2A	; 42
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	2a e2       	ldi	r18, 0x2A	; 42
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	f9 01       	movw	r30, r18
    133a:	20 81       	ld	r18, Z
    133c:	27 7f       	andi	r18, 0xF7	; 247
    133e:	fc 01       	movw	r30, r24
    1340:	20 83       	st	Z, r18
	// Setup PD3 ISR
	EICRA |= (1 << ISC10);
    1342:	89 e6       	ldi	r24, 0x69	; 105
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	29 e6       	ldi	r18, 0x69	; 105
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	f9 01       	movw	r30, r18
    134c:	20 81       	ld	r18, Z
    134e:	24 60       	ori	r18, 0x04	; 4
    1350:	fc 01       	movw	r30, r24
    1352:	20 83       	st	Z, r18
	EIMSK |= (1 << INT1);
    1354:	8d e3       	ldi	r24, 0x3D	; 61
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	2d e3       	ldi	r18, 0x3D	; 61
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	f9 01       	movw	r30, r18
    135e:	20 81       	ld	r18, Z
    1360:	22 60       	ori	r18, 0x02	; 2
    1362:	fc 01       	movw	r30, r24
    1364:	20 83       	st	Z, r18
	
	DDRC |= (1 << 4); // Set PC4 (buzzer) as output
    1366:	87 e2       	ldi	r24, 0x27	; 39
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	27 e2       	ldi	r18, 0x27	; 39
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	f9 01       	movw	r30, r18
    1370:	20 81       	ld	r18, Z
    1372:	20 61       	ori	r18, 0x10	; 16
    1374:	fc 01       	movw	r30, r24
    1376:	20 83       	st	Z, r18
	
	DDRD &= ~(1 << 2); // Set PD2 (button) as input
    1378:	8a e2       	ldi	r24, 0x2A	; 42
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	2a e2       	ldi	r18, 0x2A	; 42
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	f9 01       	movw	r30, r18
    1382:	20 81       	ld	r18, Z
    1384:	2b 7f       	andi	r18, 0xFB	; 251
    1386:	fc 01       	movw	r30, r24
    1388:	20 83       	st	Z, r18
	
	timer0_init();
    138a:	0e 94 40 0a 	call	0x1480	; 0x1480 <timer0_init>
				
    while (1) {
		display_to_LCD();
    138e:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <display_to_LCD>
		read_rpg();
    1392:	0e 94 8a 0a 	call	0x1514	; 0x1514 <read_rpg>
		checkIfButtonIsPressed();
    1396:	0e 94 8c 0c 	call	0x1918	; 0x1918 <checkIfButtonIsPressed>
    139a:	80 e0       	ldi	r24, 0x00	; 0
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	a0 e2       	ldi	r26, 0x20	; 32
    13a0:	b1 e4       	ldi	r27, 0x41	; 65
    13a2:	89 83       	std	Y+1, r24	; 0x01
    13a4:	9a 83       	std	Y+2, r25	; 0x02
    13a6:	ab 83       	std	Y+3, r26	; 0x03
    13a8:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    13aa:	20 e0       	ldi	r18, 0x00	; 0
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	4a e7       	ldi	r20, 0x7A	; 122
    13b0:	55 e4       	ldi	r21, 0x45	; 69
    13b2:	69 81       	ldd	r22, Y+1	; 0x01
    13b4:	7a 81       	ldd	r23, Y+2	; 0x02
    13b6:	8b 81       	ldd	r24, Y+3	; 0x03
    13b8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ba:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__mulsf3>
    13be:	dc 01       	movw	r26, r24
    13c0:	cb 01       	movw	r24, r22
    13c2:	8f 83       	std	Y+7, r24	; 0x07
    13c4:	98 87       	std	Y+8, r25	; 0x08
    13c6:	a9 87       	std	Y+9, r26	; 0x09
    13c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13ca:	20 e0       	ldi	r18, 0x00	; 0
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	40 e8       	ldi	r20, 0x80	; 128
    13d0:	5f e3       	ldi	r21, 0x3F	; 63
    13d2:	6f 81       	ldd	r22, Y+7	; 0x07
    13d4:	78 85       	ldd	r23, Y+8	; 0x08
    13d6:	89 85       	ldd	r24, Y+9	; 0x09
    13d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    13da:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__cmpsf2>
    13de:	88 23       	and	r24, r24
    13e0:	2c f4       	brge	.+10     	; 0x13ec <main+0x130>
		__ticks = 1;
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	9c 87       	std	Y+12, r25	; 0x0c
    13e8:	8b 87       	std	Y+11, r24	; 0x0b
    13ea:	3f c0       	rjmp	.+126    	; 0x146a <main+0x1ae>
	else if (__tmp > 65535)
    13ec:	20 e0       	ldi	r18, 0x00	; 0
    13ee:	3f ef       	ldi	r19, 0xFF	; 255
    13f0:	4f e7       	ldi	r20, 0x7F	; 127
    13f2:	57 e4       	ldi	r21, 0x47	; 71
    13f4:	6f 81       	ldd	r22, Y+7	; 0x07
    13f6:	78 85       	ldd	r23, Y+8	; 0x08
    13f8:	89 85       	ldd	r24, Y+9	; 0x09
    13fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    13fc:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__gesf2>
    1400:	18 16       	cp	r1, r24
    1402:	4c f5       	brge	.+82     	; 0x1456 <main+0x19a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1404:	20 e0       	ldi	r18, 0x00	; 0
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	40 e2       	ldi	r20, 0x20	; 32
    140a:	51 e4       	ldi	r21, 0x41	; 65
    140c:	69 81       	ldd	r22, Y+1	; 0x01
    140e:	7a 81       	ldd	r23, Y+2	; 0x02
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	9c 81       	ldd	r25, Y+4	; 0x04
    1414:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__mulsf3>
    1418:	dc 01       	movw	r26, r24
    141a:	cb 01       	movw	r24, r22
    141c:	bc 01       	movw	r22, r24
    141e:	cd 01       	movw	r24, r26
    1420:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <__fixunssfsi>
    1424:	dc 01       	movw	r26, r24
    1426:	cb 01       	movw	r24, r22
    1428:	9c 87       	std	Y+12, r25	; 0x0c
    142a:	8b 87       	std	Y+11, r24	; 0x0b
    142c:	0f c0       	rjmp	.+30     	; 0x144c <main+0x190>
    142e:	80 e9       	ldi	r24, 0x90	; 144
    1430:	91 e0       	ldi	r25, 0x01	; 1
    1432:	9e 87       	std	Y+14, r25	; 0x0e
    1434:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1436:	8d 85       	ldd	r24, Y+13	; 0x0d
    1438:	9e 85       	ldd	r25, Y+14	; 0x0e
    143a:	01 97       	sbiw	r24, 0x01	; 1
    143c:	f1 f7       	brne	.-4      	; 0x143a <main+0x17e>
    143e:	9e 87       	std	Y+14, r25	; 0x0e
    1440:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1442:	8b 85       	ldd	r24, Y+11	; 0x0b
    1444:	9c 85       	ldd	r25, Y+12	; 0x0c
    1446:	01 97       	sbiw	r24, 0x01	; 1
    1448:	9c 87       	std	Y+12, r25	; 0x0c
    144a:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    144c:	8b 85       	ldd	r24, Y+11	; 0x0b
    144e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1450:	89 2b       	or	r24, r25
    1452:	69 f7       	brne	.-38     	; 0x142e <main+0x172>
    1454:	14 c0       	rjmp	.+40     	; 0x147e <main+0x1c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1456:	6f 81       	ldd	r22, Y+7	; 0x07
    1458:	78 85       	ldd	r23, Y+8	; 0x08
    145a:	89 85       	ldd	r24, Y+9	; 0x09
    145c:	9a 85       	ldd	r25, Y+10	; 0x0a
    145e:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <__fixunssfsi>
    1462:	dc 01       	movw	r26, r24
    1464:	cb 01       	movw	r24, r22
    1466:	9c 87       	std	Y+12, r25	; 0x0c
    1468:	8b 87       	std	Y+11, r24	; 0x0b
    146a:	8b 85       	ldd	r24, Y+11	; 0x0b
    146c:	9c 85       	ldd	r25, Y+12	; 0x0c
    146e:	98 8b       	std	Y+16, r25	; 0x10
    1470:	8f 87       	std	Y+15, r24	; 0x0f
    1472:	8f 85       	ldd	r24, Y+15	; 0x0f
    1474:	98 89       	ldd	r25, Y+16	; 0x10
    1476:	01 97       	sbiw	r24, 0x01	; 1
    1478:	f1 f7       	brne	.-4      	; 0x1476 <main+0x1ba>
    147a:	98 8b       	std	Y+16, r25	; 0x10
    147c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10);
    }
    147e:	87 cf       	rjmp	.-242    	; 0x138e <main+0xd2>

00001480 <timer0_init>:
* WGM00 = 1, WGM01 = 0, WGM02 = 1 for Mode 5 (PWM, phase correct) from table 14-8
* COM0B0 = 0, COM0B1 = 1 to clear OC0B on compare match when up-counting. Set OC0B on compare match when
down-counting. Table 14-7. This is what is toggling OC0B, thus toggling PD5.
* CS00 = 1, CS01 = 0, CS02 = 0 for no prescaling from table 14-9
*/
void timer0_init() {
    1480:	cf 93       	push	r28
    1482:	df 93       	push	r29
    1484:	cd b7       	in	r28, 0x3d	; 61
    1486:	de b7       	in	r29, 0x3e	; 62
	// Set mode
	TCCR0A |= (1 << WGM00) | (1 << COM0B1); // Set timer to PWM, phase correct mode (mode 5), WGM00 = 1, WGM02 = 1
    1488:	84 e4       	ldi	r24, 0x44	; 68
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	24 e4       	ldi	r18, 0x44	; 68
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	f9 01       	movw	r30, r18
    1492:	20 81       	ld	r18, Z
    1494:	21 62       	ori	r18, 0x21	; 33
    1496:	fc 01       	movw	r30, r24
    1498:	20 83       	st	Z, r18
	
	// Set the prescaler
	TCCR0B = (1 << CS00) | (1 << WGM02); // No prescaling
    149a:	85 e4       	ldi	r24, 0x45	; 69
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	29 e0       	ldi	r18, 0x09	; 9
    14a0:	fc 01       	movw	r30, r24
    14a2:	20 83       	st	Z, r18
	
	// Set OCR0A to TOP value and OCR0B to COMPARE value
	OCR0A = TOP;
    14a4:	87 e4       	ldi	r24, 0x47	; 71
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <TOP>
    14ac:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <TOP+0x1>
    14b0:	fc 01       	movw	r30, r24
    14b2:	20 83       	st	Z, r18
	
	OCR0B = COMPARE;
    14b4:	88 e4       	ldi	r24, 0x48	; 72
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <COMPARE>
    14bc:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <COMPARE+0x1>
    14c0:	fc 01       	movw	r30, r24
    14c2:	20 83       	st	Z, r18

	// Enable overflow interrupt
	TIMSK0 |= (1 << TOIE0);
    14c4:	8e e6       	ldi	r24, 0x6E	; 110
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	2e e6       	ldi	r18, 0x6E	; 110
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	f9 01       	movw	r30, r18
    14ce:	20 81       	ld	r18, Z
    14d0:	21 60       	ori	r18, 0x01	; 1
    14d2:	fc 01       	movw	r30, r24
    14d4:	20 83       	st	Z, r18
	
	// Enable global interrupts
	sei();
    14d6:	78 94       	sei
}
    14d8:	00 00       	nop
    14da:	df 91       	pop	r29
    14dc:	cf 91       	pop	r28
    14de:	08 95       	ret

000014e0 <start16BitTimer>:

void start16BitTimer() {
    14e0:	cf 93       	push	r28
    14e2:	df 93       	push	r29
    14e4:	cd b7       	in	r28, 0x3d	; 61
    14e6:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = (1 << CS11);
    14e8:	81 e8       	ldi	r24, 0x81	; 129
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	22 e0       	ldi	r18, 0x02	; 2
    14ee:	fc 01       	movw	r30, r24
    14f0:	20 83       	st	Z, r18
}
    14f2:	00 00       	nop
    14f4:	df 91       	pop	r29
    14f6:	cf 91       	pop	r28
    14f8:	08 95       	ret

000014fa <stop16BitTimer>:

void stop16BitTimer() {
    14fa:	cf 93       	push	r28
    14fc:	df 93       	push	r29
    14fe:	cd b7       	in	r28, 0x3d	; 61
    1500:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = (1 << CS10);
    1502:	81 e8       	ldi	r24, 0x81	; 129
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	21 e0       	ldi	r18, 0x01	; 1
    1508:	fc 01       	movw	r30, r24
    150a:	20 83       	st	Z, r18
}
    150c:	00 00       	nop
    150e:	df 91       	pop	r29
    1510:	cf 91       	pop	r28
    1512:	08 95       	ret

00001514 <read_rpg>:

/*
* A function that reads the state of the RPG and updates COMPARE accordingly
*/
void read_rpg() {
    1514:	cf 93       	push	r28
    1516:	df 93       	push	r29
    1518:	1f 92       	push	r1
    151a:	cd b7       	in	r28, 0x3d	; 61
    151c:	de b7       	in	r29, 0x3e	; 62
	uint8_t encoder_new_state = RPG_PORT & ((1 << RPG_A_PIN) | (1 << RPG_B_PIN));
    151e:	83 e2       	ldi	r24, 0x23	; 35
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	fc 01       	movw	r30, r24
    1524:	80 81       	ld	r24, Z
    1526:	83 70       	andi	r24, 0x03	; 3
    1528:	89 83       	std	Y+1, r24	; 0x01

	if (encoder_new_state == encoder_old_state) return; // No change
    152a:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <encoder_old_state>
    152e:	99 81       	ldd	r25, Y+1	; 0x01
    1530:	98 17       	cp	r25, r24
    1532:	09 f4       	brne	.+2      	; 0x1536 <read_rpg+0x22>
    1534:	44 c0       	rjmp	.+136    	; 0x15be <read_rpg+0xaa>

	// Determine direction based on state changes
	if (((encoder_old_state == 0x00) && (encoder_new_state == 0x01)) ||
    1536:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <encoder_old_state>
    153a:	88 23       	and	r24, r24
    153c:	19 f4       	brne	.+6      	; 0x1544 <read_rpg+0x30>
    153e:	89 81       	ldd	r24, Y+1	; 0x01
    1540:	81 30       	cpi	r24, 0x01	; 1
    1542:	a9 f0       	breq	.+42     	; 0x156e <read_rpg+0x5a>
	((encoder_old_state == 0x01) && (encoder_new_state == 0x03)) ||
    1544:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <encoder_old_state>
	uint8_t encoder_new_state = RPG_PORT & ((1 << RPG_A_PIN) | (1 << RPG_B_PIN));

	if (encoder_new_state == encoder_old_state) return; // No change

	// Determine direction based on state changes
	if (((encoder_old_state == 0x00) && (encoder_new_state == 0x01)) ||
    1548:	81 30       	cpi	r24, 0x01	; 1
    154a:	19 f4       	brne	.+6      	; 0x1552 <read_rpg+0x3e>
	((encoder_old_state == 0x01) && (encoder_new_state == 0x03)) ||
    154c:	89 81       	ldd	r24, Y+1	; 0x01
    154e:	83 30       	cpi	r24, 0x03	; 3
    1550:	71 f0       	breq	.+28     	; 0x156e <read_rpg+0x5a>
	((encoder_old_state == 0x03) && (encoder_new_state == 0x02)) ||
    1552:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <encoder_old_state>

	if (encoder_new_state == encoder_old_state) return; // No change

	// Determine direction based on state changes
	if (((encoder_old_state == 0x00) && (encoder_new_state == 0x01)) ||
	((encoder_old_state == 0x01) && (encoder_new_state == 0x03)) ||
    1556:	83 30       	cpi	r24, 0x03	; 3
    1558:	19 f4       	brne	.+6      	; 0x1560 <read_rpg+0x4c>
	((encoder_old_state == 0x03) && (encoder_new_state == 0x02)) ||
    155a:	89 81       	ldd	r24, Y+1	; 0x01
    155c:	82 30       	cpi	r24, 0x02	; 2
    155e:	39 f0       	breq	.+14     	; 0x156e <read_rpg+0x5a>
	((encoder_old_state == 0x02) && (encoder_new_state == 0x00))) {
    1560:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <encoder_old_state>
	if (encoder_new_state == encoder_old_state) return; // No change

	// Determine direction based on state changes
	if (((encoder_old_state == 0x00) && (encoder_new_state == 0x01)) ||
	((encoder_old_state == 0x01) && (encoder_new_state == 0x03)) ||
	((encoder_old_state == 0x03) && (encoder_new_state == 0x02)) ||
    1564:	82 30       	cpi	r24, 0x02	; 2
    1566:	69 f4       	brne	.+26     	; 0x1582 <read_rpg+0x6e>
	((encoder_old_state == 0x02) && (encoder_new_state == 0x00))) {
    1568:	89 81       	ldd	r24, Y+1	; 0x01
    156a:	88 23       	and	r24, r24
    156c:	51 f4       	brne	.+20     	; 0x1582 <read_rpg+0x6e>
		COMPARE--;
    156e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <COMPARE>
    1572:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <COMPARE+0x1>
    1576:	01 97       	sbiw	r24, 0x01	; 1
    1578:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <COMPARE+0x1>
    157c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <COMPARE>
    1580:	09 c0       	rjmp	.+18     	; 0x1594 <read_rpg+0x80>
		} else {
		COMPARE++;
    1582:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <COMPARE>
    1586:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <COMPARE+0x1>
    158a:	01 96       	adiw	r24, 0x01	; 1
    158c:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <COMPARE+0x1>
    1590:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <COMPARE>
	}
	
	if (COMPARE > 200) COMPARE = 200;
    1594:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <COMPARE>
    1598:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <COMPARE+0x1>
    159c:	89 3c       	cpi	r24, 0xC9	; 201
    159e:	91 05       	cpc	r25, r1
    15a0:	30 f0       	brcs	.+12     	; 0x15ae <read_rpg+0x9a>
    15a2:	88 ec       	ldi	r24, 0xC8	; 200
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <COMPARE+0x1>
    15aa:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <COMPARE>
	if (COMPARE < 0) COMPARE = 0;
    15ae:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <COMPARE>
    15b2:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <COMPARE+0x1>

	encoder_old_state = encoder_new_state;
    15b6:	89 81       	ldd	r24, Y+1	; 0x01
    15b8:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <encoder_old_state>
    15bc:	01 c0       	rjmp	.+2      	; 0x15c0 <read_rpg+0xac>
* A function that reads the state of the RPG and updates COMPARE accordingly
*/
void read_rpg() {
	uint8_t encoder_new_state = RPG_PORT & ((1 << RPG_A_PIN) | (1 << RPG_B_PIN));

	if (encoder_new_state == encoder_old_state) return; // No change
    15be:	00 00       	nop
	
	if (COMPARE > 200) COMPARE = 200;
	if (COMPARE < 0) COMPARE = 0;

	encoder_old_state = encoder_new_state;
}
    15c0:	0f 90       	pop	r0
    15c2:	df 91       	pop	r29
    15c4:	cf 91       	pop	r28
    15c6:	08 95       	ret

000015c8 <display_to_LCD>:

void display_to_LCD() {
    15c8:	cf 92       	push	r12
    15ca:	df 92       	push	r13
    15cc:	ef 92       	push	r14
    15ce:	ff 92       	push	r15
    15d0:	cf 93       	push	r28
    15d2:	df 93       	push	r29
    15d4:	cd b7       	in	r28, 0x3d	; 61
    15d6:	de b7       	in	r29, 0x3e	; 62
    15d8:	e4 97       	sbiw	r28, 0x34	; 52
    15da:	0f b6       	in	r0, 0x3f	; 63
    15dc:	f8 94       	cli
    15de:	de bf       	out	0x3e, r29	; 62
    15e0:	0f be       	out	0x3f, r0	; 63
    15e2:	cd bf       	out	0x3d, r28	; 61
	clear();
    15e4:	0e 94 c5 08 	call	0x118a	; 0x118a <clear>
	home();
    15e8:	0e 94 b6 08 	call	0x116c	; 0x116c <home>
	
	float t;
	t = pulse_count * (1e-6);
    15ec:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <pulse_count>
    15f0:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <pulse_count+0x1>
    15f4:	cc 01       	movw	r24, r24
    15f6:	a0 e0       	ldi	r26, 0x00	; 0
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	bc 01       	movw	r22, r24
    15fc:	cd 01       	movw	r24, r26
    15fe:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <__floatunsisf>
    1602:	dc 01       	movw	r26, r24
    1604:	cb 01       	movw	r24, r22
    1606:	2d eb       	ldi	r18, 0xBD	; 189
    1608:	37 e3       	ldi	r19, 0x37	; 55
    160a:	46 e8       	ldi	r20, 0x86	; 134
    160c:	55 e3       	ldi	r21, 0x35	; 53
    160e:	bc 01       	movw	r22, r24
    1610:	cd 01       	movw	r24, r26
    1612:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__mulsf3>
    1616:	dc 01       	movw	r26, r24
    1618:	cb 01       	movw	r24, r22
    161a:	89 83       	std	Y+1, r24	; 0x01
    161c:	9a 83       	std	Y+2, r25	; 0x02
    161e:	ab 83       	std	Y+3, r26	; 0x03
    1620:	bc 83       	std	Y+4, r27	; 0x04
	t = t * 4.0;
    1622:	20 e0       	ldi	r18, 0x00	; 0
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	40 e8       	ldi	r20, 0x80	; 128
    1628:	50 e4       	ldi	r21, 0x40	; 64
    162a:	69 81       	ldd	r22, Y+1	; 0x01
    162c:	7a 81       	ldd	r23, Y+2	; 0x02
    162e:	8b 81       	ldd	r24, Y+3	; 0x03
    1630:	9c 81       	ldd	r25, Y+4	; 0x04
    1632:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__mulsf3>
    1636:	dc 01       	movw	r26, r24
    1638:	cb 01       	movw	r24, r22
    163a:	89 83       	std	Y+1, r24	; 0x01
    163c:	9a 83       	std	Y+2, r25	; 0x02
    163e:	ab 83       	std	Y+3, r26	; 0x03
    1640:	bc 83       	std	Y+4, r27	; 0x04
	float rpm = (60.0 / t);
    1642:	29 81       	ldd	r18, Y+1	; 0x01
    1644:	3a 81       	ldd	r19, Y+2	; 0x02
    1646:	4b 81       	ldd	r20, Y+3	; 0x03
    1648:	5c 81       	ldd	r21, Y+4	; 0x04
    164a:	60 e0       	ldi	r22, 0x00	; 0
    164c:	70 e0       	ldi	r23, 0x00	; 0
    164e:	80 e7       	ldi	r24, 0x70	; 112
    1650:	92 e4       	ldi	r25, 0x42	; 66
    1652:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <__divsf3>
    1656:	dc 01       	movw	r26, r24
    1658:	cb 01       	movw	r24, r22
    165a:	8d 83       	std	Y+5, r24	; 0x05
    165c:	9e 83       	std	Y+6, r25	; 0x06
    165e:	af 83       	std	Y+7, r26	; 0x07
    1660:	b8 87       	std	Y+8, r27	; 0x08
	char str_rpm[20];
	sprintf(str_rpm, "RPM = %4.0f", rpm);
    1662:	88 85       	ldd	r24, Y+8	; 0x08
    1664:	8f 93       	push	r24
    1666:	8f 81       	ldd	r24, Y+7	; 0x07
    1668:	8f 93       	push	r24
    166a:	8e 81       	ldd	r24, Y+6	; 0x06
    166c:	8f 93       	push	r24
    166e:	8d 81       	ldd	r24, Y+5	; 0x05
    1670:	8f 93       	push	r24
    1672:	84 e1       	ldi	r24, 0x14	; 20
    1674:	91 e0       	ldi	r25, 0x01	; 1
    1676:	89 2f       	mov	r24, r25
    1678:	8f 93       	push	r24
    167a:	84 e1       	ldi	r24, 0x14	; 20
    167c:	91 e0       	ldi	r25, 0x01	; 1
    167e:	8f 93       	push	r24
    1680:	ce 01       	movw	r24, r28
    1682:	0d 96       	adiw	r24, 0x0d	; 13
    1684:	29 2f       	mov	r18, r25
    1686:	2f 93       	push	r18
    1688:	8f 93       	push	r24
    168a:	0e 94 55 14 	call	0x28aa	; 0x28aa <sprintf>
    168e:	8d b7       	in	r24, 0x3d	; 61
    1690:	9e b7       	in	r25, 0x3e	; 62
    1692:	08 96       	adiw	r24, 0x08	; 8
    1694:	0f b6       	in	r0, 0x3f	; 63
    1696:	f8 94       	cli
    1698:	de bf       	out	0x3e, r29	; 62
    169a:	0f be       	out	0x3f, r0	; 63
    169c:	cd bf       	out	0x3d, r28	; 61
	printf("%s", str_rpm);
    169e:	ce 01       	movw	r24, r28
    16a0:	0d 96       	adiw	r24, 0x0d	; 13
    16a2:	29 2f       	mov	r18, r25
    16a4:	2f 93       	push	r18
    16a6:	8f 93       	push	r24
    16a8:	80 e2       	ldi	r24, 0x20	; 32
    16aa:	91 e0       	ldi	r25, 0x01	; 1
    16ac:	89 2f       	mov	r24, r25
    16ae:	8f 93       	push	r24
    16b0:	80 e2       	ldi	r24, 0x20	; 32
    16b2:	91 e0       	ldi	r25, 0x01	; 1
    16b4:	8f 93       	push	r24
    16b6:	0e 94 3f 14 	call	0x287e	; 0x287e <printf>
    16ba:	0f 90       	pop	r0
    16bc:	0f 90       	pop	r0
    16be:	0f 90       	pop	r0
    16c0:	0f 90       	pop	r0
	
	float dutyCycle = (100.0 * ((float) ((2 * (float) COMPARE + 1) / (2 * TOP)))) - 0.25;
    16c2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <COMPARE>
    16c6:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <COMPARE+0x1>
    16ca:	cc 01       	movw	r24, r24
    16cc:	a0 e0       	ldi	r26, 0x00	; 0
    16ce:	b0 e0       	ldi	r27, 0x00	; 0
    16d0:	bc 01       	movw	r22, r24
    16d2:	cd 01       	movw	r24, r26
    16d4:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <__floatunsisf>
    16d8:	dc 01       	movw	r26, r24
    16da:	cb 01       	movw	r24, r22
    16dc:	9c 01       	movw	r18, r24
    16de:	ad 01       	movw	r20, r26
    16e0:	bc 01       	movw	r22, r24
    16e2:	cd 01       	movw	r24, r26
    16e4:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <__addsf3>
    16e8:	dc 01       	movw	r26, r24
    16ea:	cb 01       	movw	r24, r22
    16ec:	20 e0       	ldi	r18, 0x00	; 0
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	40 e8       	ldi	r20, 0x80	; 128
    16f2:	5f e3       	ldi	r21, 0x3F	; 63
    16f4:	bc 01       	movw	r22, r24
    16f6:	cd 01       	movw	r24, r26
    16f8:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <__addsf3>
    16fc:	dc 01       	movw	r26, r24
    16fe:	cb 01       	movw	r24, r22
    1700:	6c 01       	movw	r12, r24
    1702:	7d 01       	movw	r14, r26
    1704:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <TOP>
    1708:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <TOP+0x1>
    170c:	88 0f       	add	r24, r24
    170e:	99 1f       	adc	r25, r25
    1710:	cc 01       	movw	r24, r24
    1712:	a0 e0       	ldi	r26, 0x00	; 0
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	bc 01       	movw	r22, r24
    1718:	cd 01       	movw	r24, r26
    171a:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <__floatunsisf>
    171e:	dc 01       	movw	r26, r24
    1720:	cb 01       	movw	r24, r22
    1722:	9c 01       	movw	r18, r24
    1724:	ad 01       	movw	r20, r26
    1726:	c7 01       	movw	r24, r14
    1728:	b6 01       	movw	r22, r12
    172a:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <__divsf3>
    172e:	dc 01       	movw	r26, r24
    1730:	cb 01       	movw	r24, r22
    1732:	20 e0       	ldi	r18, 0x00	; 0
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	48 ec       	ldi	r20, 0xC8	; 200
    1738:	52 e4       	ldi	r21, 0x42	; 66
    173a:	bc 01       	movw	r22, r24
    173c:	cd 01       	movw	r24, r26
    173e:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__mulsf3>
    1742:	dc 01       	movw	r26, r24
    1744:	cb 01       	movw	r24, r22
    1746:	20 e0       	ldi	r18, 0x00	; 0
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	40 e8       	ldi	r20, 0x80	; 128
    174c:	5e e3       	ldi	r21, 0x3E	; 62
    174e:	bc 01       	movw	r22, r24
    1750:	cd 01       	movw	r24, r26
    1752:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__subsf3>
    1756:	dc 01       	movw	r26, r24
    1758:	cb 01       	movw	r24, r22
    175a:	89 87       	std	Y+9, r24	; 0x09
    175c:	9a 87       	std	Y+10, r25	; 0x0a
    175e:	ab 87       	std	Y+11, r26	; 0x0b
    1760:	bc 87       	std	Y+12, r27	; 0x0c
	
	if (displayMode == 0) {
    1762:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <displayMode>
    1766:	88 23       	and	r24, r24
    1768:	09 f0       	breq	.+2      	; 0x176c <display_to_LCD+0x1a4>
    176a:	4f c0       	rjmp	.+158    	; 0x180a <display_to_LCD+0x242>
		row2();
    176c:	0e 94 db 08 	call	0x11b6	; 0x11b6 <row2>
		char str_duty[20];
		
		if (dutyCycle < 12.0) {
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	40 e4       	ldi	r20, 0x40	; 64
    1776:	51 e4       	ldi	r21, 0x41	; 65
    1778:	69 85       	ldd	r22, Y+9	; 0x09
    177a:	7a 85       	ldd	r23, Y+10	; 0x0a
    177c:	8b 85       	ldd	r24, Y+11	; 0x0b
    177e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1780:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__cmpsf2>
    1784:	88 23       	and	r24, r24
    1786:	74 f4       	brge	.+28     	; 0x17a4 <display_to_LCD+0x1dc>
			sound_buzzer();
    1788:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <sound_buzzer>
			printf("Fan Stalled");
    178c:	83 e2       	ldi	r24, 0x23	; 35
    178e:	91 e0       	ldi	r25, 0x01	; 1
    1790:	89 2f       	mov	r24, r25
    1792:	8f 93       	push	r24
    1794:	83 e2       	ldi	r24, 0x23	; 35
    1796:	91 e0       	ldi	r25, 0x01	; 1
    1798:	8f 93       	push	r24
    179a:	0e 94 3f 14 	call	0x287e	; 0x287e <printf>
    179e:	0f 90       	pop	r0
    17a0:	0f 90       	pop	r0
			} else {
				printf("Fan OK");
			}
		}
	}
}
    17a2:	74 c0       	rjmp	.+232    	; 0x188c <display_to_LCD+0x2c4>
		
		if (dutyCycle < 12.0) {
			sound_buzzer();
			printf("Fan Stalled");
		} else {
			mute_buzzer();
    17a4:	0e 94 65 0c 	call	0x18ca	; 0x18ca <mute_buzzer>
			sprintf(str_duty, "D = %4.2f", dutyCycle);
    17a8:	8c 85       	ldd	r24, Y+12	; 0x0c
    17aa:	8f 93       	push	r24
    17ac:	8b 85       	ldd	r24, Y+11	; 0x0b
    17ae:	8f 93       	push	r24
    17b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    17b2:	8f 93       	push	r24
    17b4:	89 85       	ldd	r24, Y+9	; 0x09
    17b6:	8f 93       	push	r24
    17b8:	8f e2       	ldi	r24, 0x2F	; 47
    17ba:	91 e0       	ldi	r25, 0x01	; 1
    17bc:	89 2f       	mov	r24, r25
    17be:	8f 93       	push	r24
    17c0:	8f e2       	ldi	r24, 0x2F	; 47
    17c2:	91 e0       	ldi	r25, 0x01	; 1
    17c4:	8f 93       	push	r24
    17c6:	ce 01       	movw	r24, r28
    17c8:	81 96       	adiw	r24, 0x21	; 33
    17ca:	29 2f       	mov	r18, r25
    17cc:	2f 93       	push	r18
    17ce:	8f 93       	push	r24
    17d0:	0e 94 55 14 	call	0x28aa	; 0x28aa <sprintf>
    17d4:	8d b7       	in	r24, 0x3d	; 61
    17d6:	9e b7       	in	r25, 0x3e	; 62
    17d8:	08 96       	adiw	r24, 0x08	; 8
    17da:	0f b6       	in	r0, 0x3f	; 63
    17dc:	f8 94       	cli
    17de:	de bf       	out	0x3e, r29	; 62
    17e0:	0f be       	out	0x3f, r0	; 63
    17e2:	cd bf       	out	0x3d, r28	; 61
			printf("%s", str_duty);
    17e4:	ce 01       	movw	r24, r28
    17e6:	81 96       	adiw	r24, 0x21	; 33
    17e8:	29 2f       	mov	r18, r25
    17ea:	2f 93       	push	r18
    17ec:	8f 93       	push	r24
    17ee:	80 e2       	ldi	r24, 0x20	; 32
    17f0:	91 e0       	ldi	r25, 0x01	; 1
    17f2:	89 2f       	mov	r24, r25
    17f4:	8f 93       	push	r24
    17f6:	80 e2       	ldi	r24, 0x20	; 32
    17f8:	91 e0       	ldi	r25, 0x01	; 1
    17fa:	8f 93       	push	r24
    17fc:	0e 94 3f 14 	call	0x287e	; 0x287e <printf>
    1800:	0f 90       	pop	r0
    1802:	0f 90       	pop	r0
    1804:	0f 90       	pop	r0
    1806:	0f 90       	pop	r0
			} else {
				printf("Fan OK");
			}
		}
	}
}
    1808:	41 c0       	rjmp	.+130    	; 0x188c <display_to_LCD+0x2c4>
			mute_buzzer();
			sprintf(str_duty, "D = %4.2f", dutyCycle);
			printf("%s", str_duty);
		}
	} else {
		row2();
    180a:	0e 94 db 08 	call	0x11b6	; 0x11b6 <row2>
		
		if (dutyCycle < 12.0) {
    180e:	20 e0       	ldi	r18, 0x00	; 0
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	40 e4       	ldi	r20, 0x40	; 64
    1814:	51 e4       	ldi	r21, 0x41	; 65
    1816:	69 85       	ldd	r22, Y+9	; 0x09
    1818:	7a 85       	ldd	r23, Y+10	; 0x0a
    181a:	8b 85       	ldd	r24, Y+11	; 0x0b
    181c:	9c 85       	ldd	r25, Y+12	; 0x0c
    181e:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__cmpsf2>
    1822:	88 23       	and	r24, r24
    1824:	74 f4       	brge	.+28     	; 0x1842 <display_to_LCD+0x27a>
			sound_buzzer();
    1826:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <sound_buzzer>
			printf("Fan Stalled");
    182a:	83 e2       	ldi	r24, 0x23	; 35
    182c:	91 e0       	ldi	r25, 0x01	; 1
    182e:	89 2f       	mov	r24, r25
    1830:	8f 93       	push	r24
    1832:	83 e2       	ldi	r24, 0x23	; 35
    1834:	91 e0       	ldi	r25, 0x01	; 1
    1836:	8f 93       	push	r24
    1838:	0e 94 3f 14 	call	0x287e	; 0x287e <printf>
    183c:	0f 90       	pop	r0
    183e:	0f 90       	pop	r0
			} else {
				printf("Fan OK");
			}
		}
	}
}
    1840:	25 c0       	rjmp	.+74     	; 0x188c <display_to_LCD+0x2c4>
		
		if (dutyCycle < 12.0) {
			sound_buzzer();
			printf("Fan Stalled");
		} else {
			mute_buzzer();
    1842:	0e 94 65 0c 	call	0x18ca	; 0x18ca <mute_buzzer>
			if (rpm < 2400) {
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	46 e1       	ldi	r20, 0x16	; 22
    184c:	55 e4       	ldi	r21, 0x45	; 69
    184e:	6d 81       	ldd	r22, Y+5	; 0x05
    1850:	7e 81       	ldd	r23, Y+6	; 0x06
    1852:	8f 81       	ldd	r24, Y+7	; 0x07
    1854:	98 85       	ldd	r25, Y+8	; 0x08
    1856:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__cmpsf2>
    185a:	88 23       	and	r24, r24
    185c:	64 f4       	brge	.+24     	; 0x1876 <display_to_LCD+0x2ae>
				printf("Low RPM");
    185e:	89 e3       	ldi	r24, 0x39	; 57
    1860:	91 e0       	ldi	r25, 0x01	; 1
    1862:	89 2f       	mov	r24, r25
    1864:	8f 93       	push	r24
    1866:	89 e3       	ldi	r24, 0x39	; 57
    1868:	91 e0       	ldi	r25, 0x01	; 1
    186a:	8f 93       	push	r24
    186c:	0e 94 3f 14 	call	0x287e	; 0x287e <printf>
    1870:	0f 90       	pop	r0
    1872:	0f 90       	pop	r0
			} else {
				printf("Fan OK");
			}
		}
	}
}
    1874:	0b c0       	rjmp	.+22     	; 0x188c <display_to_LCD+0x2c4>
		} else {
			mute_buzzer();
			if (rpm < 2400) {
				printf("Low RPM");
			} else {
				printf("Fan OK");
    1876:	81 e4       	ldi	r24, 0x41	; 65
    1878:	91 e0       	ldi	r25, 0x01	; 1
    187a:	89 2f       	mov	r24, r25
    187c:	8f 93       	push	r24
    187e:	81 e4       	ldi	r24, 0x41	; 65
    1880:	91 e0       	ldi	r25, 0x01	; 1
    1882:	8f 93       	push	r24
    1884:	0e 94 3f 14 	call	0x287e	; 0x287e <printf>
    1888:	0f 90       	pop	r0
    188a:	0f 90       	pop	r0
			}
		}
	}
}
    188c:	00 00       	nop
    188e:	e4 96       	adiw	r28, 0x34	; 52
    1890:	0f b6       	in	r0, 0x3f	; 63
    1892:	f8 94       	cli
    1894:	de bf       	out	0x3e, r29	; 62
    1896:	0f be       	out	0x3f, r0	; 63
    1898:	cd bf       	out	0x3d, r28	; 61
    189a:	df 91       	pop	r29
    189c:	cf 91       	pop	r28
    189e:	ff 90       	pop	r15
    18a0:	ef 90       	pop	r14
    18a2:	df 90       	pop	r13
    18a4:	cf 90       	pop	r12
    18a6:	08 95       	ret

000018a8 <sound_buzzer>:

void sound_buzzer() {
    18a8:	cf 93       	push	r28
    18aa:	df 93       	push	r29
    18ac:	cd b7       	in	r28, 0x3d	; 61
    18ae:	de b7       	in	r29, 0x3e	; 62
	PORTC |= (1 << 4);
    18b0:	88 e2       	ldi	r24, 0x28	; 40
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	28 e2       	ldi	r18, 0x28	; 40
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	f9 01       	movw	r30, r18
    18ba:	20 81       	ld	r18, Z
    18bc:	20 61       	ori	r18, 0x10	; 16
    18be:	fc 01       	movw	r30, r24
    18c0:	20 83       	st	Z, r18
}
    18c2:	00 00       	nop
    18c4:	df 91       	pop	r29
    18c6:	cf 91       	pop	r28
    18c8:	08 95       	ret

000018ca <mute_buzzer>:

void mute_buzzer() {
    18ca:	cf 93       	push	r28
    18cc:	df 93       	push	r29
    18ce:	cd b7       	in	r28, 0x3d	; 61
    18d0:	de b7       	in	r29, 0x3e	; 62
	PORTC &= ~(1 << 4);
    18d2:	88 e2       	ldi	r24, 0x28	; 40
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	28 e2       	ldi	r18, 0x28	; 40
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	f9 01       	movw	r30, r18
    18dc:	20 81       	ld	r18, Z
    18de:	2f 7e       	andi	r18, 0xEF	; 239
    18e0:	fc 01       	movw	r30, r24
    18e2:	20 83       	st	Z, r18
}
    18e4:	00 00       	nop
    18e6:	df 91       	pop	r29
    18e8:	cf 91       	pop	r28
    18ea:	08 95       	ret

000018ec <handleButtonPress>:

void handleButtonPress() {
    18ec:	cf 93       	push	r28
    18ee:	df 93       	push	r29
    18f0:	cd b7       	in	r28, 0x3d	; 61
    18f2:	de b7       	in	r29, 0x3e	; 62
	if (displayMode == 0) displayMode = 1;
    18f4:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <displayMode>
    18f8:	88 23       	and	r24, r24
    18fa:	21 f4       	brne	.+8      	; 0x1904 <handleButtonPress+0x18>
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <displayMode>
	else if (displayMode == 1) displayMode = 0;
}
    1902:	06 c0       	rjmp	.+12     	; 0x1910 <handleButtonPress+0x24>
	PORTC &= ~(1 << 4);
}

void handleButtonPress() {
	if (displayMode == 0) displayMode = 1;
	else if (displayMode == 1) displayMode = 0;
    1904:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <displayMode>
    1908:	81 30       	cpi	r24, 0x01	; 1
    190a:	11 f4       	brne	.+4      	; 0x1910 <handleButtonPress+0x24>
    190c:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <displayMode>
}
    1910:	00 00       	nop
    1912:	df 91       	pop	r29
    1914:	cf 91       	pop	r28
    1916:	08 95       	ret

00001918 <checkIfButtonIsPressed>:

void checkIfButtonIsPressed() {
    1918:	cf 93       	push	r28
    191a:	df 93       	push	r29
    191c:	cd b7       	in	r28, 0x3d	; 61
    191e:	de b7       	in	r29, 0x3e	; 62
    1920:	2e 97       	sbiw	r28, 0x0e	; 14
    1922:	0f b6       	in	r0, 0x3f	; 63
    1924:	f8 94       	cli
    1926:	de bf       	out	0x3e, r29	; 62
    1928:	0f be       	out	0x3f, r0	; 63
    192a:	cd bf       	out	0x3d, r28	; 61
	 if (!(PIND & (1 << PIND2))) {
    192c:	89 e2       	ldi	r24, 0x29	; 41
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	fc 01       	movw	r30, r24
    1932:	80 81       	ld	r24, Z
    1934:	88 2f       	mov	r24, r24
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	84 70       	andi	r24, 0x04	; 4
    193a:	99 27       	eor	r25, r25
    193c:	89 2b       	or	r24, r25
    193e:	09 f0       	breq	.+2      	; 0x1942 <checkIfButtonIsPressed+0x2a>
    1940:	7d c0       	rjmp	.+250    	; 0x1a3c <checkIfButtonIsPressed+0x124>
		 if (!buttonWasPressed) { // Button is pressed now, but wasn't pressed before
    1942:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <buttonWasPressed>
    1946:	88 23       	and	r24, r24
    1948:	09 f0       	breq	.+2      	; 0x194c <checkIfButtonIsPressed+0x34>
    194a:	7a c0       	rjmp	.+244    	; 0x1a40 <checkIfButtonIsPressed+0x128>
			 buttonWasPressed = 1; // Update flag to indicate the button is pressed
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <buttonWasPressed>
			 
			 handleButtonPress();
    1952:	0e 94 76 0c 	call	0x18ec	; 0x18ec <handleButtonPress>
    1956:	80 e0       	ldi	r24, 0x00	; 0
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	a0 ea       	ldi	r26, 0xA0	; 160
    195c:	b0 e4       	ldi	r27, 0x40	; 64
    195e:	89 83       	std	Y+1, r24	; 0x01
    1960:	9a 83       	std	Y+2, r25	; 0x02
    1962:	ab 83       	std	Y+3, r26	; 0x03
    1964:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	4a e7       	ldi	r20, 0x7A	; 122
    196c:	55 e4       	ldi	r21, 0x45	; 69
    196e:	69 81       	ldd	r22, Y+1	; 0x01
    1970:	7a 81       	ldd	r23, Y+2	; 0x02
    1972:	8b 81       	ldd	r24, Y+3	; 0x03
    1974:	9c 81       	ldd	r25, Y+4	; 0x04
    1976:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__mulsf3>
    197a:	dc 01       	movw	r26, r24
    197c:	cb 01       	movw	r24, r22
    197e:	8d 83       	std	Y+5, r24	; 0x05
    1980:	9e 83       	std	Y+6, r25	; 0x06
    1982:	af 83       	std	Y+7, r26	; 0x07
    1984:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1986:	20 e0       	ldi	r18, 0x00	; 0
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	40 e8       	ldi	r20, 0x80	; 128
    198c:	5f e3       	ldi	r21, 0x3F	; 63
    198e:	6d 81       	ldd	r22, Y+5	; 0x05
    1990:	7e 81       	ldd	r23, Y+6	; 0x06
    1992:	8f 81       	ldd	r24, Y+7	; 0x07
    1994:	98 85       	ldd	r25, Y+8	; 0x08
    1996:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <__cmpsf2>
    199a:	88 23       	and	r24, r24
    199c:	2c f4       	brge	.+10     	; 0x19a8 <checkIfButtonIsPressed+0x90>
		__ticks = 1;
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	9a 87       	std	Y+10, r25	; 0x0a
    19a4:	89 87       	std	Y+9, r24	; 0x09
    19a6:	3f c0       	rjmp	.+126    	; 0x1a26 <checkIfButtonIsPressed+0x10e>
	else if (__tmp > 65535)
    19a8:	20 e0       	ldi	r18, 0x00	; 0
    19aa:	3f ef       	ldi	r19, 0xFF	; 255
    19ac:	4f e7       	ldi	r20, 0x7F	; 127
    19ae:	57 e4       	ldi	r21, 0x47	; 71
    19b0:	6d 81       	ldd	r22, Y+5	; 0x05
    19b2:	7e 81       	ldd	r23, Y+6	; 0x06
    19b4:	8f 81       	ldd	r24, Y+7	; 0x07
    19b6:	98 85       	ldd	r25, Y+8	; 0x08
    19b8:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__gesf2>
    19bc:	18 16       	cp	r1, r24
    19be:	4c f5       	brge	.+82     	; 0x1a12 <checkIfButtonIsPressed+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19c0:	20 e0       	ldi	r18, 0x00	; 0
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	40 e2       	ldi	r20, 0x20	; 32
    19c6:	51 e4       	ldi	r21, 0x41	; 65
    19c8:	69 81       	ldd	r22, Y+1	; 0x01
    19ca:	7a 81       	ldd	r23, Y+2	; 0x02
    19cc:	8b 81       	ldd	r24, Y+3	; 0x03
    19ce:	9c 81       	ldd	r25, Y+4	; 0x04
    19d0:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__mulsf3>
    19d4:	dc 01       	movw	r26, r24
    19d6:	cb 01       	movw	r24, r22
    19d8:	bc 01       	movw	r22, r24
    19da:	cd 01       	movw	r24, r26
    19dc:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <__fixunssfsi>
    19e0:	dc 01       	movw	r26, r24
    19e2:	cb 01       	movw	r24, r22
    19e4:	9a 87       	std	Y+10, r25	; 0x0a
    19e6:	89 87       	std	Y+9, r24	; 0x09
    19e8:	0f c0       	rjmp	.+30     	; 0x1a08 <checkIfButtonIsPressed+0xf0>
    19ea:	80 e9       	ldi	r24, 0x90	; 144
    19ec:	91 e0       	ldi	r25, 0x01	; 1
    19ee:	9c 87       	std	Y+12, r25	; 0x0c
    19f0:	8b 87       	std	Y+11, r24	; 0x0b
    19f2:	8b 85       	ldd	r24, Y+11	; 0x0b
    19f4:	9c 85       	ldd	r25, Y+12	; 0x0c
    19f6:	01 97       	sbiw	r24, 0x01	; 1
    19f8:	f1 f7       	brne	.-4      	; 0x19f6 <checkIfButtonIsPressed+0xde>
    19fa:	9c 87       	std	Y+12, r25	; 0x0c
    19fc:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19fe:	89 85       	ldd	r24, Y+9	; 0x09
    1a00:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a02:	01 97       	sbiw	r24, 0x01	; 1
    1a04:	9a 87       	std	Y+10, r25	; 0x0a
    1a06:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a08:	89 85       	ldd	r24, Y+9	; 0x09
    1a0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a0c:	89 2b       	or	r24, r25
    1a0e:	69 f7       	brne	.-38     	; 0x19ea <checkIfButtonIsPressed+0xd2>
			 _delay_ms(5);
		 }
	 } else {
		 buttonWasPressed = 0;
	 }
    1a10:	17 c0       	rjmp	.+46     	; 0x1a40 <checkIfButtonIsPressed+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a12:	6d 81       	ldd	r22, Y+5	; 0x05
    1a14:	7e 81       	ldd	r23, Y+6	; 0x06
    1a16:	8f 81       	ldd	r24, Y+7	; 0x07
    1a18:	98 85       	ldd	r25, Y+8	; 0x08
    1a1a:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <__fixunssfsi>
    1a1e:	dc 01       	movw	r26, r24
    1a20:	cb 01       	movw	r24, r22
    1a22:	9a 87       	std	Y+10, r25	; 0x0a
    1a24:	89 87       	std	Y+9, r24	; 0x09
    1a26:	89 85       	ldd	r24, Y+9	; 0x09
    1a28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a2a:	9e 87       	std	Y+14, r25	; 0x0e
    1a2c:	8d 87       	std	Y+13, r24	; 0x0d
    1a2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a30:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a32:	01 97       	sbiw	r24, 0x01	; 1
    1a34:	f1 f7       	brne	.-4      	; 0x1a32 <checkIfButtonIsPressed+0x11a>
    1a36:	9e 87       	std	Y+14, r25	; 0x0e
    1a38:	8d 87       	std	Y+13, r24	; 0x0d
    1a3a:	02 c0       	rjmp	.+4      	; 0x1a40 <checkIfButtonIsPressed+0x128>

			 // Debounce delay
			 _delay_ms(5);
		 }
	 } else {
		 buttonWasPressed = 0;
    1a3c:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <buttonWasPressed>
	 }
    1a40:	00 00       	nop
    1a42:	2e 96       	adiw	r28, 0x0e	; 14
    1a44:	0f b6       	in	r0, 0x3f	; 63
    1a46:	f8 94       	cli
    1a48:	de bf       	out	0x3e, r29	; 62
    1a4a:	0f be       	out	0x3f, r0	; 63
    1a4c:	cd bf       	out	0x3d, r28	; 61
    1a4e:	df 91       	pop	r29
    1a50:	cf 91       	pop	r28
    1a52:	08 95       	ret

00001a54 <__subsf3>:
    1a54:	50 58       	subi	r21, 0x80	; 128

00001a56 <__addsf3>:
    1a56:	bb 27       	eor	r27, r27
    1a58:	aa 27       	eor	r26, r26
    1a5a:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <__addsf3x>
    1a5e:	0c 94 b5 0e 	jmp	0x1d6a	; 0x1d6a <__fp_round>
    1a62:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <__fp_pscA>
    1a66:	38 f0       	brcs	.+14     	; 0x1a76 <__addsf3+0x20>
    1a68:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <__fp_pscB>
    1a6c:	20 f0       	brcs	.+8      	; 0x1a76 <__addsf3+0x20>
    1a6e:	39 f4       	brne	.+14     	; 0x1a7e <__addsf3+0x28>
    1a70:	9f 3f       	cpi	r25, 0xFF	; 255
    1a72:	19 f4       	brne	.+6      	; 0x1a7a <__addsf3+0x24>
    1a74:	26 f4       	brtc	.+8      	; 0x1a7e <__addsf3+0x28>
    1a76:	0c 94 a4 0e 	jmp	0x1d48	; 0x1d48 <__fp_nan>
    1a7a:	0e f4       	brtc	.+2      	; 0x1a7e <__addsf3+0x28>
    1a7c:	e0 95       	com	r30
    1a7e:	e7 fb       	bst	r30, 7
    1a80:	0c 94 9e 0e 	jmp	0x1d3c	; 0x1d3c <__fp_inf>

00001a84 <__addsf3x>:
    1a84:	e9 2f       	mov	r30, r25
    1a86:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <__fp_split3>
    1a8a:	58 f3       	brcs	.-42     	; 0x1a62 <__addsf3+0xc>
    1a8c:	ba 17       	cp	r27, r26
    1a8e:	62 07       	cpc	r22, r18
    1a90:	73 07       	cpc	r23, r19
    1a92:	84 07       	cpc	r24, r20
    1a94:	95 07       	cpc	r25, r21
    1a96:	20 f0       	brcs	.+8      	; 0x1aa0 <__addsf3x+0x1c>
    1a98:	79 f4       	brne	.+30     	; 0x1ab8 <__addsf3x+0x34>
    1a9a:	a6 f5       	brtc	.+104    	; 0x1b04 <__addsf3x+0x80>
    1a9c:	0c 94 e8 0e 	jmp	0x1dd0	; 0x1dd0 <__fp_zero>
    1aa0:	0e f4       	brtc	.+2      	; 0x1aa4 <__addsf3x+0x20>
    1aa2:	e0 95       	com	r30
    1aa4:	0b 2e       	mov	r0, r27
    1aa6:	ba 2f       	mov	r27, r26
    1aa8:	a0 2d       	mov	r26, r0
    1aaa:	0b 01       	movw	r0, r22
    1aac:	b9 01       	movw	r22, r18
    1aae:	90 01       	movw	r18, r0
    1ab0:	0c 01       	movw	r0, r24
    1ab2:	ca 01       	movw	r24, r20
    1ab4:	a0 01       	movw	r20, r0
    1ab6:	11 24       	eor	r1, r1
    1ab8:	ff 27       	eor	r31, r31
    1aba:	59 1b       	sub	r21, r25
    1abc:	99 f0       	breq	.+38     	; 0x1ae4 <__addsf3x+0x60>
    1abe:	59 3f       	cpi	r21, 0xF9	; 249
    1ac0:	50 f4       	brcc	.+20     	; 0x1ad6 <__addsf3x+0x52>
    1ac2:	50 3e       	cpi	r21, 0xE0	; 224
    1ac4:	68 f1       	brcs	.+90     	; 0x1b20 <__addsf3x+0x9c>
    1ac6:	1a 16       	cp	r1, r26
    1ac8:	f0 40       	sbci	r31, 0x00	; 0
    1aca:	a2 2f       	mov	r26, r18
    1acc:	23 2f       	mov	r18, r19
    1ace:	34 2f       	mov	r19, r20
    1ad0:	44 27       	eor	r20, r20
    1ad2:	58 5f       	subi	r21, 0xF8	; 248
    1ad4:	f3 cf       	rjmp	.-26     	; 0x1abc <__addsf3x+0x38>
    1ad6:	46 95       	lsr	r20
    1ad8:	37 95       	ror	r19
    1ada:	27 95       	ror	r18
    1adc:	a7 95       	ror	r26
    1ade:	f0 40       	sbci	r31, 0x00	; 0
    1ae0:	53 95       	inc	r21
    1ae2:	c9 f7       	brne	.-14     	; 0x1ad6 <__addsf3x+0x52>
    1ae4:	7e f4       	brtc	.+30     	; 0x1b04 <__addsf3x+0x80>
    1ae6:	1f 16       	cp	r1, r31
    1ae8:	ba 0b       	sbc	r27, r26
    1aea:	62 0b       	sbc	r22, r18
    1aec:	73 0b       	sbc	r23, r19
    1aee:	84 0b       	sbc	r24, r20
    1af0:	ba f0       	brmi	.+46     	; 0x1b20 <__addsf3x+0x9c>
    1af2:	91 50       	subi	r25, 0x01	; 1
    1af4:	a1 f0       	breq	.+40     	; 0x1b1e <__addsf3x+0x9a>
    1af6:	ff 0f       	add	r31, r31
    1af8:	bb 1f       	adc	r27, r27
    1afa:	66 1f       	adc	r22, r22
    1afc:	77 1f       	adc	r23, r23
    1afe:	88 1f       	adc	r24, r24
    1b00:	c2 f7       	brpl	.-16     	; 0x1af2 <__addsf3x+0x6e>
    1b02:	0e c0       	rjmp	.+28     	; 0x1b20 <__addsf3x+0x9c>
    1b04:	ba 0f       	add	r27, r26
    1b06:	62 1f       	adc	r22, r18
    1b08:	73 1f       	adc	r23, r19
    1b0a:	84 1f       	adc	r24, r20
    1b0c:	48 f4       	brcc	.+18     	; 0x1b20 <__addsf3x+0x9c>
    1b0e:	87 95       	ror	r24
    1b10:	77 95       	ror	r23
    1b12:	67 95       	ror	r22
    1b14:	b7 95       	ror	r27
    1b16:	f7 95       	ror	r31
    1b18:	9e 3f       	cpi	r25, 0xFE	; 254
    1b1a:	08 f0       	brcs	.+2      	; 0x1b1e <__addsf3x+0x9a>
    1b1c:	b0 cf       	rjmp	.-160    	; 0x1a7e <__addsf3+0x28>
    1b1e:	93 95       	inc	r25
    1b20:	88 0f       	add	r24, r24
    1b22:	08 f0       	brcs	.+2      	; 0x1b26 <__addsf3x+0xa2>
    1b24:	99 27       	eor	r25, r25
    1b26:	ee 0f       	add	r30, r30
    1b28:	97 95       	ror	r25
    1b2a:	87 95       	ror	r24
    1b2c:	08 95       	ret

00001b2e <__cmpsf2>:
    1b2e:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <__fp_cmp>
    1b32:	08 f4       	brcc	.+2      	; 0x1b36 <__cmpsf2+0x8>
    1b34:	81 e0       	ldi	r24, 0x01	; 1
    1b36:	08 95       	ret

00001b38 <__divsf3>:
    1b38:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <__divsf3x>
    1b3c:	0c 94 b5 0e 	jmp	0x1d6a	; 0x1d6a <__fp_round>
    1b40:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <__fp_pscB>
    1b44:	58 f0       	brcs	.+22     	; 0x1b5c <__divsf3+0x24>
    1b46:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <__fp_pscA>
    1b4a:	40 f0       	brcs	.+16     	; 0x1b5c <__divsf3+0x24>
    1b4c:	29 f4       	brne	.+10     	; 0x1b58 <__divsf3+0x20>
    1b4e:	5f 3f       	cpi	r21, 0xFF	; 255
    1b50:	29 f0       	breq	.+10     	; 0x1b5c <__divsf3+0x24>
    1b52:	0c 94 9e 0e 	jmp	0x1d3c	; 0x1d3c <__fp_inf>
    1b56:	51 11       	cpse	r21, r1
    1b58:	0c 94 e9 0e 	jmp	0x1dd2	; 0x1dd2 <__fp_szero>
    1b5c:	0c 94 a4 0e 	jmp	0x1d48	; 0x1d48 <__fp_nan>

00001b60 <__divsf3x>:
    1b60:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <__fp_split3>
    1b64:	68 f3       	brcs	.-38     	; 0x1b40 <__divsf3+0x8>

00001b66 <__divsf3_pse>:
    1b66:	99 23       	and	r25, r25
    1b68:	b1 f3       	breq	.-20     	; 0x1b56 <__divsf3+0x1e>
    1b6a:	55 23       	and	r21, r21
    1b6c:	91 f3       	breq	.-28     	; 0x1b52 <__divsf3+0x1a>
    1b6e:	95 1b       	sub	r25, r21
    1b70:	55 0b       	sbc	r21, r21
    1b72:	bb 27       	eor	r27, r27
    1b74:	aa 27       	eor	r26, r26
    1b76:	62 17       	cp	r22, r18
    1b78:	73 07       	cpc	r23, r19
    1b7a:	84 07       	cpc	r24, r20
    1b7c:	38 f0       	brcs	.+14     	; 0x1b8c <__divsf3_pse+0x26>
    1b7e:	9f 5f       	subi	r25, 0xFF	; 255
    1b80:	5f 4f       	sbci	r21, 0xFF	; 255
    1b82:	22 0f       	add	r18, r18
    1b84:	33 1f       	adc	r19, r19
    1b86:	44 1f       	adc	r20, r20
    1b88:	aa 1f       	adc	r26, r26
    1b8a:	a9 f3       	breq	.-22     	; 0x1b76 <__divsf3_pse+0x10>
    1b8c:	35 d0       	rcall	.+106    	; 0x1bf8 <__divsf3_pse+0x92>
    1b8e:	0e 2e       	mov	r0, r30
    1b90:	3a f0       	brmi	.+14     	; 0x1ba0 <__divsf3_pse+0x3a>
    1b92:	e0 e8       	ldi	r30, 0x80	; 128
    1b94:	32 d0       	rcall	.+100    	; 0x1bfa <__divsf3_pse+0x94>
    1b96:	91 50       	subi	r25, 0x01	; 1
    1b98:	50 40       	sbci	r21, 0x00	; 0
    1b9a:	e6 95       	lsr	r30
    1b9c:	00 1c       	adc	r0, r0
    1b9e:	ca f7       	brpl	.-14     	; 0x1b92 <__divsf3_pse+0x2c>
    1ba0:	2b d0       	rcall	.+86     	; 0x1bf8 <__divsf3_pse+0x92>
    1ba2:	fe 2f       	mov	r31, r30
    1ba4:	29 d0       	rcall	.+82     	; 0x1bf8 <__divsf3_pse+0x92>
    1ba6:	66 0f       	add	r22, r22
    1ba8:	77 1f       	adc	r23, r23
    1baa:	88 1f       	adc	r24, r24
    1bac:	bb 1f       	adc	r27, r27
    1bae:	26 17       	cp	r18, r22
    1bb0:	37 07       	cpc	r19, r23
    1bb2:	48 07       	cpc	r20, r24
    1bb4:	ab 07       	cpc	r26, r27
    1bb6:	b0 e8       	ldi	r27, 0x80	; 128
    1bb8:	09 f0       	breq	.+2      	; 0x1bbc <__divsf3_pse+0x56>
    1bba:	bb 0b       	sbc	r27, r27
    1bbc:	80 2d       	mov	r24, r0
    1bbe:	bf 01       	movw	r22, r30
    1bc0:	ff 27       	eor	r31, r31
    1bc2:	93 58       	subi	r25, 0x83	; 131
    1bc4:	5f 4f       	sbci	r21, 0xFF	; 255
    1bc6:	3a f0       	brmi	.+14     	; 0x1bd6 <__divsf3_pse+0x70>
    1bc8:	9e 3f       	cpi	r25, 0xFE	; 254
    1bca:	51 05       	cpc	r21, r1
    1bcc:	78 f0       	brcs	.+30     	; 0x1bec <__divsf3_pse+0x86>
    1bce:	0c 94 9e 0e 	jmp	0x1d3c	; 0x1d3c <__fp_inf>
    1bd2:	0c 94 e9 0e 	jmp	0x1dd2	; 0x1dd2 <__fp_szero>
    1bd6:	5f 3f       	cpi	r21, 0xFF	; 255
    1bd8:	e4 f3       	brlt	.-8      	; 0x1bd2 <__divsf3_pse+0x6c>
    1bda:	98 3e       	cpi	r25, 0xE8	; 232
    1bdc:	d4 f3       	brlt	.-12     	; 0x1bd2 <__divsf3_pse+0x6c>
    1bde:	86 95       	lsr	r24
    1be0:	77 95       	ror	r23
    1be2:	67 95       	ror	r22
    1be4:	b7 95       	ror	r27
    1be6:	f7 95       	ror	r31
    1be8:	9f 5f       	subi	r25, 0xFF	; 255
    1bea:	c9 f7       	brne	.-14     	; 0x1bde <__divsf3_pse+0x78>
    1bec:	88 0f       	add	r24, r24
    1bee:	91 1d       	adc	r25, r1
    1bf0:	96 95       	lsr	r25
    1bf2:	87 95       	ror	r24
    1bf4:	97 f9       	bld	r25, 7
    1bf6:	08 95       	ret
    1bf8:	e1 e0       	ldi	r30, 0x01	; 1
    1bfa:	66 0f       	add	r22, r22
    1bfc:	77 1f       	adc	r23, r23
    1bfe:	88 1f       	adc	r24, r24
    1c00:	bb 1f       	adc	r27, r27
    1c02:	62 17       	cp	r22, r18
    1c04:	73 07       	cpc	r23, r19
    1c06:	84 07       	cpc	r24, r20
    1c08:	ba 07       	cpc	r27, r26
    1c0a:	20 f0       	brcs	.+8      	; 0x1c14 <__divsf3_pse+0xae>
    1c0c:	62 1b       	sub	r22, r18
    1c0e:	73 0b       	sbc	r23, r19
    1c10:	84 0b       	sbc	r24, r20
    1c12:	ba 0b       	sbc	r27, r26
    1c14:	ee 1f       	adc	r30, r30
    1c16:	88 f7       	brcc	.-30     	; 0x1bfa <__divsf3_pse+0x94>
    1c18:	e0 95       	com	r30
    1c1a:	08 95       	ret

00001c1c <__fixunssfsi>:
    1c1c:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <__fp_splitA>
    1c20:	88 f0       	brcs	.+34     	; 0x1c44 <__fixunssfsi+0x28>
    1c22:	9f 57       	subi	r25, 0x7F	; 127
    1c24:	98 f0       	brcs	.+38     	; 0x1c4c <__fixunssfsi+0x30>
    1c26:	b9 2f       	mov	r27, r25
    1c28:	99 27       	eor	r25, r25
    1c2a:	b7 51       	subi	r27, 0x17	; 23
    1c2c:	b0 f0       	brcs	.+44     	; 0x1c5a <__fixunssfsi+0x3e>
    1c2e:	e1 f0       	breq	.+56     	; 0x1c68 <__fixunssfsi+0x4c>
    1c30:	66 0f       	add	r22, r22
    1c32:	77 1f       	adc	r23, r23
    1c34:	88 1f       	adc	r24, r24
    1c36:	99 1f       	adc	r25, r25
    1c38:	1a f0       	brmi	.+6      	; 0x1c40 <__fixunssfsi+0x24>
    1c3a:	ba 95       	dec	r27
    1c3c:	c9 f7       	brne	.-14     	; 0x1c30 <__fixunssfsi+0x14>
    1c3e:	14 c0       	rjmp	.+40     	; 0x1c68 <__fixunssfsi+0x4c>
    1c40:	b1 30       	cpi	r27, 0x01	; 1
    1c42:	91 f0       	breq	.+36     	; 0x1c68 <__fixunssfsi+0x4c>
    1c44:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <__fp_zero>
    1c48:	b1 e0       	ldi	r27, 0x01	; 1
    1c4a:	08 95       	ret
    1c4c:	0c 94 e8 0e 	jmp	0x1dd0	; 0x1dd0 <__fp_zero>
    1c50:	67 2f       	mov	r22, r23
    1c52:	78 2f       	mov	r23, r24
    1c54:	88 27       	eor	r24, r24
    1c56:	b8 5f       	subi	r27, 0xF8	; 248
    1c58:	39 f0       	breq	.+14     	; 0x1c68 <__fixunssfsi+0x4c>
    1c5a:	b9 3f       	cpi	r27, 0xF9	; 249
    1c5c:	cc f3       	brlt	.-14     	; 0x1c50 <__fixunssfsi+0x34>
    1c5e:	86 95       	lsr	r24
    1c60:	77 95       	ror	r23
    1c62:	67 95       	ror	r22
    1c64:	b3 95       	inc	r27
    1c66:	d9 f7       	brne	.-10     	; 0x1c5e <__fixunssfsi+0x42>
    1c68:	3e f4       	brtc	.+14     	; 0x1c78 <__fixunssfsi+0x5c>
    1c6a:	90 95       	com	r25
    1c6c:	80 95       	com	r24
    1c6e:	70 95       	com	r23
    1c70:	61 95       	neg	r22
    1c72:	7f 4f       	sbci	r23, 0xFF	; 255
    1c74:	8f 4f       	sbci	r24, 0xFF	; 255
    1c76:	9f 4f       	sbci	r25, 0xFF	; 255
    1c78:	08 95       	ret

00001c7a <__floatunsisf>:
    1c7a:	e8 94       	clt
    1c7c:	09 c0       	rjmp	.+18     	; 0x1c90 <__floatsisf+0x12>

00001c7e <__floatsisf>:
    1c7e:	97 fb       	bst	r25, 7
    1c80:	3e f4       	brtc	.+14     	; 0x1c90 <__floatsisf+0x12>
    1c82:	90 95       	com	r25
    1c84:	80 95       	com	r24
    1c86:	70 95       	com	r23
    1c88:	61 95       	neg	r22
    1c8a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c8c:	8f 4f       	sbci	r24, 0xFF	; 255
    1c8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c90:	99 23       	and	r25, r25
    1c92:	a9 f0       	breq	.+42     	; 0x1cbe <__floatsisf+0x40>
    1c94:	f9 2f       	mov	r31, r25
    1c96:	96 e9       	ldi	r25, 0x96	; 150
    1c98:	bb 27       	eor	r27, r27
    1c9a:	93 95       	inc	r25
    1c9c:	f6 95       	lsr	r31
    1c9e:	87 95       	ror	r24
    1ca0:	77 95       	ror	r23
    1ca2:	67 95       	ror	r22
    1ca4:	b7 95       	ror	r27
    1ca6:	f1 11       	cpse	r31, r1
    1ca8:	f8 cf       	rjmp	.-16     	; 0x1c9a <__floatsisf+0x1c>
    1caa:	fa f4       	brpl	.+62     	; 0x1cea <__floatsisf+0x6c>
    1cac:	bb 0f       	add	r27, r27
    1cae:	11 f4       	brne	.+4      	; 0x1cb4 <__floatsisf+0x36>
    1cb0:	60 ff       	sbrs	r22, 0
    1cb2:	1b c0       	rjmp	.+54     	; 0x1cea <__floatsisf+0x6c>
    1cb4:	6f 5f       	subi	r22, 0xFF	; 255
    1cb6:	7f 4f       	sbci	r23, 0xFF	; 255
    1cb8:	8f 4f       	sbci	r24, 0xFF	; 255
    1cba:	9f 4f       	sbci	r25, 0xFF	; 255
    1cbc:	16 c0       	rjmp	.+44     	; 0x1cea <__floatsisf+0x6c>
    1cbe:	88 23       	and	r24, r24
    1cc0:	11 f0       	breq	.+4      	; 0x1cc6 <__floatsisf+0x48>
    1cc2:	96 e9       	ldi	r25, 0x96	; 150
    1cc4:	11 c0       	rjmp	.+34     	; 0x1ce8 <__floatsisf+0x6a>
    1cc6:	77 23       	and	r23, r23
    1cc8:	21 f0       	breq	.+8      	; 0x1cd2 <__floatsisf+0x54>
    1cca:	9e e8       	ldi	r25, 0x8E	; 142
    1ccc:	87 2f       	mov	r24, r23
    1cce:	76 2f       	mov	r23, r22
    1cd0:	05 c0       	rjmp	.+10     	; 0x1cdc <__floatsisf+0x5e>
    1cd2:	66 23       	and	r22, r22
    1cd4:	71 f0       	breq	.+28     	; 0x1cf2 <__floatsisf+0x74>
    1cd6:	96 e8       	ldi	r25, 0x86	; 134
    1cd8:	86 2f       	mov	r24, r22
    1cda:	70 e0       	ldi	r23, 0x00	; 0
    1cdc:	60 e0       	ldi	r22, 0x00	; 0
    1cde:	2a f0       	brmi	.+10     	; 0x1cea <__floatsisf+0x6c>
    1ce0:	9a 95       	dec	r25
    1ce2:	66 0f       	add	r22, r22
    1ce4:	77 1f       	adc	r23, r23
    1ce6:	88 1f       	adc	r24, r24
    1ce8:	da f7       	brpl	.-10     	; 0x1ce0 <__floatsisf+0x62>
    1cea:	88 0f       	add	r24, r24
    1cec:	96 95       	lsr	r25
    1cee:	87 95       	ror	r24
    1cf0:	97 f9       	bld	r25, 7
    1cf2:	08 95       	ret

00001cf4 <__fp_cmp>:
    1cf4:	99 0f       	add	r25, r25
    1cf6:	00 08       	sbc	r0, r0
    1cf8:	55 0f       	add	r21, r21
    1cfa:	aa 0b       	sbc	r26, r26
    1cfc:	e0 e8       	ldi	r30, 0x80	; 128
    1cfe:	fe ef       	ldi	r31, 0xFE	; 254
    1d00:	16 16       	cp	r1, r22
    1d02:	17 06       	cpc	r1, r23
    1d04:	e8 07       	cpc	r30, r24
    1d06:	f9 07       	cpc	r31, r25
    1d08:	c0 f0       	brcs	.+48     	; 0x1d3a <__fp_cmp+0x46>
    1d0a:	12 16       	cp	r1, r18
    1d0c:	13 06       	cpc	r1, r19
    1d0e:	e4 07       	cpc	r30, r20
    1d10:	f5 07       	cpc	r31, r21
    1d12:	98 f0       	brcs	.+38     	; 0x1d3a <__fp_cmp+0x46>
    1d14:	62 1b       	sub	r22, r18
    1d16:	73 0b       	sbc	r23, r19
    1d18:	84 0b       	sbc	r24, r20
    1d1a:	95 0b       	sbc	r25, r21
    1d1c:	39 f4       	brne	.+14     	; 0x1d2c <__fp_cmp+0x38>
    1d1e:	0a 26       	eor	r0, r26
    1d20:	61 f0       	breq	.+24     	; 0x1d3a <__fp_cmp+0x46>
    1d22:	23 2b       	or	r18, r19
    1d24:	24 2b       	or	r18, r20
    1d26:	25 2b       	or	r18, r21
    1d28:	21 f4       	brne	.+8      	; 0x1d32 <__fp_cmp+0x3e>
    1d2a:	08 95       	ret
    1d2c:	0a 26       	eor	r0, r26
    1d2e:	09 f4       	brne	.+2      	; 0x1d32 <__fp_cmp+0x3e>
    1d30:	a1 40       	sbci	r26, 0x01	; 1
    1d32:	a6 95       	lsr	r26
    1d34:	8f ef       	ldi	r24, 0xFF	; 255
    1d36:	81 1d       	adc	r24, r1
    1d38:	81 1d       	adc	r24, r1
    1d3a:	08 95       	ret

00001d3c <__fp_inf>:
    1d3c:	97 f9       	bld	r25, 7
    1d3e:	9f 67       	ori	r25, 0x7F	; 127
    1d40:	80 e8       	ldi	r24, 0x80	; 128
    1d42:	70 e0       	ldi	r23, 0x00	; 0
    1d44:	60 e0       	ldi	r22, 0x00	; 0
    1d46:	08 95       	ret

00001d48 <__fp_nan>:
    1d48:	9f ef       	ldi	r25, 0xFF	; 255
    1d4a:	80 ec       	ldi	r24, 0xC0	; 192
    1d4c:	08 95       	ret

00001d4e <__fp_pscA>:
    1d4e:	00 24       	eor	r0, r0
    1d50:	0a 94       	dec	r0
    1d52:	16 16       	cp	r1, r22
    1d54:	17 06       	cpc	r1, r23
    1d56:	18 06       	cpc	r1, r24
    1d58:	09 06       	cpc	r0, r25
    1d5a:	08 95       	ret

00001d5c <__fp_pscB>:
    1d5c:	00 24       	eor	r0, r0
    1d5e:	0a 94       	dec	r0
    1d60:	12 16       	cp	r1, r18
    1d62:	13 06       	cpc	r1, r19
    1d64:	14 06       	cpc	r1, r20
    1d66:	05 06       	cpc	r0, r21
    1d68:	08 95       	ret

00001d6a <__fp_round>:
    1d6a:	09 2e       	mov	r0, r25
    1d6c:	03 94       	inc	r0
    1d6e:	00 0c       	add	r0, r0
    1d70:	11 f4       	brne	.+4      	; 0x1d76 <__fp_round+0xc>
    1d72:	88 23       	and	r24, r24
    1d74:	52 f0       	brmi	.+20     	; 0x1d8a <__fp_round+0x20>
    1d76:	bb 0f       	add	r27, r27
    1d78:	40 f4       	brcc	.+16     	; 0x1d8a <__fp_round+0x20>
    1d7a:	bf 2b       	or	r27, r31
    1d7c:	11 f4       	brne	.+4      	; 0x1d82 <__fp_round+0x18>
    1d7e:	60 ff       	sbrs	r22, 0
    1d80:	04 c0       	rjmp	.+8      	; 0x1d8a <__fp_round+0x20>
    1d82:	6f 5f       	subi	r22, 0xFF	; 255
    1d84:	7f 4f       	sbci	r23, 0xFF	; 255
    1d86:	8f 4f       	sbci	r24, 0xFF	; 255
    1d88:	9f 4f       	sbci	r25, 0xFF	; 255
    1d8a:	08 95       	ret

00001d8c <__fp_split3>:
    1d8c:	57 fd       	sbrc	r21, 7
    1d8e:	90 58       	subi	r25, 0x80	; 128
    1d90:	44 0f       	add	r20, r20
    1d92:	55 1f       	adc	r21, r21
    1d94:	59 f0       	breq	.+22     	; 0x1dac <__fp_splitA+0x10>
    1d96:	5f 3f       	cpi	r21, 0xFF	; 255
    1d98:	71 f0       	breq	.+28     	; 0x1db6 <__fp_splitA+0x1a>
    1d9a:	47 95       	ror	r20

00001d9c <__fp_splitA>:
    1d9c:	88 0f       	add	r24, r24
    1d9e:	97 fb       	bst	r25, 7
    1da0:	99 1f       	adc	r25, r25
    1da2:	61 f0       	breq	.+24     	; 0x1dbc <__fp_splitA+0x20>
    1da4:	9f 3f       	cpi	r25, 0xFF	; 255
    1da6:	79 f0       	breq	.+30     	; 0x1dc6 <__fp_splitA+0x2a>
    1da8:	87 95       	ror	r24
    1daa:	08 95       	ret
    1dac:	12 16       	cp	r1, r18
    1dae:	13 06       	cpc	r1, r19
    1db0:	14 06       	cpc	r1, r20
    1db2:	55 1f       	adc	r21, r21
    1db4:	f2 cf       	rjmp	.-28     	; 0x1d9a <__fp_split3+0xe>
    1db6:	46 95       	lsr	r20
    1db8:	f1 df       	rcall	.-30     	; 0x1d9c <__fp_splitA>
    1dba:	08 c0       	rjmp	.+16     	; 0x1dcc <__fp_splitA+0x30>
    1dbc:	16 16       	cp	r1, r22
    1dbe:	17 06       	cpc	r1, r23
    1dc0:	18 06       	cpc	r1, r24
    1dc2:	99 1f       	adc	r25, r25
    1dc4:	f1 cf       	rjmp	.-30     	; 0x1da8 <__fp_splitA+0xc>
    1dc6:	86 95       	lsr	r24
    1dc8:	71 05       	cpc	r23, r1
    1dca:	61 05       	cpc	r22, r1
    1dcc:	08 94       	sec
    1dce:	08 95       	ret

00001dd0 <__fp_zero>:
    1dd0:	e8 94       	clt

00001dd2 <__fp_szero>:
    1dd2:	bb 27       	eor	r27, r27
    1dd4:	66 27       	eor	r22, r22
    1dd6:	77 27       	eor	r23, r23
    1dd8:	cb 01       	movw	r24, r22
    1dda:	97 f9       	bld	r25, 7
    1ddc:	08 95       	ret

00001dde <__gesf2>:
    1dde:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <__fp_cmp>
    1de2:	08 f4       	brcc	.+2      	; 0x1de6 <__gesf2+0x8>
    1de4:	8f ef       	ldi	r24, 0xFF	; 255
    1de6:	08 95       	ret

00001de8 <__mulsf3>:
    1de8:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__mulsf3x>
    1dec:	0c 94 b5 0e 	jmp	0x1d6a	; 0x1d6a <__fp_round>
    1df0:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <__fp_pscA>
    1df4:	38 f0       	brcs	.+14     	; 0x1e04 <__mulsf3+0x1c>
    1df6:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <__fp_pscB>
    1dfa:	20 f0       	brcs	.+8      	; 0x1e04 <__mulsf3+0x1c>
    1dfc:	95 23       	and	r25, r21
    1dfe:	11 f0       	breq	.+4      	; 0x1e04 <__mulsf3+0x1c>
    1e00:	0c 94 9e 0e 	jmp	0x1d3c	; 0x1d3c <__fp_inf>
    1e04:	0c 94 a4 0e 	jmp	0x1d48	; 0x1d48 <__fp_nan>
    1e08:	11 24       	eor	r1, r1
    1e0a:	0c 94 e9 0e 	jmp	0x1dd2	; 0x1dd2 <__fp_szero>

00001e0e <__mulsf3x>:
    1e0e:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <__fp_split3>
    1e12:	70 f3       	brcs	.-36     	; 0x1df0 <__mulsf3+0x8>

00001e14 <__mulsf3_pse>:
    1e14:	95 9f       	mul	r25, r21
    1e16:	c1 f3       	breq	.-16     	; 0x1e08 <__mulsf3+0x20>
    1e18:	95 0f       	add	r25, r21
    1e1a:	50 e0       	ldi	r21, 0x00	; 0
    1e1c:	55 1f       	adc	r21, r21
    1e1e:	62 9f       	mul	r22, r18
    1e20:	f0 01       	movw	r30, r0
    1e22:	72 9f       	mul	r23, r18
    1e24:	bb 27       	eor	r27, r27
    1e26:	f0 0d       	add	r31, r0
    1e28:	b1 1d       	adc	r27, r1
    1e2a:	63 9f       	mul	r22, r19
    1e2c:	aa 27       	eor	r26, r26
    1e2e:	f0 0d       	add	r31, r0
    1e30:	b1 1d       	adc	r27, r1
    1e32:	aa 1f       	adc	r26, r26
    1e34:	64 9f       	mul	r22, r20
    1e36:	66 27       	eor	r22, r22
    1e38:	b0 0d       	add	r27, r0
    1e3a:	a1 1d       	adc	r26, r1
    1e3c:	66 1f       	adc	r22, r22
    1e3e:	82 9f       	mul	r24, r18
    1e40:	22 27       	eor	r18, r18
    1e42:	b0 0d       	add	r27, r0
    1e44:	a1 1d       	adc	r26, r1
    1e46:	62 1f       	adc	r22, r18
    1e48:	73 9f       	mul	r23, r19
    1e4a:	b0 0d       	add	r27, r0
    1e4c:	a1 1d       	adc	r26, r1
    1e4e:	62 1f       	adc	r22, r18
    1e50:	83 9f       	mul	r24, r19
    1e52:	a0 0d       	add	r26, r0
    1e54:	61 1d       	adc	r22, r1
    1e56:	22 1f       	adc	r18, r18
    1e58:	74 9f       	mul	r23, r20
    1e5a:	33 27       	eor	r19, r19
    1e5c:	a0 0d       	add	r26, r0
    1e5e:	61 1d       	adc	r22, r1
    1e60:	23 1f       	adc	r18, r19
    1e62:	84 9f       	mul	r24, r20
    1e64:	60 0d       	add	r22, r0
    1e66:	21 1d       	adc	r18, r1
    1e68:	82 2f       	mov	r24, r18
    1e6a:	76 2f       	mov	r23, r22
    1e6c:	6a 2f       	mov	r22, r26
    1e6e:	11 24       	eor	r1, r1
    1e70:	9f 57       	subi	r25, 0x7F	; 127
    1e72:	50 40       	sbci	r21, 0x00	; 0
    1e74:	9a f0       	brmi	.+38     	; 0x1e9c <__mulsf3_pse+0x88>
    1e76:	f1 f0       	breq	.+60     	; 0x1eb4 <__mulsf3_pse+0xa0>
    1e78:	88 23       	and	r24, r24
    1e7a:	4a f0       	brmi	.+18     	; 0x1e8e <__mulsf3_pse+0x7a>
    1e7c:	ee 0f       	add	r30, r30
    1e7e:	ff 1f       	adc	r31, r31
    1e80:	bb 1f       	adc	r27, r27
    1e82:	66 1f       	adc	r22, r22
    1e84:	77 1f       	adc	r23, r23
    1e86:	88 1f       	adc	r24, r24
    1e88:	91 50       	subi	r25, 0x01	; 1
    1e8a:	50 40       	sbci	r21, 0x00	; 0
    1e8c:	a9 f7       	brne	.-22     	; 0x1e78 <__mulsf3_pse+0x64>
    1e8e:	9e 3f       	cpi	r25, 0xFE	; 254
    1e90:	51 05       	cpc	r21, r1
    1e92:	80 f0       	brcs	.+32     	; 0x1eb4 <__mulsf3_pse+0xa0>
    1e94:	0c 94 9e 0e 	jmp	0x1d3c	; 0x1d3c <__fp_inf>
    1e98:	0c 94 e9 0e 	jmp	0x1dd2	; 0x1dd2 <__fp_szero>
    1e9c:	5f 3f       	cpi	r21, 0xFF	; 255
    1e9e:	e4 f3       	brlt	.-8      	; 0x1e98 <__mulsf3_pse+0x84>
    1ea0:	98 3e       	cpi	r25, 0xE8	; 232
    1ea2:	d4 f3       	brlt	.-12     	; 0x1e98 <__mulsf3_pse+0x84>
    1ea4:	86 95       	lsr	r24
    1ea6:	77 95       	ror	r23
    1ea8:	67 95       	ror	r22
    1eaa:	b7 95       	ror	r27
    1eac:	f7 95       	ror	r31
    1eae:	e7 95       	ror	r30
    1eb0:	9f 5f       	subi	r25, 0xFF	; 255
    1eb2:	c1 f7       	brne	.-16     	; 0x1ea4 <__mulsf3_pse+0x90>
    1eb4:	fe 2b       	or	r31, r30
    1eb6:	88 0f       	add	r24, r24
    1eb8:	91 1d       	adc	r25, r1
    1eba:	96 95       	lsr	r25
    1ebc:	87 95       	ror	r24
    1ebe:	97 f9       	bld	r25, 7
    1ec0:	08 95       	ret

00001ec2 <vfprintf>:
    1ec2:	a0 e1       	ldi	r26, 0x10	; 16
    1ec4:	b0 e0       	ldi	r27, 0x00	; 0
    1ec6:	e7 e6       	ldi	r30, 0x67	; 103
    1ec8:	ff e0       	ldi	r31, 0x0F	; 15
    1eca:	0c 94 de 12 	jmp	0x25bc	; 0x25bc <__prologue_saves__>
    1ece:	7c 01       	movw	r14, r24
    1ed0:	1b 01       	movw	r2, r22
    1ed2:	6a 01       	movw	r12, r20
    1ed4:	fc 01       	movw	r30, r24
    1ed6:	17 82       	std	Z+7, r1	; 0x07
    1ed8:	16 82       	std	Z+6, r1	; 0x06
    1eda:	83 81       	ldd	r24, Z+3	; 0x03
    1edc:	81 ff       	sbrs	r24, 1
    1ede:	44 c3       	rjmp	.+1672   	; 0x2568 <vfprintf+0x6a6>
    1ee0:	9e 01       	movw	r18, r28
    1ee2:	2f 5f       	subi	r18, 0xFF	; 255
    1ee4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ee6:	39 01       	movw	r6, r18
    1ee8:	f7 01       	movw	r30, r14
    1eea:	93 81       	ldd	r25, Z+3	; 0x03
    1eec:	f1 01       	movw	r30, r2
    1eee:	93 fd       	sbrc	r25, 3
    1ef0:	85 91       	lpm	r24, Z+
    1ef2:	93 ff       	sbrs	r25, 3
    1ef4:	81 91       	ld	r24, Z+
    1ef6:	1f 01       	movw	r2, r30
    1ef8:	88 23       	and	r24, r24
    1efa:	09 f4       	brne	.+2      	; 0x1efe <vfprintf+0x3c>
    1efc:	31 c3       	rjmp	.+1634   	; 0x2560 <vfprintf+0x69e>
    1efe:	85 32       	cpi	r24, 0x25	; 37
    1f00:	39 f4       	brne	.+14     	; 0x1f10 <vfprintf+0x4e>
    1f02:	93 fd       	sbrc	r25, 3
    1f04:	85 91       	lpm	r24, Z+
    1f06:	93 ff       	sbrs	r25, 3
    1f08:	81 91       	ld	r24, Z+
    1f0a:	1f 01       	movw	r2, r30
    1f0c:	85 32       	cpi	r24, 0x25	; 37
    1f0e:	39 f4       	brne	.+14     	; 0x1f1e <vfprintf+0x5c>
    1f10:	b7 01       	movw	r22, r14
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	0e 94 03 14 	call	0x2806	; 0x2806 <fputc>
    1f18:	56 01       	movw	r10, r12
    1f1a:	65 01       	movw	r12, r10
    1f1c:	e5 cf       	rjmp	.-54     	; 0x1ee8 <vfprintf+0x26>
    1f1e:	10 e0       	ldi	r17, 0x00	; 0
    1f20:	51 2c       	mov	r5, r1
    1f22:	91 2c       	mov	r9, r1
    1f24:	ff e1       	ldi	r31, 0x1F	; 31
    1f26:	f9 15       	cp	r31, r9
    1f28:	d8 f0       	brcs	.+54     	; 0x1f60 <vfprintf+0x9e>
    1f2a:	8b 32       	cpi	r24, 0x2B	; 43
    1f2c:	79 f0       	breq	.+30     	; 0x1f4c <vfprintf+0x8a>
    1f2e:	38 f4       	brcc	.+14     	; 0x1f3e <vfprintf+0x7c>
    1f30:	80 32       	cpi	r24, 0x20	; 32
    1f32:	79 f0       	breq	.+30     	; 0x1f52 <vfprintf+0x90>
    1f34:	83 32       	cpi	r24, 0x23	; 35
    1f36:	a1 f4       	brne	.+40     	; 0x1f60 <vfprintf+0x9e>
    1f38:	f9 2d       	mov	r31, r9
    1f3a:	f0 61       	ori	r31, 0x10	; 16
    1f3c:	2e c0       	rjmp	.+92     	; 0x1f9a <vfprintf+0xd8>
    1f3e:	8d 32       	cpi	r24, 0x2D	; 45
    1f40:	61 f0       	breq	.+24     	; 0x1f5a <vfprintf+0x98>
    1f42:	80 33       	cpi	r24, 0x30	; 48
    1f44:	69 f4       	brne	.+26     	; 0x1f60 <vfprintf+0x9e>
    1f46:	29 2d       	mov	r18, r9
    1f48:	21 60       	ori	r18, 0x01	; 1
    1f4a:	2d c0       	rjmp	.+90     	; 0x1fa6 <vfprintf+0xe4>
    1f4c:	39 2d       	mov	r19, r9
    1f4e:	32 60       	ori	r19, 0x02	; 2
    1f50:	93 2e       	mov	r9, r19
    1f52:	89 2d       	mov	r24, r9
    1f54:	84 60       	ori	r24, 0x04	; 4
    1f56:	98 2e       	mov	r9, r24
    1f58:	2a c0       	rjmp	.+84     	; 0x1fae <vfprintf+0xec>
    1f5a:	e9 2d       	mov	r30, r9
    1f5c:	e8 60       	ori	r30, 0x08	; 8
    1f5e:	15 c0       	rjmp	.+42     	; 0x1f8a <vfprintf+0xc8>
    1f60:	97 fc       	sbrc	r9, 7
    1f62:	2d c0       	rjmp	.+90     	; 0x1fbe <vfprintf+0xfc>
    1f64:	20 ed       	ldi	r18, 0xD0	; 208
    1f66:	28 0f       	add	r18, r24
    1f68:	2a 30       	cpi	r18, 0x0A	; 10
    1f6a:	88 f4       	brcc	.+34     	; 0x1f8e <vfprintf+0xcc>
    1f6c:	96 fe       	sbrs	r9, 6
    1f6e:	06 c0       	rjmp	.+12     	; 0x1f7c <vfprintf+0xba>
    1f70:	3a e0       	ldi	r19, 0x0A	; 10
    1f72:	13 9f       	mul	r17, r19
    1f74:	20 0d       	add	r18, r0
    1f76:	11 24       	eor	r1, r1
    1f78:	12 2f       	mov	r17, r18
    1f7a:	19 c0       	rjmp	.+50     	; 0x1fae <vfprintf+0xec>
    1f7c:	8a e0       	ldi	r24, 0x0A	; 10
    1f7e:	58 9e       	mul	r5, r24
    1f80:	20 0d       	add	r18, r0
    1f82:	11 24       	eor	r1, r1
    1f84:	52 2e       	mov	r5, r18
    1f86:	e9 2d       	mov	r30, r9
    1f88:	e0 62       	ori	r30, 0x20	; 32
    1f8a:	9e 2e       	mov	r9, r30
    1f8c:	10 c0       	rjmp	.+32     	; 0x1fae <vfprintf+0xec>
    1f8e:	8e 32       	cpi	r24, 0x2E	; 46
    1f90:	31 f4       	brne	.+12     	; 0x1f9e <vfprintf+0xdc>
    1f92:	96 fc       	sbrc	r9, 6
    1f94:	e5 c2       	rjmp	.+1482   	; 0x2560 <vfprintf+0x69e>
    1f96:	f9 2d       	mov	r31, r9
    1f98:	f0 64       	ori	r31, 0x40	; 64
    1f9a:	9f 2e       	mov	r9, r31
    1f9c:	08 c0       	rjmp	.+16     	; 0x1fae <vfprintf+0xec>
    1f9e:	8c 36       	cpi	r24, 0x6C	; 108
    1fa0:	21 f4       	brne	.+8      	; 0x1faa <vfprintf+0xe8>
    1fa2:	29 2d       	mov	r18, r9
    1fa4:	20 68       	ori	r18, 0x80	; 128
    1fa6:	92 2e       	mov	r9, r18
    1fa8:	02 c0       	rjmp	.+4      	; 0x1fae <vfprintf+0xec>
    1faa:	88 36       	cpi	r24, 0x68	; 104
    1fac:	41 f4       	brne	.+16     	; 0x1fbe <vfprintf+0xfc>
    1fae:	f1 01       	movw	r30, r2
    1fb0:	93 fd       	sbrc	r25, 3
    1fb2:	85 91       	lpm	r24, Z+
    1fb4:	93 ff       	sbrs	r25, 3
    1fb6:	81 91       	ld	r24, Z+
    1fb8:	1f 01       	movw	r2, r30
    1fba:	81 11       	cpse	r24, r1
    1fbc:	b3 cf       	rjmp	.-154    	; 0x1f24 <vfprintf+0x62>
    1fbe:	9b eb       	ldi	r25, 0xBB	; 187
    1fc0:	98 0f       	add	r25, r24
    1fc2:	93 30       	cpi	r25, 0x03	; 3
    1fc4:	20 f4       	brcc	.+8      	; 0x1fce <vfprintf+0x10c>
    1fc6:	99 2d       	mov	r25, r9
    1fc8:	90 61       	ori	r25, 0x10	; 16
    1fca:	80 5e       	subi	r24, 0xE0	; 224
    1fcc:	07 c0       	rjmp	.+14     	; 0x1fdc <vfprintf+0x11a>
    1fce:	9b e9       	ldi	r25, 0x9B	; 155
    1fd0:	98 0f       	add	r25, r24
    1fd2:	93 30       	cpi	r25, 0x03	; 3
    1fd4:	08 f0       	brcs	.+2      	; 0x1fd8 <vfprintf+0x116>
    1fd6:	66 c1       	rjmp	.+716    	; 0x22a4 <vfprintf+0x3e2>
    1fd8:	99 2d       	mov	r25, r9
    1fda:	9f 7e       	andi	r25, 0xEF	; 239
    1fdc:	96 ff       	sbrs	r25, 6
    1fde:	16 e0       	ldi	r17, 0x06	; 6
    1fe0:	9f 73       	andi	r25, 0x3F	; 63
    1fe2:	99 2e       	mov	r9, r25
    1fe4:	85 36       	cpi	r24, 0x65	; 101
    1fe6:	19 f4       	brne	.+6      	; 0x1fee <vfprintf+0x12c>
    1fe8:	90 64       	ori	r25, 0x40	; 64
    1fea:	99 2e       	mov	r9, r25
    1fec:	08 c0       	rjmp	.+16     	; 0x1ffe <vfprintf+0x13c>
    1fee:	86 36       	cpi	r24, 0x66	; 102
    1ff0:	21 f4       	brne	.+8      	; 0x1ffa <vfprintf+0x138>
    1ff2:	39 2f       	mov	r19, r25
    1ff4:	30 68       	ori	r19, 0x80	; 128
    1ff6:	93 2e       	mov	r9, r19
    1ff8:	02 c0       	rjmp	.+4      	; 0x1ffe <vfprintf+0x13c>
    1ffa:	11 11       	cpse	r17, r1
    1ffc:	11 50       	subi	r17, 0x01	; 1
    1ffe:	97 fe       	sbrs	r9, 7
    2000:	07 c0       	rjmp	.+14     	; 0x2010 <vfprintf+0x14e>
    2002:	1c 33       	cpi	r17, 0x3C	; 60
    2004:	50 f4       	brcc	.+20     	; 0x201a <vfprintf+0x158>
    2006:	44 24       	eor	r4, r4
    2008:	43 94       	inc	r4
    200a:	41 0e       	add	r4, r17
    200c:	27 e0       	ldi	r18, 0x07	; 7
    200e:	0b c0       	rjmp	.+22     	; 0x2026 <vfprintf+0x164>
    2010:	18 30       	cpi	r17, 0x08	; 8
    2012:	38 f0       	brcs	.+14     	; 0x2022 <vfprintf+0x160>
    2014:	27 e0       	ldi	r18, 0x07	; 7
    2016:	17 e0       	ldi	r17, 0x07	; 7
    2018:	05 c0       	rjmp	.+10     	; 0x2024 <vfprintf+0x162>
    201a:	27 e0       	ldi	r18, 0x07	; 7
    201c:	9c e3       	ldi	r25, 0x3C	; 60
    201e:	49 2e       	mov	r4, r25
    2020:	02 c0       	rjmp	.+4      	; 0x2026 <vfprintf+0x164>
    2022:	21 2f       	mov	r18, r17
    2024:	41 2c       	mov	r4, r1
    2026:	56 01       	movw	r10, r12
    2028:	84 e0       	ldi	r24, 0x04	; 4
    202a:	a8 0e       	add	r10, r24
    202c:	b1 1c       	adc	r11, r1
    202e:	f6 01       	movw	r30, r12
    2030:	60 81       	ld	r22, Z
    2032:	71 81       	ldd	r23, Z+1	; 0x01
    2034:	82 81       	ldd	r24, Z+2	; 0x02
    2036:	93 81       	ldd	r25, Z+3	; 0x03
    2038:	04 2d       	mov	r16, r4
    203a:	a3 01       	movw	r20, r6
    203c:	0e 94 15 13 	call	0x262a	; 0x262a <__ftoa_engine>
    2040:	6c 01       	movw	r12, r24
    2042:	f9 81       	ldd	r31, Y+1	; 0x01
    2044:	fc 87       	std	Y+12, r31	; 0x0c
    2046:	f0 ff       	sbrs	r31, 0
    2048:	02 c0       	rjmp	.+4      	; 0x204e <vfprintf+0x18c>
    204a:	f3 ff       	sbrs	r31, 3
    204c:	06 c0       	rjmp	.+12     	; 0x205a <vfprintf+0x198>
    204e:	91 fc       	sbrc	r9, 1
    2050:	06 c0       	rjmp	.+12     	; 0x205e <vfprintf+0x19c>
    2052:	92 fe       	sbrs	r9, 2
    2054:	06 c0       	rjmp	.+12     	; 0x2062 <vfprintf+0x1a0>
    2056:	00 e2       	ldi	r16, 0x20	; 32
    2058:	05 c0       	rjmp	.+10     	; 0x2064 <vfprintf+0x1a2>
    205a:	0d e2       	ldi	r16, 0x2D	; 45
    205c:	03 c0       	rjmp	.+6      	; 0x2064 <vfprintf+0x1a2>
    205e:	0b e2       	ldi	r16, 0x2B	; 43
    2060:	01 c0       	rjmp	.+2      	; 0x2064 <vfprintf+0x1a2>
    2062:	00 e0       	ldi	r16, 0x00	; 0
    2064:	8c 85       	ldd	r24, Y+12	; 0x0c
    2066:	8c 70       	andi	r24, 0x0C	; 12
    2068:	19 f0       	breq	.+6      	; 0x2070 <vfprintf+0x1ae>
    206a:	01 11       	cpse	r16, r1
    206c:	5a c2       	rjmp	.+1204   	; 0x2522 <vfprintf+0x660>
    206e:	9b c2       	rjmp	.+1334   	; 0x25a6 <vfprintf+0x6e4>
    2070:	97 fe       	sbrs	r9, 7
    2072:	10 c0       	rjmp	.+32     	; 0x2094 <vfprintf+0x1d2>
    2074:	4c 0c       	add	r4, r12
    2076:	fc 85       	ldd	r31, Y+12	; 0x0c
    2078:	f4 ff       	sbrs	r31, 4
    207a:	04 c0       	rjmp	.+8      	; 0x2084 <vfprintf+0x1c2>
    207c:	8a 81       	ldd	r24, Y+2	; 0x02
    207e:	81 33       	cpi	r24, 0x31	; 49
    2080:	09 f4       	brne	.+2      	; 0x2084 <vfprintf+0x1c2>
    2082:	4a 94       	dec	r4
    2084:	14 14       	cp	r1, r4
    2086:	74 f5       	brge	.+92     	; 0x20e4 <vfprintf+0x222>
    2088:	28 e0       	ldi	r18, 0x08	; 8
    208a:	24 15       	cp	r18, r4
    208c:	78 f5       	brcc	.+94     	; 0x20ec <vfprintf+0x22a>
    208e:	88 e0       	ldi	r24, 0x08	; 8
    2090:	48 2e       	mov	r4, r24
    2092:	2c c0       	rjmp	.+88     	; 0x20ec <vfprintf+0x22a>
    2094:	96 fc       	sbrc	r9, 6
    2096:	2a c0       	rjmp	.+84     	; 0x20ec <vfprintf+0x22a>
    2098:	81 2f       	mov	r24, r17
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	8c 15       	cp	r24, r12
    209e:	9d 05       	cpc	r25, r13
    20a0:	9c f0       	brlt	.+38     	; 0x20c8 <vfprintf+0x206>
    20a2:	3c ef       	ldi	r19, 0xFC	; 252
    20a4:	c3 16       	cp	r12, r19
    20a6:	3f ef       	ldi	r19, 0xFF	; 255
    20a8:	d3 06       	cpc	r13, r19
    20aa:	74 f0       	brlt	.+28     	; 0x20c8 <vfprintf+0x206>
    20ac:	89 2d       	mov	r24, r9
    20ae:	80 68       	ori	r24, 0x80	; 128
    20b0:	98 2e       	mov	r9, r24
    20b2:	0a c0       	rjmp	.+20     	; 0x20c8 <vfprintf+0x206>
    20b4:	e2 e0       	ldi	r30, 0x02	; 2
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	ec 0f       	add	r30, r28
    20ba:	fd 1f       	adc	r31, r29
    20bc:	e1 0f       	add	r30, r17
    20be:	f1 1d       	adc	r31, r1
    20c0:	80 81       	ld	r24, Z
    20c2:	80 33       	cpi	r24, 0x30	; 48
    20c4:	19 f4       	brne	.+6      	; 0x20cc <vfprintf+0x20a>
    20c6:	11 50       	subi	r17, 0x01	; 1
    20c8:	11 11       	cpse	r17, r1
    20ca:	f4 cf       	rjmp	.-24     	; 0x20b4 <vfprintf+0x1f2>
    20cc:	97 fe       	sbrs	r9, 7
    20ce:	0e c0       	rjmp	.+28     	; 0x20ec <vfprintf+0x22a>
    20d0:	44 24       	eor	r4, r4
    20d2:	43 94       	inc	r4
    20d4:	41 0e       	add	r4, r17
    20d6:	81 2f       	mov	r24, r17
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	c8 16       	cp	r12, r24
    20dc:	d9 06       	cpc	r13, r25
    20de:	2c f4       	brge	.+10     	; 0x20ea <vfprintf+0x228>
    20e0:	1c 19       	sub	r17, r12
    20e2:	04 c0       	rjmp	.+8      	; 0x20ec <vfprintf+0x22a>
    20e4:	44 24       	eor	r4, r4
    20e6:	43 94       	inc	r4
    20e8:	01 c0       	rjmp	.+2      	; 0x20ec <vfprintf+0x22a>
    20ea:	10 e0       	ldi	r17, 0x00	; 0
    20ec:	97 fe       	sbrs	r9, 7
    20ee:	06 c0       	rjmp	.+12     	; 0x20fc <vfprintf+0x23a>
    20f0:	1c 14       	cp	r1, r12
    20f2:	1d 04       	cpc	r1, r13
    20f4:	34 f4       	brge	.+12     	; 0x2102 <vfprintf+0x240>
    20f6:	c6 01       	movw	r24, r12
    20f8:	01 96       	adiw	r24, 0x01	; 1
    20fa:	05 c0       	rjmp	.+10     	; 0x2106 <vfprintf+0x244>
    20fc:	85 e0       	ldi	r24, 0x05	; 5
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	02 c0       	rjmp	.+4      	; 0x2106 <vfprintf+0x244>
    2102:	81 e0       	ldi	r24, 0x01	; 1
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	01 11       	cpse	r16, r1
    2108:	01 96       	adiw	r24, 0x01	; 1
    210a:	11 23       	and	r17, r17
    210c:	31 f0       	breq	.+12     	; 0x211a <vfprintf+0x258>
    210e:	21 2f       	mov	r18, r17
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	2f 5f       	subi	r18, 0xFF	; 255
    2114:	3f 4f       	sbci	r19, 0xFF	; 255
    2116:	82 0f       	add	r24, r18
    2118:	93 1f       	adc	r25, r19
    211a:	25 2d       	mov	r18, r5
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	82 17       	cp	r24, r18
    2120:	93 07       	cpc	r25, r19
    2122:	14 f4       	brge	.+4      	; 0x2128 <vfprintf+0x266>
    2124:	58 1a       	sub	r5, r24
    2126:	01 c0       	rjmp	.+2      	; 0x212a <vfprintf+0x268>
    2128:	51 2c       	mov	r5, r1
    212a:	89 2d       	mov	r24, r9
    212c:	89 70       	andi	r24, 0x09	; 9
    212e:	49 f4       	brne	.+18     	; 0x2142 <vfprintf+0x280>
    2130:	55 20       	and	r5, r5
    2132:	39 f0       	breq	.+14     	; 0x2142 <vfprintf+0x280>
    2134:	b7 01       	movw	r22, r14
    2136:	80 e2       	ldi	r24, 0x20	; 32
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	0e 94 03 14 	call	0x2806	; 0x2806 <fputc>
    213e:	5a 94       	dec	r5
    2140:	f7 cf       	rjmp	.-18     	; 0x2130 <vfprintf+0x26e>
    2142:	00 23       	and	r16, r16
    2144:	29 f0       	breq	.+10     	; 0x2150 <vfprintf+0x28e>
    2146:	b7 01       	movw	r22, r14
    2148:	80 2f       	mov	r24, r16
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	0e 94 03 14 	call	0x2806	; 0x2806 <fputc>
    2150:	93 fc       	sbrc	r9, 3
    2152:	09 c0       	rjmp	.+18     	; 0x2166 <vfprintf+0x2a4>
    2154:	55 20       	and	r5, r5
    2156:	39 f0       	breq	.+14     	; 0x2166 <vfprintf+0x2a4>
    2158:	b7 01       	movw	r22, r14
    215a:	80 e3       	ldi	r24, 0x30	; 48
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	0e 94 03 14 	call	0x2806	; 0x2806 <fputc>
    2162:	5a 94       	dec	r5
    2164:	f7 cf       	rjmp	.-18     	; 0x2154 <vfprintf+0x292>
    2166:	97 fe       	sbrs	r9, 7
    2168:	4c c0       	rjmp	.+152    	; 0x2202 <vfprintf+0x340>
    216a:	46 01       	movw	r8, r12
    216c:	d7 fe       	sbrs	r13, 7
    216e:	02 c0       	rjmp	.+4      	; 0x2174 <vfprintf+0x2b2>
    2170:	81 2c       	mov	r8, r1
    2172:	91 2c       	mov	r9, r1
    2174:	c6 01       	movw	r24, r12
    2176:	88 19       	sub	r24, r8
    2178:	99 09       	sbc	r25, r9
    217a:	f3 01       	movw	r30, r6
    217c:	e8 0f       	add	r30, r24
    217e:	f9 1f       	adc	r31, r25
    2180:	fe 87       	std	Y+14, r31	; 0x0e
    2182:	ed 87       	std	Y+13, r30	; 0x0d
    2184:	96 01       	movw	r18, r12
    2186:	24 19       	sub	r18, r4
    2188:	31 09       	sbc	r19, r1
    218a:	38 8b       	std	Y+16, r19	; 0x10
    218c:	2f 87       	std	Y+15, r18	; 0x0f
    218e:	01 2f       	mov	r16, r17
    2190:	10 e0       	ldi	r17, 0x00	; 0
    2192:	11 95       	neg	r17
    2194:	01 95       	neg	r16
    2196:	11 09       	sbc	r17, r1
    2198:	3f ef       	ldi	r19, 0xFF	; 255
    219a:	83 16       	cp	r8, r19
    219c:	93 06       	cpc	r9, r19
    219e:	29 f4       	brne	.+10     	; 0x21aa <vfprintf+0x2e8>
    21a0:	b7 01       	movw	r22, r14
    21a2:	8e e2       	ldi	r24, 0x2E	; 46
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	0e 94 03 14 	call	0x2806	; 0x2806 <fputc>
    21aa:	c8 14       	cp	r12, r8
    21ac:	d9 04       	cpc	r13, r9
    21ae:	4c f0       	brlt	.+18     	; 0x21c2 <vfprintf+0x300>
    21b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    21b2:	98 89       	ldd	r25, Y+16	; 0x10
    21b4:	88 15       	cp	r24, r8
    21b6:	99 05       	cpc	r25, r9
    21b8:	24 f4       	brge	.+8      	; 0x21c2 <vfprintf+0x300>
    21ba:	ed 85       	ldd	r30, Y+13	; 0x0d
    21bc:	fe 85       	ldd	r31, Y+14	; 0x0e
    21be:	81 81       	ldd	r24, Z+1	; 0x01
    21c0:	01 c0       	rjmp	.+2      	; 0x21c4 <vfprintf+0x302>
    21c2:	80 e3       	ldi	r24, 0x30	; 48
    21c4:	f1 e0       	ldi	r31, 0x01	; 1
    21c6:	8f 1a       	sub	r8, r31
    21c8:	91 08       	sbc	r9, r1
    21ca:	2d 85       	ldd	r18, Y+13	; 0x0d
    21cc:	3e 85       	ldd	r19, Y+14	; 0x0e
    21ce:	2f 5f       	subi	r18, 0xFF	; 255
    21d0:	3f 4f       	sbci	r19, 0xFF	; 255
    21d2:	3e 87       	std	Y+14, r19	; 0x0e
    21d4:	2d 87       	std	Y+13, r18	; 0x0d
    21d6:	80 16       	cp	r8, r16
    21d8:	91 06       	cpc	r9, r17
    21da:	2c f0       	brlt	.+10     	; 0x21e6 <vfprintf+0x324>
    21dc:	b7 01       	movw	r22, r14
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	0e 94 03 14 	call	0x2806	; 0x2806 <fputc>
    21e4:	d9 cf       	rjmp	.-78     	; 0x2198 <vfprintf+0x2d6>
    21e6:	c8 14       	cp	r12, r8
    21e8:	d9 04       	cpc	r13, r9
    21ea:	41 f4       	brne	.+16     	; 0x21fc <vfprintf+0x33a>
    21ec:	9a 81       	ldd	r25, Y+2	; 0x02
    21ee:	96 33       	cpi	r25, 0x36	; 54
    21f0:	20 f4       	brcc	.+8      	; 0x21fa <vfprintf+0x338>
    21f2:	95 33       	cpi	r25, 0x35	; 53
    21f4:	19 f4       	brne	.+6      	; 0x21fc <vfprintf+0x33a>
    21f6:	3c 85       	ldd	r19, Y+12	; 0x0c
    21f8:	34 ff       	sbrs	r19, 4
    21fa:	81 e3       	ldi	r24, 0x31	; 49
    21fc:	b7 01       	movw	r22, r14
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	4e c0       	rjmp	.+156    	; 0x229e <vfprintf+0x3dc>
    2202:	8a 81       	ldd	r24, Y+2	; 0x02
    2204:	81 33       	cpi	r24, 0x31	; 49
    2206:	19 f0       	breq	.+6      	; 0x220e <vfprintf+0x34c>
    2208:	9c 85       	ldd	r25, Y+12	; 0x0c
    220a:	9f 7e       	andi	r25, 0xEF	; 239
    220c:	9c 87       	std	Y+12, r25	; 0x0c
    220e:	b7 01       	movw	r22, r14
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	0e 94 03 14 	call	0x2806	; 0x2806 <fputc>
    2216:	11 11       	cpse	r17, r1
    2218:	05 c0       	rjmp	.+10     	; 0x2224 <vfprintf+0x362>
    221a:	94 fc       	sbrc	r9, 4
    221c:	18 c0       	rjmp	.+48     	; 0x224e <vfprintf+0x38c>
    221e:	85 e6       	ldi	r24, 0x65	; 101
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	17 c0       	rjmp	.+46     	; 0x2252 <vfprintf+0x390>
    2224:	b7 01       	movw	r22, r14
    2226:	8e e2       	ldi	r24, 0x2E	; 46
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	0e 94 03 14 	call	0x2806	; 0x2806 <fputc>
    222e:	1e 5f       	subi	r17, 0xFE	; 254
    2230:	82 e0       	ldi	r24, 0x02	; 2
    2232:	01 e0       	ldi	r16, 0x01	; 1
    2234:	08 0f       	add	r16, r24
    2236:	f3 01       	movw	r30, r6
    2238:	e8 0f       	add	r30, r24
    223a:	f1 1d       	adc	r31, r1
    223c:	80 81       	ld	r24, Z
    223e:	b7 01       	movw	r22, r14
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	0e 94 03 14 	call	0x2806	; 0x2806 <fputc>
    2246:	80 2f       	mov	r24, r16
    2248:	01 13       	cpse	r16, r17
    224a:	f3 cf       	rjmp	.-26     	; 0x2232 <vfprintf+0x370>
    224c:	e6 cf       	rjmp	.-52     	; 0x221a <vfprintf+0x358>
    224e:	85 e4       	ldi	r24, 0x45	; 69
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	b7 01       	movw	r22, r14
    2254:	0e 94 03 14 	call	0x2806	; 0x2806 <fputc>
    2258:	d7 fc       	sbrc	r13, 7
    225a:	06 c0       	rjmp	.+12     	; 0x2268 <vfprintf+0x3a6>
    225c:	c1 14       	cp	r12, r1
    225e:	d1 04       	cpc	r13, r1
    2260:	41 f4       	brne	.+16     	; 0x2272 <vfprintf+0x3b0>
    2262:	ec 85       	ldd	r30, Y+12	; 0x0c
    2264:	e4 ff       	sbrs	r30, 4
    2266:	05 c0       	rjmp	.+10     	; 0x2272 <vfprintf+0x3b0>
    2268:	d1 94       	neg	r13
    226a:	c1 94       	neg	r12
    226c:	d1 08       	sbc	r13, r1
    226e:	8d e2       	ldi	r24, 0x2D	; 45
    2270:	01 c0       	rjmp	.+2      	; 0x2274 <vfprintf+0x3b2>
    2272:	8b e2       	ldi	r24, 0x2B	; 43
    2274:	b7 01       	movw	r22, r14
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	0e 94 03 14 	call	0x2806	; 0x2806 <fputc>
    227c:	80 e3       	ldi	r24, 0x30	; 48
    227e:	2a e0       	ldi	r18, 0x0A	; 10
    2280:	c2 16       	cp	r12, r18
    2282:	d1 04       	cpc	r13, r1
    2284:	2c f0       	brlt	.+10     	; 0x2290 <vfprintf+0x3ce>
    2286:	8f 5f       	subi	r24, 0xFF	; 255
    2288:	fa e0       	ldi	r31, 0x0A	; 10
    228a:	cf 1a       	sub	r12, r31
    228c:	d1 08       	sbc	r13, r1
    228e:	f7 cf       	rjmp	.-18     	; 0x227e <vfprintf+0x3bc>
    2290:	b7 01       	movw	r22, r14
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	0e 94 03 14 	call	0x2806	; 0x2806 <fputc>
    2298:	b7 01       	movw	r22, r14
    229a:	c6 01       	movw	r24, r12
    229c:	c0 96       	adiw	r24, 0x30	; 48
    229e:	0e 94 03 14 	call	0x2806	; 0x2806 <fputc>
    22a2:	54 c1       	rjmp	.+680    	; 0x254c <vfprintf+0x68a>
    22a4:	83 36       	cpi	r24, 0x63	; 99
    22a6:	31 f0       	breq	.+12     	; 0x22b4 <vfprintf+0x3f2>
    22a8:	83 37       	cpi	r24, 0x73	; 115
    22aa:	79 f0       	breq	.+30     	; 0x22ca <vfprintf+0x408>
    22ac:	83 35       	cpi	r24, 0x53	; 83
    22ae:	09 f0       	breq	.+2      	; 0x22b2 <vfprintf+0x3f0>
    22b0:	56 c0       	rjmp	.+172    	; 0x235e <vfprintf+0x49c>
    22b2:	20 c0       	rjmp	.+64     	; 0x22f4 <vfprintf+0x432>
    22b4:	56 01       	movw	r10, r12
    22b6:	32 e0       	ldi	r19, 0x02	; 2
    22b8:	a3 0e       	add	r10, r19
    22ba:	b1 1c       	adc	r11, r1
    22bc:	f6 01       	movw	r30, r12
    22be:	80 81       	ld	r24, Z
    22c0:	89 83       	std	Y+1, r24	; 0x01
    22c2:	01 e0       	ldi	r16, 0x01	; 1
    22c4:	10 e0       	ldi	r17, 0x00	; 0
    22c6:	63 01       	movw	r12, r6
    22c8:	12 c0       	rjmp	.+36     	; 0x22ee <vfprintf+0x42c>
    22ca:	56 01       	movw	r10, r12
    22cc:	f2 e0       	ldi	r31, 0x02	; 2
    22ce:	af 0e       	add	r10, r31
    22d0:	b1 1c       	adc	r11, r1
    22d2:	f6 01       	movw	r30, r12
    22d4:	c0 80       	ld	r12, Z
    22d6:	d1 80       	ldd	r13, Z+1	; 0x01
    22d8:	96 fe       	sbrs	r9, 6
    22da:	03 c0       	rjmp	.+6      	; 0x22e2 <vfprintf+0x420>
    22dc:	61 2f       	mov	r22, r17
    22de:	70 e0       	ldi	r23, 0x00	; 0
    22e0:	02 c0       	rjmp	.+4      	; 0x22e6 <vfprintf+0x424>
    22e2:	6f ef       	ldi	r22, 0xFF	; 255
    22e4:	7f ef       	ldi	r23, 0xFF	; 255
    22e6:	c6 01       	movw	r24, r12
    22e8:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <strnlen>
    22ec:	8c 01       	movw	r16, r24
    22ee:	f9 2d       	mov	r31, r9
    22f0:	ff 77       	andi	r31, 0x7F	; 127
    22f2:	14 c0       	rjmp	.+40     	; 0x231c <vfprintf+0x45a>
    22f4:	56 01       	movw	r10, r12
    22f6:	22 e0       	ldi	r18, 0x02	; 2
    22f8:	a2 0e       	add	r10, r18
    22fa:	b1 1c       	adc	r11, r1
    22fc:	f6 01       	movw	r30, r12
    22fe:	c0 80       	ld	r12, Z
    2300:	d1 80       	ldd	r13, Z+1	; 0x01
    2302:	96 fe       	sbrs	r9, 6
    2304:	03 c0       	rjmp	.+6      	; 0x230c <vfprintf+0x44a>
    2306:	61 2f       	mov	r22, r17
    2308:	70 e0       	ldi	r23, 0x00	; 0
    230a:	02 c0       	rjmp	.+4      	; 0x2310 <vfprintf+0x44e>
    230c:	6f ef       	ldi	r22, 0xFF	; 255
    230e:	7f ef       	ldi	r23, 0xFF	; 255
    2310:	c6 01       	movw	r24, r12
    2312:	0e 94 ed 13 	call	0x27da	; 0x27da <strnlen_P>
    2316:	8c 01       	movw	r16, r24
    2318:	f9 2d       	mov	r31, r9
    231a:	f0 68       	ori	r31, 0x80	; 128
    231c:	9f 2e       	mov	r9, r31
    231e:	f3 fd       	sbrc	r31, 3
    2320:	1a c0       	rjmp	.+52     	; 0x2356 <vfprintf+0x494>
    2322:	85 2d       	mov	r24, r5
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	08 17       	cp	r16, r24
    2328:	19 07       	cpc	r17, r25
    232a:	a8 f4       	brcc	.+42     	; 0x2356 <vfprintf+0x494>
    232c:	b7 01       	movw	r22, r14
    232e:	80 e2       	ldi	r24, 0x20	; 32
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	0e 94 03 14 	call	0x2806	; 0x2806 <fputc>
    2336:	5a 94       	dec	r5
    2338:	f4 cf       	rjmp	.-24     	; 0x2322 <vfprintf+0x460>
    233a:	f6 01       	movw	r30, r12
    233c:	97 fc       	sbrc	r9, 7
    233e:	85 91       	lpm	r24, Z+
    2340:	97 fe       	sbrs	r9, 7
    2342:	81 91       	ld	r24, Z+
    2344:	6f 01       	movw	r12, r30
    2346:	b7 01       	movw	r22, r14
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	0e 94 03 14 	call	0x2806	; 0x2806 <fputc>
    234e:	51 10       	cpse	r5, r1
    2350:	5a 94       	dec	r5
    2352:	01 50       	subi	r16, 0x01	; 1
    2354:	11 09       	sbc	r17, r1
    2356:	01 15       	cp	r16, r1
    2358:	11 05       	cpc	r17, r1
    235a:	79 f7       	brne	.-34     	; 0x233a <vfprintf+0x478>
    235c:	f7 c0       	rjmp	.+494    	; 0x254c <vfprintf+0x68a>
    235e:	84 36       	cpi	r24, 0x64	; 100
    2360:	11 f0       	breq	.+4      	; 0x2366 <vfprintf+0x4a4>
    2362:	89 36       	cpi	r24, 0x69	; 105
    2364:	61 f5       	brne	.+88     	; 0x23be <vfprintf+0x4fc>
    2366:	56 01       	movw	r10, r12
    2368:	97 fe       	sbrs	r9, 7
    236a:	09 c0       	rjmp	.+18     	; 0x237e <vfprintf+0x4bc>
    236c:	24 e0       	ldi	r18, 0x04	; 4
    236e:	a2 0e       	add	r10, r18
    2370:	b1 1c       	adc	r11, r1
    2372:	f6 01       	movw	r30, r12
    2374:	60 81       	ld	r22, Z
    2376:	71 81       	ldd	r23, Z+1	; 0x01
    2378:	82 81       	ldd	r24, Z+2	; 0x02
    237a:	93 81       	ldd	r25, Z+3	; 0x03
    237c:	0a c0       	rjmp	.+20     	; 0x2392 <vfprintf+0x4d0>
    237e:	f2 e0       	ldi	r31, 0x02	; 2
    2380:	af 0e       	add	r10, r31
    2382:	b1 1c       	adc	r11, r1
    2384:	f6 01       	movw	r30, r12
    2386:	60 81       	ld	r22, Z
    2388:	71 81       	ldd	r23, Z+1	; 0x01
    238a:	07 2e       	mov	r0, r23
    238c:	00 0c       	add	r0, r0
    238e:	88 0b       	sbc	r24, r24
    2390:	99 0b       	sbc	r25, r25
    2392:	f9 2d       	mov	r31, r9
    2394:	ff 76       	andi	r31, 0x6F	; 111
    2396:	9f 2e       	mov	r9, r31
    2398:	97 ff       	sbrs	r25, 7
    239a:	09 c0       	rjmp	.+18     	; 0x23ae <vfprintf+0x4ec>
    239c:	90 95       	com	r25
    239e:	80 95       	com	r24
    23a0:	70 95       	com	r23
    23a2:	61 95       	neg	r22
    23a4:	7f 4f       	sbci	r23, 0xFF	; 255
    23a6:	8f 4f       	sbci	r24, 0xFF	; 255
    23a8:	9f 4f       	sbci	r25, 0xFF	; 255
    23aa:	f0 68       	ori	r31, 0x80	; 128
    23ac:	9f 2e       	mov	r9, r31
    23ae:	2a e0       	ldi	r18, 0x0A	; 10
    23b0:	30 e0       	ldi	r19, 0x00	; 0
    23b2:	a3 01       	movw	r20, r6
    23b4:	0e 94 77 14 	call	0x28ee	; 0x28ee <__ultoa_invert>
    23b8:	c8 2e       	mov	r12, r24
    23ba:	c6 18       	sub	r12, r6
    23bc:	3f c0       	rjmp	.+126    	; 0x243c <vfprintf+0x57a>
    23be:	09 2d       	mov	r16, r9
    23c0:	85 37       	cpi	r24, 0x75	; 117
    23c2:	21 f4       	brne	.+8      	; 0x23cc <vfprintf+0x50a>
    23c4:	0f 7e       	andi	r16, 0xEF	; 239
    23c6:	2a e0       	ldi	r18, 0x0A	; 10
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	1d c0       	rjmp	.+58     	; 0x2406 <vfprintf+0x544>
    23cc:	09 7f       	andi	r16, 0xF9	; 249
    23ce:	8f 36       	cpi	r24, 0x6F	; 111
    23d0:	91 f0       	breq	.+36     	; 0x23f6 <vfprintf+0x534>
    23d2:	18 f4       	brcc	.+6      	; 0x23da <vfprintf+0x518>
    23d4:	88 35       	cpi	r24, 0x58	; 88
    23d6:	59 f0       	breq	.+22     	; 0x23ee <vfprintf+0x52c>
    23d8:	c3 c0       	rjmp	.+390    	; 0x2560 <vfprintf+0x69e>
    23da:	80 37       	cpi	r24, 0x70	; 112
    23dc:	19 f0       	breq	.+6      	; 0x23e4 <vfprintf+0x522>
    23de:	88 37       	cpi	r24, 0x78	; 120
    23e0:	11 f0       	breq	.+4      	; 0x23e6 <vfprintf+0x524>
    23e2:	be c0       	rjmp	.+380    	; 0x2560 <vfprintf+0x69e>
    23e4:	00 61       	ori	r16, 0x10	; 16
    23e6:	04 ff       	sbrs	r16, 4
    23e8:	09 c0       	rjmp	.+18     	; 0x23fc <vfprintf+0x53a>
    23ea:	04 60       	ori	r16, 0x04	; 4
    23ec:	07 c0       	rjmp	.+14     	; 0x23fc <vfprintf+0x53a>
    23ee:	94 fe       	sbrs	r9, 4
    23f0:	08 c0       	rjmp	.+16     	; 0x2402 <vfprintf+0x540>
    23f2:	06 60       	ori	r16, 0x06	; 6
    23f4:	06 c0       	rjmp	.+12     	; 0x2402 <vfprintf+0x540>
    23f6:	28 e0       	ldi	r18, 0x08	; 8
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	05 c0       	rjmp	.+10     	; 0x2406 <vfprintf+0x544>
    23fc:	20 e1       	ldi	r18, 0x10	; 16
    23fe:	30 e0       	ldi	r19, 0x00	; 0
    2400:	02 c0       	rjmp	.+4      	; 0x2406 <vfprintf+0x544>
    2402:	20 e1       	ldi	r18, 0x10	; 16
    2404:	32 e0       	ldi	r19, 0x02	; 2
    2406:	56 01       	movw	r10, r12
    2408:	07 ff       	sbrs	r16, 7
    240a:	09 c0       	rjmp	.+18     	; 0x241e <vfprintf+0x55c>
    240c:	84 e0       	ldi	r24, 0x04	; 4
    240e:	a8 0e       	add	r10, r24
    2410:	b1 1c       	adc	r11, r1
    2412:	f6 01       	movw	r30, r12
    2414:	60 81       	ld	r22, Z
    2416:	71 81       	ldd	r23, Z+1	; 0x01
    2418:	82 81       	ldd	r24, Z+2	; 0x02
    241a:	93 81       	ldd	r25, Z+3	; 0x03
    241c:	08 c0       	rjmp	.+16     	; 0x242e <vfprintf+0x56c>
    241e:	f2 e0       	ldi	r31, 0x02	; 2
    2420:	af 0e       	add	r10, r31
    2422:	b1 1c       	adc	r11, r1
    2424:	f6 01       	movw	r30, r12
    2426:	60 81       	ld	r22, Z
    2428:	71 81       	ldd	r23, Z+1	; 0x01
    242a:	80 e0       	ldi	r24, 0x00	; 0
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	a3 01       	movw	r20, r6
    2430:	0e 94 77 14 	call	0x28ee	; 0x28ee <__ultoa_invert>
    2434:	c8 2e       	mov	r12, r24
    2436:	c6 18       	sub	r12, r6
    2438:	0f 77       	andi	r16, 0x7F	; 127
    243a:	90 2e       	mov	r9, r16
    243c:	96 fe       	sbrs	r9, 6
    243e:	0b c0       	rjmp	.+22     	; 0x2456 <vfprintf+0x594>
    2440:	09 2d       	mov	r16, r9
    2442:	0e 7f       	andi	r16, 0xFE	; 254
    2444:	c1 16       	cp	r12, r17
    2446:	50 f4       	brcc	.+20     	; 0x245c <vfprintf+0x59a>
    2448:	94 fe       	sbrs	r9, 4
    244a:	0a c0       	rjmp	.+20     	; 0x2460 <vfprintf+0x59e>
    244c:	92 fc       	sbrc	r9, 2
    244e:	08 c0       	rjmp	.+16     	; 0x2460 <vfprintf+0x59e>
    2450:	09 2d       	mov	r16, r9
    2452:	0e 7e       	andi	r16, 0xEE	; 238
    2454:	05 c0       	rjmp	.+10     	; 0x2460 <vfprintf+0x59e>
    2456:	dc 2c       	mov	r13, r12
    2458:	09 2d       	mov	r16, r9
    245a:	03 c0       	rjmp	.+6      	; 0x2462 <vfprintf+0x5a0>
    245c:	dc 2c       	mov	r13, r12
    245e:	01 c0       	rjmp	.+2      	; 0x2462 <vfprintf+0x5a0>
    2460:	d1 2e       	mov	r13, r17
    2462:	04 ff       	sbrs	r16, 4
    2464:	0d c0       	rjmp	.+26     	; 0x2480 <vfprintf+0x5be>
    2466:	fe 01       	movw	r30, r28
    2468:	ec 0d       	add	r30, r12
    246a:	f1 1d       	adc	r31, r1
    246c:	80 81       	ld	r24, Z
    246e:	80 33       	cpi	r24, 0x30	; 48
    2470:	11 f4       	brne	.+4      	; 0x2476 <vfprintf+0x5b4>
    2472:	09 7e       	andi	r16, 0xE9	; 233
    2474:	09 c0       	rjmp	.+18     	; 0x2488 <vfprintf+0x5c6>
    2476:	02 ff       	sbrs	r16, 2
    2478:	06 c0       	rjmp	.+12     	; 0x2486 <vfprintf+0x5c4>
    247a:	d3 94       	inc	r13
    247c:	d3 94       	inc	r13
    247e:	04 c0       	rjmp	.+8      	; 0x2488 <vfprintf+0x5c6>
    2480:	80 2f       	mov	r24, r16
    2482:	86 78       	andi	r24, 0x86	; 134
    2484:	09 f0       	breq	.+2      	; 0x2488 <vfprintf+0x5c6>
    2486:	d3 94       	inc	r13
    2488:	03 fd       	sbrc	r16, 3
    248a:	11 c0       	rjmp	.+34     	; 0x24ae <vfprintf+0x5ec>
    248c:	00 ff       	sbrs	r16, 0
    248e:	06 c0       	rjmp	.+12     	; 0x249c <vfprintf+0x5da>
    2490:	1c 2d       	mov	r17, r12
    2492:	d5 14       	cp	r13, r5
    2494:	80 f4       	brcc	.+32     	; 0x24b6 <vfprintf+0x5f4>
    2496:	15 0d       	add	r17, r5
    2498:	1d 19       	sub	r17, r13
    249a:	0d c0       	rjmp	.+26     	; 0x24b6 <vfprintf+0x5f4>
    249c:	d5 14       	cp	r13, r5
    249e:	58 f4       	brcc	.+22     	; 0x24b6 <vfprintf+0x5f4>
    24a0:	b7 01       	movw	r22, r14
    24a2:	80 e2       	ldi	r24, 0x20	; 32
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	0e 94 03 14 	call	0x2806	; 0x2806 <fputc>
    24aa:	d3 94       	inc	r13
    24ac:	f7 cf       	rjmp	.-18     	; 0x249c <vfprintf+0x5da>
    24ae:	d5 14       	cp	r13, r5
    24b0:	10 f4       	brcc	.+4      	; 0x24b6 <vfprintf+0x5f4>
    24b2:	5d 18       	sub	r5, r13
    24b4:	01 c0       	rjmp	.+2      	; 0x24b8 <vfprintf+0x5f6>
    24b6:	51 2c       	mov	r5, r1
    24b8:	04 ff       	sbrs	r16, 4
    24ba:	10 c0       	rjmp	.+32     	; 0x24dc <vfprintf+0x61a>
    24bc:	b7 01       	movw	r22, r14
    24be:	80 e3       	ldi	r24, 0x30	; 48
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	0e 94 03 14 	call	0x2806	; 0x2806 <fputc>
    24c6:	02 ff       	sbrs	r16, 2
    24c8:	17 c0       	rjmp	.+46     	; 0x24f8 <vfprintf+0x636>
    24ca:	01 fd       	sbrc	r16, 1
    24cc:	03 c0       	rjmp	.+6      	; 0x24d4 <vfprintf+0x612>
    24ce:	88 e7       	ldi	r24, 0x78	; 120
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	02 c0       	rjmp	.+4      	; 0x24d8 <vfprintf+0x616>
    24d4:	88 e5       	ldi	r24, 0x58	; 88
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	b7 01       	movw	r22, r14
    24da:	0c c0       	rjmp	.+24     	; 0x24f4 <vfprintf+0x632>
    24dc:	80 2f       	mov	r24, r16
    24de:	86 78       	andi	r24, 0x86	; 134
    24e0:	59 f0       	breq	.+22     	; 0x24f8 <vfprintf+0x636>
    24e2:	01 ff       	sbrs	r16, 1
    24e4:	02 c0       	rjmp	.+4      	; 0x24ea <vfprintf+0x628>
    24e6:	8b e2       	ldi	r24, 0x2B	; 43
    24e8:	01 c0       	rjmp	.+2      	; 0x24ec <vfprintf+0x62a>
    24ea:	80 e2       	ldi	r24, 0x20	; 32
    24ec:	07 fd       	sbrc	r16, 7
    24ee:	8d e2       	ldi	r24, 0x2D	; 45
    24f0:	b7 01       	movw	r22, r14
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	0e 94 03 14 	call	0x2806	; 0x2806 <fputc>
    24f8:	c1 16       	cp	r12, r17
    24fa:	38 f4       	brcc	.+14     	; 0x250a <vfprintf+0x648>
    24fc:	b7 01       	movw	r22, r14
    24fe:	80 e3       	ldi	r24, 0x30	; 48
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	0e 94 03 14 	call	0x2806	; 0x2806 <fputc>
    2506:	11 50       	subi	r17, 0x01	; 1
    2508:	f7 cf       	rjmp	.-18     	; 0x24f8 <vfprintf+0x636>
    250a:	ca 94       	dec	r12
    250c:	f3 01       	movw	r30, r6
    250e:	ec 0d       	add	r30, r12
    2510:	f1 1d       	adc	r31, r1
    2512:	80 81       	ld	r24, Z
    2514:	b7 01       	movw	r22, r14
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	0e 94 03 14 	call	0x2806	; 0x2806 <fputc>
    251c:	c1 10       	cpse	r12, r1
    251e:	f5 cf       	rjmp	.-22     	; 0x250a <vfprintf+0x648>
    2520:	15 c0       	rjmp	.+42     	; 0x254c <vfprintf+0x68a>
    2522:	f4 e0       	ldi	r31, 0x04	; 4
    2524:	f5 15       	cp	r31, r5
    2526:	60 f5       	brcc	.+88     	; 0x2580 <vfprintf+0x6be>
    2528:	84 e0       	ldi	r24, 0x04	; 4
    252a:	58 1a       	sub	r5, r24
    252c:	93 fe       	sbrs	r9, 3
    252e:	1f c0       	rjmp	.+62     	; 0x256e <vfprintf+0x6ac>
    2530:	01 11       	cpse	r16, r1
    2532:	27 c0       	rjmp	.+78     	; 0x2582 <vfprintf+0x6c0>
    2534:	2c 85       	ldd	r18, Y+12	; 0x0c
    2536:	23 ff       	sbrs	r18, 3
    2538:	2a c0       	rjmp	.+84     	; 0x258e <vfprintf+0x6cc>
    253a:	08 e6       	ldi	r16, 0x68	; 104
    253c:	10 e0       	ldi	r17, 0x00	; 0
    253e:	39 2d       	mov	r19, r9
    2540:	30 71       	andi	r19, 0x10	; 16
    2542:	93 2e       	mov	r9, r19
    2544:	f8 01       	movw	r30, r16
    2546:	84 91       	lpm	r24, Z
    2548:	81 11       	cpse	r24, r1
    254a:	24 c0       	rjmp	.+72     	; 0x2594 <vfprintf+0x6d2>
    254c:	55 20       	and	r5, r5
    254e:	09 f4       	brne	.+2      	; 0x2552 <vfprintf+0x690>
    2550:	e4 cc       	rjmp	.-1592   	; 0x1f1a <vfprintf+0x58>
    2552:	b7 01       	movw	r22, r14
    2554:	80 e2       	ldi	r24, 0x20	; 32
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	0e 94 03 14 	call	0x2806	; 0x2806 <fputc>
    255c:	5a 94       	dec	r5
    255e:	f6 cf       	rjmp	.-20     	; 0x254c <vfprintf+0x68a>
    2560:	f7 01       	movw	r30, r14
    2562:	86 81       	ldd	r24, Z+6	; 0x06
    2564:	97 81       	ldd	r25, Z+7	; 0x07
    2566:	26 c0       	rjmp	.+76     	; 0x25b4 <vfprintf+0x6f2>
    2568:	8f ef       	ldi	r24, 0xFF	; 255
    256a:	9f ef       	ldi	r25, 0xFF	; 255
    256c:	23 c0       	rjmp	.+70     	; 0x25b4 <vfprintf+0x6f2>
    256e:	b7 01       	movw	r22, r14
    2570:	80 e2       	ldi	r24, 0x20	; 32
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	0e 94 03 14 	call	0x2806	; 0x2806 <fputc>
    2578:	5a 94       	dec	r5
    257a:	51 10       	cpse	r5, r1
    257c:	f8 cf       	rjmp	.-16     	; 0x256e <vfprintf+0x6ac>
    257e:	d8 cf       	rjmp	.-80     	; 0x2530 <vfprintf+0x66e>
    2580:	51 2c       	mov	r5, r1
    2582:	b7 01       	movw	r22, r14
    2584:	80 2f       	mov	r24, r16
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	0e 94 03 14 	call	0x2806	; 0x2806 <fputc>
    258c:	d3 cf       	rjmp	.-90     	; 0x2534 <vfprintf+0x672>
    258e:	0c e6       	ldi	r16, 0x6C	; 108
    2590:	10 e0       	ldi	r17, 0x00	; 0
    2592:	d5 cf       	rjmp	.-86     	; 0x253e <vfprintf+0x67c>
    2594:	91 10       	cpse	r9, r1
    2596:	80 52       	subi	r24, 0x20	; 32
    2598:	b7 01       	movw	r22, r14
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	0e 94 03 14 	call	0x2806	; 0x2806 <fputc>
    25a0:	0f 5f       	subi	r16, 0xFF	; 255
    25a2:	1f 4f       	sbci	r17, 0xFF	; 255
    25a4:	cf cf       	rjmp	.-98     	; 0x2544 <vfprintf+0x682>
    25a6:	23 e0       	ldi	r18, 0x03	; 3
    25a8:	25 15       	cp	r18, r5
    25aa:	10 f4       	brcc	.+4      	; 0x25b0 <vfprintf+0x6ee>
    25ac:	83 e0       	ldi	r24, 0x03	; 3
    25ae:	bd cf       	rjmp	.-134    	; 0x252a <vfprintf+0x668>
    25b0:	51 2c       	mov	r5, r1
    25b2:	c0 cf       	rjmp	.-128    	; 0x2534 <vfprintf+0x672>
    25b4:	60 96       	adiw	r28, 0x10	; 16
    25b6:	e2 e1       	ldi	r30, 0x12	; 18
    25b8:	0c 94 fa 12 	jmp	0x25f4	; 0x25f4 <__epilogue_restores__>

000025bc <__prologue_saves__>:
    25bc:	2f 92       	push	r2
    25be:	3f 92       	push	r3
    25c0:	4f 92       	push	r4
    25c2:	5f 92       	push	r5
    25c4:	6f 92       	push	r6
    25c6:	7f 92       	push	r7
    25c8:	8f 92       	push	r8
    25ca:	9f 92       	push	r9
    25cc:	af 92       	push	r10
    25ce:	bf 92       	push	r11
    25d0:	cf 92       	push	r12
    25d2:	df 92       	push	r13
    25d4:	ef 92       	push	r14
    25d6:	ff 92       	push	r15
    25d8:	0f 93       	push	r16
    25da:	1f 93       	push	r17
    25dc:	cf 93       	push	r28
    25de:	df 93       	push	r29
    25e0:	cd b7       	in	r28, 0x3d	; 61
    25e2:	de b7       	in	r29, 0x3e	; 62
    25e4:	ca 1b       	sub	r28, r26
    25e6:	db 0b       	sbc	r29, r27
    25e8:	0f b6       	in	r0, 0x3f	; 63
    25ea:	f8 94       	cli
    25ec:	de bf       	out	0x3e, r29	; 62
    25ee:	0f be       	out	0x3f, r0	; 63
    25f0:	cd bf       	out	0x3d, r28	; 61
    25f2:	09 94       	ijmp

000025f4 <__epilogue_restores__>:
    25f4:	2a 88       	ldd	r2, Y+18	; 0x12
    25f6:	39 88       	ldd	r3, Y+17	; 0x11
    25f8:	48 88       	ldd	r4, Y+16	; 0x10
    25fa:	5f 84       	ldd	r5, Y+15	; 0x0f
    25fc:	6e 84       	ldd	r6, Y+14	; 0x0e
    25fe:	7d 84       	ldd	r7, Y+13	; 0x0d
    2600:	8c 84       	ldd	r8, Y+12	; 0x0c
    2602:	9b 84       	ldd	r9, Y+11	; 0x0b
    2604:	aa 84       	ldd	r10, Y+10	; 0x0a
    2606:	b9 84       	ldd	r11, Y+9	; 0x09
    2608:	c8 84       	ldd	r12, Y+8	; 0x08
    260a:	df 80       	ldd	r13, Y+7	; 0x07
    260c:	ee 80       	ldd	r14, Y+6	; 0x06
    260e:	fd 80       	ldd	r15, Y+5	; 0x05
    2610:	0c 81       	ldd	r16, Y+4	; 0x04
    2612:	1b 81       	ldd	r17, Y+3	; 0x03
    2614:	aa 81       	ldd	r26, Y+2	; 0x02
    2616:	b9 81       	ldd	r27, Y+1	; 0x01
    2618:	ce 0f       	add	r28, r30
    261a:	d1 1d       	adc	r29, r1
    261c:	0f b6       	in	r0, 0x3f	; 63
    261e:	f8 94       	cli
    2620:	de bf       	out	0x3e, r29	; 62
    2622:	0f be       	out	0x3f, r0	; 63
    2624:	cd bf       	out	0x3d, r28	; 61
    2626:	ed 01       	movw	r28, r26
    2628:	08 95       	ret

0000262a <__ftoa_engine>:
    262a:	28 30       	cpi	r18, 0x08	; 8
    262c:	08 f0       	brcs	.+2      	; 0x2630 <__ftoa_engine+0x6>
    262e:	27 e0       	ldi	r18, 0x07	; 7
    2630:	33 27       	eor	r19, r19
    2632:	da 01       	movw	r26, r20
    2634:	99 0f       	add	r25, r25
    2636:	31 1d       	adc	r19, r1
    2638:	87 fd       	sbrc	r24, 7
    263a:	91 60       	ori	r25, 0x01	; 1
    263c:	00 96       	adiw	r24, 0x00	; 0
    263e:	61 05       	cpc	r22, r1
    2640:	71 05       	cpc	r23, r1
    2642:	39 f4       	brne	.+14     	; 0x2652 <__ftoa_engine+0x28>
    2644:	32 60       	ori	r19, 0x02	; 2
    2646:	2e 5f       	subi	r18, 0xFE	; 254
    2648:	3d 93       	st	X+, r19
    264a:	30 e3       	ldi	r19, 0x30	; 48
    264c:	2a 95       	dec	r18
    264e:	e1 f7       	brne	.-8      	; 0x2648 <__ftoa_engine+0x1e>
    2650:	08 95       	ret
    2652:	9f 3f       	cpi	r25, 0xFF	; 255
    2654:	30 f0       	brcs	.+12     	; 0x2662 <__ftoa_engine+0x38>
    2656:	80 38       	cpi	r24, 0x80	; 128
    2658:	71 05       	cpc	r23, r1
    265a:	61 05       	cpc	r22, r1
    265c:	09 f0       	breq	.+2      	; 0x2660 <__ftoa_engine+0x36>
    265e:	3c 5f       	subi	r19, 0xFC	; 252
    2660:	3c 5f       	subi	r19, 0xFC	; 252
    2662:	3d 93       	st	X+, r19
    2664:	91 30       	cpi	r25, 0x01	; 1
    2666:	08 f0       	brcs	.+2      	; 0x266a <__ftoa_engine+0x40>
    2668:	80 68       	ori	r24, 0x80	; 128
    266a:	91 1d       	adc	r25, r1
    266c:	df 93       	push	r29
    266e:	cf 93       	push	r28
    2670:	1f 93       	push	r17
    2672:	0f 93       	push	r16
    2674:	ff 92       	push	r15
    2676:	ef 92       	push	r14
    2678:	19 2f       	mov	r17, r25
    267a:	98 7f       	andi	r25, 0xF8	; 248
    267c:	96 95       	lsr	r25
    267e:	e9 2f       	mov	r30, r25
    2680:	96 95       	lsr	r25
    2682:	96 95       	lsr	r25
    2684:	e9 0f       	add	r30, r25
    2686:	ff 27       	eor	r31, r31
    2688:	e6 53       	subi	r30, 0x36	; 54
    268a:	ff 4f       	sbci	r31, 0xFF	; 255
    268c:	99 27       	eor	r25, r25
    268e:	33 27       	eor	r19, r19
    2690:	ee 24       	eor	r14, r14
    2692:	ff 24       	eor	r15, r15
    2694:	a7 01       	movw	r20, r14
    2696:	e7 01       	movw	r28, r14
    2698:	05 90       	lpm	r0, Z+
    269a:	08 94       	sec
    269c:	07 94       	ror	r0
    269e:	28 f4       	brcc	.+10     	; 0x26aa <__ftoa_engine+0x80>
    26a0:	36 0f       	add	r19, r22
    26a2:	e7 1e       	adc	r14, r23
    26a4:	f8 1e       	adc	r15, r24
    26a6:	49 1f       	adc	r20, r25
    26a8:	51 1d       	adc	r21, r1
    26aa:	66 0f       	add	r22, r22
    26ac:	77 1f       	adc	r23, r23
    26ae:	88 1f       	adc	r24, r24
    26b0:	99 1f       	adc	r25, r25
    26b2:	06 94       	lsr	r0
    26b4:	a1 f7       	brne	.-24     	; 0x269e <__ftoa_engine+0x74>
    26b6:	05 90       	lpm	r0, Z+
    26b8:	07 94       	ror	r0
    26ba:	28 f4       	brcc	.+10     	; 0x26c6 <__ftoa_engine+0x9c>
    26bc:	e7 0e       	add	r14, r23
    26be:	f8 1e       	adc	r15, r24
    26c0:	49 1f       	adc	r20, r25
    26c2:	56 1f       	adc	r21, r22
    26c4:	c1 1d       	adc	r28, r1
    26c6:	77 0f       	add	r23, r23
    26c8:	88 1f       	adc	r24, r24
    26ca:	99 1f       	adc	r25, r25
    26cc:	66 1f       	adc	r22, r22
    26ce:	06 94       	lsr	r0
    26d0:	a1 f7       	brne	.-24     	; 0x26ba <__ftoa_engine+0x90>
    26d2:	05 90       	lpm	r0, Z+
    26d4:	07 94       	ror	r0
    26d6:	28 f4       	brcc	.+10     	; 0x26e2 <__ftoa_engine+0xb8>
    26d8:	f8 0e       	add	r15, r24
    26da:	49 1f       	adc	r20, r25
    26dc:	56 1f       	adc	r21, r22
    26de:	c7 1f       	adc	r28, r23
    26e0:	d1 1d       	adc	r29, r1
    26e2:	88 0f       	add	r24, r24
    26e4:	99 1f       	adc	r25, r25
    26e6:	66 1f       	adc	r22, r22
    26e8:	77 1f       	adc	r23, r23
    26ea:	06 94       	lsr	r0
    26ec:	a1 f7       	brne	.-24     	; 0x26d6 <__ftoa_engine+0xac>
    26ee:	05 90       	lpm	r0, Z+
    26f0:	07 94       	ror	r0
    26f2:	20 f4       	brcc	.+8      	; 0x26fc <__ftoa_engine+0xd2>
    26f4:	49 0f       	add	r20, r25
    26f6:	56 1f       	adc	r21, r22
    26f8:	c7 1f       	adc	r28, r23
    26fa:	d8 1f       	adc	r29, r24
    26fc:	99 0f       	add	r25, r25
    26fe:	66 1f       	adc	r22, r22
    2700:	77 1f       	adc	r23, r23
    2702:	88 1f       	adc	r24, r24
    2704:	06 94       	lsr	r0
    2706:	a9 f7       	brne	.-22     	; 0x26f2 <__ftoa_engine+0xc8>
    2708:	84 91       	lpm	r24, Z
    270a:	10 95       	com	r17
    270c:	17 70       	andi	r17, 0x07	; 7
    270e:	41 f0       	breq	.+16     	; 0x2720 <__ftoa_engine+0xf6>
    2710:	d6 95       	lsr	r29
    2712:	c7 95       	ror	r28
    2714:	57 95       	ror	r21
    2716:	47 95       	ror	r20
    2718:	f7 94       	ror	r15
    271a:	e7 94       	ror	r14
    271c:	1a 95       	dec	r17
    271e:	c1 f7       	brne	.-16     	; 0x2710 <__ftoa_engine+0xe6>
    2720:	e0 e7       	ldi	r30, 0x70	; 112
    2722:	f0 e0       	ldi	r31, 0x00	; 0
    2724:	68 94       	set
    2726:	15 90       	lpm	r1, Z+
    2728:	15 91       	lpm	r17, Z+
    272a:	35 91       	lpm	r19, Z+
    272c:	65 91       	lpm	r22, Z+
    272e:	95 91       	lpm	r25, Z+
    2730:	05 90       	lpm	r0, Z+
    2732:	7f e2       	ldi	r23, 0x2F	; 47
    2734:	73 95       	inc	r23
    2736:	e1 18       	sub	r14, r1
    2738:	f1 0a       	sbc	r15, r17
    273a:	43 0b       	sbc	r20, r19
    273c:	56 0b       	sbc	r21, r22
    273e:	c9 0b       	sbc	r28, r25
    2740:	d0 09       	sbc	r29, r0
    2742:	c0 f7       	brcc	.-16     	; 0x2734 <__ftoa_engine+0x10a>
    2744:	e1 0c       	add	r14, r1
    2746:	f1 1e       	adc	r15, r17
    2748:	43 1f       	adc	r20, r19
    274a:	56 1f       	adc	r21, r22
    274c:	c9 1f       	adc	r28, r25
    274e:	d0 1d       	adc	r29, r0
    2750:	7e f4       	brtc	.+30     	; 0x2770 <__ftoa_engine+0x146>
    2752:	70 33       	cpi	r23, 0x30	; 48
    2754:	11 f4       	brne	.+4      	; 0x275a <__ftoa_engine+0x130>
    2756:	8a 95       	dec	r24
    2758:	e6 cf       	rjmp	.-52     	; 0x2726 <__ftoa_engine+0xfc>
    275a:	e8 94       	clt
    275c:	01 50       	subi	r16, 0x01	; 1
    275e:	30 f0       	brcs	.+12     	; 0x276c <__ftoa_engine+0x142>
    2760:	08 0f       	add	r16, r24
    2762:	0a f4       	brpl	.+2      	; 0x2766 <__ftoa_engine+0x13c>
    2764:	00 27       	eor	r16, r16
    2766:	02 17       	cp	r16, r18
    2768:	08 f4       	brcc	.+2      	; 0x276c <__ftoa_engine+0x142>
    276a:	20 2f       	mov	r18, r16
    276c:	23 95       	inc	r18
    276e:	02 2f       	mov	r16, r18
    2770:	7a 33       	cpi	r23, 0x3A	; 58
    2772:	28 f0       	brcs	.+10     	; 0x277e <__ftoa_engine+0x154>
    2774:	79 e3       	ldi	r23, 0x39	; 57
    2776:	7d 93       	st	X+, r23
    2778:	2a 95       	dec	r18
    277a:	e9 f7       	brne	.-6      	; 0x2776 <__ftoa_engine+0x14c>
    277c:	10 c0       	rjmp	.+32     	; 0x279e <__ftoa_engine+0x174>
    277e:	7d 93       	st	X+, r23
    2780:	2a 95       	dec	r18
    2782:	89 f6       	brne	.-94     	; 0x2726 <__ftoa_engine+0xfc>
    2784:	06 94       	lsr	r0
    2786:	97 95       	ror	r25
    2788:	67 95       	ror	r22
    278a:	37 95       	ror	r19
    278c:	17 95       	ror	r17
    278e:	17 94       	ror	r1
    2790:	e1 18       	sub	r14, r1
    2792:	f1 0a       	sbc	r15, r17
    2794:	43 0b       	sbc	r20, r19
    2796:	56 0b       	sbc	r21, r22
    2798:	c9 0b       	sbc	r28, r25
    279a:	d0 09       	sbc	r29, r0
    279c:	98 f0       	brcs	.+38     	; 0x27c4 <__ftoa_engine+0x19a>
    279e:	23 95       	inc	r18
    27a0:	7e 91       	ld	r23, -X
    27a2:	73 95       	inc	r23
    27a4:	7a 33       	cpi	r23, 0x3A	; 58
    27a6:	08 f0       	brcs	.+2      	; 0x27aa <__ftoa_engine+0x180>
    27a8:	70 e3       	ldi	r23, 0x30	; 48
    27aa:	7c 93       	st	X, r23
    27ac:	20 13       	cpse	r18, r16
    27ae:	b8 f7       	brcc	.-18     	; 0x279e <__ftoa_engine+0x174>
    27b0:	7e 91       	ld	r23, -X
    27b2:	70 61       	ori	r23, 0x10	; 16
    27b4:	7d 93       	st	X+, r23
    27b6:	30 f0       	brcs	.+12     	; 0x27c4 <__ftoa_engine+0x19a>
    27b8:	83 95       	inc	r24
    27ba:	71 e3       	ldi	r23, 0x31	; 49
    27bc:	7d 93       	st	X+, r23
    27be:	70 e3       	ldi	r23, 0x30	; 48
    27c0:	2a 95       	dec	r18
    27c2:	e1 f7       	brne	.-8      	; 0x27bc <__ftoa_engine+0x192>
    27c4:	11 24       	eor	r1, r1
    27c6:	ef 90       	pop	r14
    27c8:	ff 90       	pop	r15
    27ca:	0f 91       	pop	r16
    27cc:	1f 91       	pop	r17
    27ce:	cf 91       	pop	r28
    27d0:	df 91       	pop	r29
    27d2:	99 27       	eor	r25, r25
    27d4:	87 fd       	sbrc	r24, 7
    27d6:	90 95       	com	r25
    27d8:	08 95       	ret

000027da <strnlen_P>:
    27da:	fc 01       	movw	r30, r24
    27dc:	05 90       	lpm	r0, Z+
    27de:	61 50       	subi	r22, 0x01	; 1
    27e0:	70 40       	sbci	r23, 0x00	; 0
    27e2:	01 10       	cpse	r0, r1
    27e4:	d8 f7       	brcc	.-10     	; 0x27dc <strnlen_P+0x2>
    27e6:	80 95       	com	r24
    27e8:	90 95       	com	r25
    27ea:	8e 0f       	add	r24, r30
    27ec:	9f 1f       	adc	r25, r31
    27ee:	08 95       	ret

000027f0 <strnlen>:
    27f0:	fc 01       	movw	r30, r24
    27f2:	61 50       	subi	r22, 0x01	; 1
    27f4:	70 40       	sbci	r23, 0x00	; 0
    27f6:	01 90       	ld	r0, Z+
    27f8:	01 10       	cpse	r0, r1
    27fa:	d8 f7       	brcc	.-10     	; 0x27f2 <strnlen+0x2>
    27fc:	80 95       	com	r24
    27fe:	90 95       	com	r25
    2800:	8e 0f       	add	r24, r30
    2802:	9f 1f       	adc	r25, r31
    2804:	08 95       	ret

00002806 <fputc>:
    2806:	0f 93       	push	r16
    2808:	1f 93       	push	r17
    280a:	cf 93       	push	r28
    280c:	df 93       	push	r29
    280e:	fb 01       	movw	r30, r22
    2810:	23 81       	ldd	r18, Z+3	; 0x03
    2812:	21 fd       	sbrc	r18, 1
    2814:	03 c0       	rjmp	.+6      	; 0x281c <fputc+0x16>
    2816:	8f ef       	ldi	r24, 0xFF	; 255
    2818:	9f ef       	ldi	r25, 0xFF	; 255
    281a:	2c c0       	rjmp	.+88     	; 0x2874 <fputc+0x6e>
    281c:	22 ff       	sbrs	r18, 2
    281e:	16 c0       	rjmp	.+44     	; 0x284c <fputc+0x46>
    2820:	46 81       	ldd	r20, Z+6	; 0x06
    2822:	57 81       	ldd	r21, Z+7	; 0x07
    2824:	24 81       	ldd	r18, Z+4	; 0x04
    2826:	35 81       	ldd	r19, Z+5	; 0x05
    2828:	42 17       	cp	r20, r18
    282a:	53 07       	cpc	r21, r19
    282c:	44 f4       	brge	.+16     	; 0x283e <fputc+0x38>
    282e:	a0 81       	ld	r26, Z
    2830:	b1 81       	ldd	r27, Z+1	; 0x01
    2832:	9d 01       	movw	r18, r26
    2834:	2f 5f       	subi	r18, 0xFF	; 255
    2836:	3f 4f       	sbci	r19, 0xFF	; 255
    2838:	31 83       	std	Z+1, r19	; 0x01
    283a:	20 83       	st	Z, r18
    283c:	8c 93       	st	X, r24
    283e:	26 81       	ldd	r18, Z+6	; 0x06
    2840:	37 81       	ldd	r19, Z+7	; 0x07
    2842:	2f 5f       	subi	r18, 0xFF	; 255
    2844:	3f 4f       	sbci	r19, 0xFF	; 255
    2846:	37 83       	std	Z+7, r19	; 0x07
    2848:	26 83       	std	Z+6, r18	; 0x06
    284a:	14 c0       	rjmp	.+40     	; 0x2874 <fputc+0x6e>
    284c:	8b 01       	movw	r16, r22
    284e:	ec 01       	movw	r28, r24
    2850:	fb 01       	movw	r30, r22
    2852:	00 84       	ldd	r0, Z+8	; 0x08
    2854:	f1 85       	ldd	r31, Z+9	; 0x09
    2856:	e0 2d       	mov	r30, r0
    2858:	09 95       	icall
    285a:	89 2b       	or	r24, r25
    285c:	e1 f6       	brne	.-72     	; 0x2816 <fputc+0x10>
    285e:	d8 01       	movw	r26, r16
    2860:	16 96       	adiw	r26, 0x06	; 6
    2862:	8d 91       	ld	r24, X+
    2864:	9c 91       	ld	r25, X
    2866:	17 97       	sbiw	r26, 0x07	; 7
    2868:	01 96       	adiw	r24, 0x01	; 1
    286a:	17 96       	adiw	r26, 0x07	; 7
    286c:	9c 93       	st	X, r25
    286e:	8e 93       	st	-X, r24
    2870:	16 97       	sbiw	r26, 0x06	; 6
    2872:	ce 01       	movw	r24, r28
    2874:	df 91       	pop	r29
    2876:	cf 91       	pop	r28
    2878:	1f 91       	pop	r17
    287a:	0f 91       	pop	r16
    287c:	08 95       	ret

0000287e <printf>:
    287e:	a0 e0       	ldi	r26, 0x00	; 0
    2880:	b0 e0       	ldi	r27, 0x00	; 0
    2882:	e5 e4       	ldi	r30, 0x45	; 69
    2884:	f4 e1       	ldi	r31, 0x14	; 20
    2886:	0c 94 ee 12 	jmp	0x25dc	; 0x25dc <__prologue_saves__+0x20>
    288a:	ae 01       	movw	r20, r28
    288c:	4b 5f       	subi	r20, 0xFB	; 251
    288e:	5f 4f       	sbci	r21, 0xFF	; 255
    2890:	fa 01       	movw	r30, r20
    2892:	61 91       	ld	r22, Z+
    2894:	71 91       	ld	r23, Z+
    2896:	af 01       	movw	r20, r30
    2898:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <__iob+0x2>
    289c:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <__iob+0x3>
    28a0:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <vfprintf>
    28a4:	e2 e0       	ldi	r30, 0x02	; 2
    28a6:	0c 94 0a 13 	jmp	0x2614	; 0x2614 <__epilogue_restores__+0x20>

000028aa <sprintf>:
    28aa:	ae e0       	ldi	r26, 0x0E	; 14
    28ac:	b0 e0       	ldi	r27, 0x00	; 0
    28ae:	eb e5       	ldi	r30, 0x5B	; 91
    28b0:	f4 e1       	ldi	r31, 0x14	; 20
    28b2:	0c 94 ec 12 	jmp	0x25d8	; 0x25d8 <__prologue_saves__+0x1c>
    28b6:	0d 89       	ldd	r16, Y+21	; 0x15
    28b8:	1e 89       	ldd	r17, Y+22	; 0x16
    28ba:	86 e0       	ldi	r24, 0x06	; 6
    28bc:	8c 83       	std	Y+4, r24	; 0x04
    28be:	1a 83       	std	Y+2, r17	; 0x02
    28c0:	09 83       	std	Y+1, r16	; 0x01
    28c2:	8f ef       	ldi	r24, 0xFF	; 255
    28c4:	9f e7       	ldi	r25, 0x7F	; 127
    28c6:	9e 83       	std	Y+6, r25	; 0x06
    28c8:	8d 83       	std	Y+5, r24	; 0x05
    28ca:	ae 01       	movw	r20, r28
    28cc:	47 5e       	subi	r20, 0xE7	; 231
    28ce:	5f 4f       	sbci	r21, 0xFF	; 255
    28d0:	6f 89       	ldd	r22, Y+23	; 0x17
    28d2:	78 8d       	ldd	r23, Y+24	; 0x18
    28d4:	ce 01       	movw	r24, r28
    28d6:	01 96       	adiw	r24, 0x01	; 1
    28d8:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <vfprintf>
    28dc:	ef 81       	ldd	r30, Y+7	; 0x07
    28de:	f8 85       	ldd	r31, Y+8	; 0x08
    28e0:	e0 0f       	add	r30, r16
    28e2:	f1 1f       	adc	r31, r17
    28e4:	10 82       	st	Z, r1
    28e6:	2e 96       	adiw	r28, 0x0e	; 14
    28e8:	e4 e0       	ldi	r30, 0x04	; 4
    28ea:	0c 94 08 13 	jmp	0x2610	; 0x2610 <__epilogue_restores__+0x1c>

000028ee <__ultoa_invert>:
    28ee:	fa 01       	movw	r30, r20
    28f0:	aa 27       	eor	r26, r26
    28f2:	28 30       	cpi	r18, 0x08	; 8
    28f4:	51 f1       	breq	.+84     	; 0x294a <__ultoa_invert+0x5c>
    28f6:	20 31       	cpi	r18, 0x10	; 16
    28f8:	81 f1       	breq	.+96     	; 0x295a <__ultoa_invert+0x6c>
    28fa:	e8 94       	clt
    28fc:	6f 93       	push	r22
    28fe:	6e 7f       	andi	r22, 0xFE	; 254
    2900:	6e 5f       	subi	r22, 0xFE	; 254
    2902:	7f 4f       	sbci	r23, 0xFF	; 255
    2904:	8f 4f       	sbci	r24, 0xFF	; 255
    2906:	9f 4f       	sbci	r25, 0xFF	; 255
    2908:	af 4f       	sbci	r26, 0xFF	; 255
    290a:	b1 e0       	ldi	r27, 0x01	; 1
    290c:	3e d0       	rcall	.+124    	; 0x298a <__ultoa_invert+0x9c>
    290e:	b4 e0       	ldi	r27, 0x04	; 4
    2910:	3c d0       	rcall	.+120    	; 0x298a <__ultoa_invert+0x9c>
    2912:	67 0f       	add	r22, r23
    2914:	78 1f       	adc	r23, r24
    2916:	89 1f       	adc	r24, r25
    2918:	9a 1f       	adc	r25, r26
    291a:	a1 1d       	adc	r26, r1
    291c:	68 0f       	add	r22, r24
    291e:	79 1f       	adc	r23, r25
    2920:	8a 1f       	adc	r24, r26
    2922:	91 1d       	adc	r25, r1
    2924:	a1 1d       	adc	r26, r1
    2926:	6a 0f       	add	r22, r26
    2928:	71 1d       	adc	r23, r1
    292a:	81 1d       	adc	r24, r1
    292c:	91 1d       	adc	r25, r1
    292e:	a1 1d       	adc	r26, r1
    2930:	20 d0       	rcall	.+64     	; 0x2972 <__ultoa_invert+0x84>
    2932:	09 f4       	brne	.+2      	; 0x2936 <__ultoa_invert+0x48>
    2934:	68 94       	set
    2936:	3f 91       	pop	r19
    2938:	2a e0       	ldi	r18, 0x0A	; 10
    293a:	26 9f       	mul	r18, r22
    293c:	11 24       	eor	r1, r1
    293e:	30 19       	sub	r19, r0
    2940:	30 5d       	subi	r19, 0xD0	; 208
    2942:	31 93       	st	Z+, r19
    2944:	de f6       	brtc	.-74     	; 0x28fc <__ultoa_invert+0xe>
    2946:	cf 01       	movw	r24, r30
    2948:	08 95       	ret
    294a:	46 2f       	mov	r20, r22
    294c:	47 70       	andi	r20, 0x07	; 7
    294e:	40 5d       	subi	r20, 0xD0	; 208
    2950:	41 93       	st	Z+, r20
    2952:	b3 e0       	ldi	r27, 0x03	; 3
    2954:	0f d0       	rcall	.+30     	; 0x2974 <__ultoa_invert+0x86>
    2956:	c9 f7       	brne	.-14     	; 0x294a <__ultoa_invert+0x5c>
    2958:	f6 cf       	rjmp	.-20     	; 0x2946 <__ultoa_invert+0x58>
    295a:	46 2f       	mov	r20, r22
    295c:	4f 70       	andi	r20, 0x0F	; 15
    295e:	40 5d       	subi	r20, 0xD0	; 208
    2960:	4a 33       	cpi	r20, 0x3A	; 58
    2962:	18 f0       	brcs	.+6      	; 0x296a <__ultoa_invert+0x7c>
    2964:	49 5d       	subi	r20, 0xD9	; 217
    2966:	31 fd       	sbrc	r19, 1
    2968:	40 52       	subi	r20, 0x20	; 32
    296a:	41 93       	st	Z+, r20
    296c:	02 d0       	rcall	.+4      	; 0x2972 <__ultoa_invert+0x84>
    296e:	a9 f7       	brne	.-22     	; 0x295a <__ultoa_invert+0x6c>
    2970:	ea cf       	rjmp	.-44     	; 0x2946 <__ultoa_invert+0x58>
    2972:	b4 e0       	ldi	r27, 0x04	; 4
    2974:	a6 95       	lsr	r26
    2976:	97 95       	ror	r25
    2978:	87 95       	ror	r24
    297a:	77 95       	ror	r23
    297c:	67 95       	ror	r22
    297e:	ba 95       	dec	r27
    2980:	c9 f7       	brne	.-14     	; 0x2974 <__ultoa_invert+0x86>
    2982:	00 97       	sbiw	r24, 0x00	; 0
    2984:	61 05       	cpc	r22, r1
    2986:	71 05       	cpc	r23, r1
    2988:	08 95       	ret
    298a:	9b 01       	movw	r18, r22
    298c:	ac 01       	movw	r20, r24
    298e:	0a 2e       	mov	r0, r26
    2990:	06 94       	lsr	r0
    2992:	57 95       	ror	r21
    2994:	47 95       	ror	r20
    2996:	37 95       	ror	r19
    2998:	27 95       	ror	r18
    299a:	ba 95       	dec	r27
    299c:	c9 f7       	brne	.-14     	; 0x2990 <__ultoa_invert+0xa2>
    299e:	62 0f       	add	r22, r18
    29a0:	73 1f       	adc	r23, r19
    29a2:	84 1f       	adc	r24, r20
    29a4:	95 1f       	adc	r25, r21
    29a6:	a0 1d       	adc	r26, r0
    29a8:	08 95       	ret

000029aa <_exit>:
    29aa:	f8 94       	cli

000029ac <__stop_program>:
    29ac:	ff cf       	rjmp	.-2      	; 0x29ac <__stop_program>
